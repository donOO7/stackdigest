-- MySQL dump 10.13  Distrib 8.0.19, for Win64 (x86_64)
--
-- Host: localhost    Database: stackdigest
-- ------------------------------------------------------
-- Server version	8.0.19

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `answersd`
--

DROP TABLE IF EXISTS `answersd`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `answersd` (
  `body` longtext,
  `creationDate` int DEFAULT NULL,
  `score` int DEFAULT NULL,
  `aId` int NOT NULL,
  PRIMARY KEY (`aId`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answersd`
--

LOCK TABLES `answersd` WRITE;
/*!40000 ALTER TABLE `answersd` DISABLE KEYS */;
INSERT INTO `answersd` VALUES ('<p><strong>You are a victim of <a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">branch prediction</a> fail.</strong></p>\n<hr />\n<h2>What is Branch Prediction?</h2>\n<p>Consider a railroad junction:</p>\n<p><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/muxnt.jpg\" alt=\"Image showing a railroad junction\" /></a>\n<sub><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\" rel=\"noreferrer\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\"//creativecommons.org/licenses/by-sa/3.0/deed.en\" rel=\"noreferrer\">CC-By-SA 3.0</a> license.</sub></p>\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\n<p>Is there a better way? You guess which direction the train will go!</p>\n<ul>\n<li>If you guessed right, it continues on.</li>\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\n</ul>\n<p><strong>If you guess right every time</strong>, the train will never have to stop. <br/>\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\n<hr />\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\n<p><img src=\"https://i.stack.imgur.com/pyfwC.png\" alt=\"Screenshot of compiled code containing an if statement\" /></p>\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to &quot;warm up&quot; and &quot;slow down&quot;.</em></p>\n<p>Is there a better way? You guess which direction the branch will go!</p>\n<ul>\n<li>If you guessed right, you continue executing.</li>\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\n</ul>\n<p><strong>If you guess right every time</strong>, the execution will never have to stop. <br/>\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\n<hr />\n<p>This is branch prediction. I admit it\'s not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn\'t know which direction a branch will go until the last moment.</p>\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...</p>\n<p><em><strong>In other words, you try to identify a pattern and follow it.</strong></em> This is more or less how branch predictors work.</p>\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\n<p>Further reading: <a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">&quot;Branch predictor&quot; article on Wikipedia</a>.</p>\n<hr />\n<h2>As hinted from above, the culprit is this if-statement:</h2>\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n<p>Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\n<p><strong>Quick visualization:</strong></p>\n<pre><code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code></pre>\n<p>However, when the data is completely random, the branch predictor is rendered useless, because it can\'t predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).</p>\n<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n</code></pre>\n<hr />\n<p><strong>So what can be done?</strong></p>\n<p>If the compiler isn\'t able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\n<p>Replace:</p>\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n<p>with:</p>\n<pre><code>int t = (data[c] - 128) &gt;&gt; 31;\nsum += ~t &amp; data[c];\n</code></pre>\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it\'s valid for all the input values of <code>data[]</code>.)</sub></p>\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\n<p>C++ - Visual Studio 2010 - x64 Release</p>\n<pre><code>//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n</code></pre>\n<p>Java - NetBeans 7.1.1 JDK 7 - x64</p>\n<pre><code>//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n</code></pre>\n<p>Observations:</p>\n<ul>\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\n</ul>\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).</p>\n<hr />\n<p><strong>Update:</strong></p>\n<ul>\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p>\n<p>(Or somewhat fast: for the already-sorted case, <code>cmov</code> can be slower especially if GCC puts it on the critical path instead of just <code>add</code>, especially on Intel before Broadwell where <code>cmov</code> has 2 cycle latency: <a href=\"https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2\">gcc optimization flag -O3 makes code slower than -O2</a>)</p>\n</li>\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Intel_C%2B%2B_Compiler\" rel=\"noreferrer\">Intel C++ Compiler</a> (ICC) 11 does something miraculous. It <a href=\"https://en.wikipedia.org/wiki/Loop_interchange\" rel=\"noreferrer\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune to the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p>\n</li>\n<li><p>If you give the Intel compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p>\n</li>\n</ul>\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\n',1340805402,31893,11227902),('<h3>Undo a commit and redo</h3>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git commit -m \"Something terribly misguided\"             # (1)\n$ git reset HEAD~                                          # (2)\n&lt;&lt; edit files as necessary &gt;&gt;                              # (3)\n$ git add ...                                              # (4)\n$ git commit -c ORIG_HEAD                                  # (5)\n</code></pre>\n\n<ol>\n<li>This is what you want to undo.</li>\n<li>This does nothing to your working tree (the state of your files on disk), but undoes the commit and leaves the changes you committed unstaged (so they\'ll appear as \"Changes not staged for commit\" in <code>git status</code>, so you\'ll need to add them again before committing). If you <em>only</em> want to <em>add</em> more changes to the previous commit, or change the commit message<sup>1</sup>, you could use <code>git reset --soft HEAD~</code> instead, which is like <code>git reset HEAD~</code><sup>2</sup> but leaves your existing changes staged.</li>\n<li>Make corrections to working tree files.</li>\n<li><code>git add</code> anything that you want to include in your new commit.</li>\n<li>Commit the changes, reusing the old commit message. <code>reset</code> copied the old head to <code>.git/ORIG_HEAD</code>; <code>commit</code> with <code>-c ORIG_HEAD</code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the <code>-C</code> option.</li>\n</ol>\n\n<p>Beware, however, that if you have added any new changes to the index, using <code>commit --amend</code> will add them to your previous commit.</p>\n\n<p>If the code is already pushed to your server and you have permissions to overwrite history (rebase) then:</p>\n\n<pre><code>git push origin master --force\n</code></pre>\n\n<p>You can also look at this answer:  </p>\n\n<p><a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716\">How can I move HEAD back to a previous location? (Detached head) &amp; Undo commits</a></p>\n\n<p>The above answer will show you <code>git reflog,</code> which is used to find out what is the SHA-1, which you wish to revert. Once you found the point to which you want to undo to use the sequence of commands as explained above.</p>\n\n<hr>\n\n<p><sup>1</sup> Note, however, that you don\'t need to reset to an earlier commit if you just made a mistake in your <em>commit message</em>. The easier option is to <code>git reset</code> (to unstage any changes you\'ve made since) and then <a href=\"https://stackoverflow.com/q/179123/1146608\"><code>git commit --amend</code></a>, which will open your default commit message editor pre-populated with the last commit message. </p>\n\n<p><sup>2</sup> <code>HEAD~</code> is the same as <code>HEAD~1</code>. Also, see <a href=\"https://stackoverflow.com/a/46350644/5175709\">What is the HEAD in git?</a>. It\'s helpful if you want to uncommit multiple commits.</p>\n',1243620822,22960,927386),('<h1>Executive Summary</h1>\n\n<pre><code>$ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\n$ git branch -d &lt;branch_name&gt;\n</code></pre>\n\n<p>Note that in most cases the remote name is <code>origin</code>.\nIn such a case you\'ll have to use the command like so.</p>\n\n<pre><code>$ git push -d origin &lt;branch_name&gt;\n</code></pre>\n\n<h1>Delete Local Branch</h1>\n\n<p>To delete the <em>local</em> branch use one of the following:</p>\n\n<pre><code>$ git branch -d branch_name\n$ git branch -D branch_name\n</code></pre>\n\n<p><strong>Note:</strong> The <code>-d</code> option is an alias for <code>--delete</code>, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use <code>-D</code>, which is an alias for <code>--delete --force</code>, which deletes the branch \"irrespective of its merged status.\" [Source: <code>man git-branch</code>] </p>\n\n<h1>Delete Remote Branch [Updated on 8-Sep-2017]</h1>\n\n<p>As of <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\" rel=\"noreferrer\">Git v1.7.0</a>, you can delete a <strong><em>remote</em></strong> branch using</p>\n\n<pre><code>$ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\n</code></pre>\n\n<p>which might be easier to remember than</p>\n\n<pre><code>$ git push &lt;remote_name&gt; :&lt;branch_name&gt;\n</code></pre>\n\n<p>which was added in <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\" rel=\"noreferrer\">Git v1.5.0</a> \"to delete a remote branch or a tag.\"</p>\n\n<p>Starting on <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\" rel=\"noreferrer\">Git v2.8.0</a> you can also use <code>git push</code> with the <code>-d</code> option as an alias for <code>--delete</code>.</p>\n\n<p>Therefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.</p>\n\n<h2>Delete Remote Branch [Original Answer from 5-Jan-2010]</h2>\n\n<p>From Chapter 3 of <a href=\"http://git-scm.com/book/en/Git-Branching-Remote-Branches\" rel=\"noreferrer\"><em>Pro Git</em></a> by Scott Chacon:</p>\n\n<blockquote>\n  <h3>Deleting Remote Branches</h3>\n  \n  <p>Suppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or whatever branch your stable code-line is in). You can delete a remote branch using the rather obtuse syntax <code>git push [remotename] :[branch]</code>. If you want to delete your server-fix branch from the server, you run the following:</p>\n\n<pre><code>$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n</code></pre>\n  \n  <p>Boom. No more branches on your server. You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax. A way to remember this command is by recalling the <code>git push [remotename] [localbranch]:[remotebranch]</code> syntax that we went over a bit earlier. If you leave off the <code>[localbranch]</code> portion, then you’re basically saying, “Take nothing on my side and make it be <code>[remotebranch]</code>.”</p>\n</blockquote>\n\n<p>I issued <code>git push origin: bugfix</code> and it worked beautifully. Scott Chacon was right—I will want to <a href=\"http://en.wiktionary.org/wiki/dogear#Verb\" rel=\"noreferrer\">dog ear</a> that page (or virtually dog ear by answering this on Stack&nbsp;Overflow).</p>\n\n<p>Then you should execute this on other machines</p>\n\n<pre><code># Fetch changes from all remotes and locally delete \n# remote deleted branches/tags etc\n# --prune will do the job :-;\ngit fetch --all --prune\n</code></pre>\n\n<p>to propagate changes.</p>\n',1262654035,21510,2003515),('<p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.</p>\n<p>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>.</p>\n<p>This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running <code>git fetch</code> periodically in a cron job in the background (although I wouldn\'t recommend doing this).</p>\n<p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p>\n<p>From the Git documentation for <a href=\"http://git-scm.com/docs/git-pull\" rel=\"noreferrer\"><strong>git pull</strong></a>:</p>\n<blockquote>\n<p>In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p>\n</blockquote>\n',1226742760,9962,292359),('<p>For JSON text:</p>\n\n<p><strong><code>application/json</code></strong></p>\n\n<blockquote>\n  <p>The MIME media type for JSON text is <strong><code>application/json</code></strong>. The default encoding is UTF-8. (Source: <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"noreferrer\">RFC 4627</a>).</p>\n</blockquote>\n\n<p>For <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSONP</a> (runnable javascript) with callback:</p>\n\n<blockquote>\n  <p><strong><code>application/javascript</code></strong></p>\n</blockquote>\n\n<p>Here are some blog posts that were mentioned in the comments that are relevant.</p>\n\n<ul>\n<li><a href=\"http://jibbering.com/blog/?p=514\" rel=\"noreferrer\">Why you shouldn\'t use <code>text/html</code> for JSON</a></li>\n<li><a href=\"https://web.archive.org/web/20180102070201/www.entwicklungsgedanken.de/2008/06/06/problems-with-internet-explorer-and-applicationjson/\" rel=\"noreferrer\">Internet&nbsp;Explorer sometimes has issues with <code>application/json</code></a></li>\n<li><a href=\"https://github.com/h5bp/server-configs-nginx/blob/master/mime.types\" rel=\"noreferrer\">A rather complete list of Mimetypes and what to use them for</a></li>\n<li><a href=\"http://www.iana.org/assignments/media-types/application/\" rel=\"noreferrer\">The official mime type list at IANA</a> from @gnrfan\'s answer below</li>\n</ul>\n',1232897249,10341,477819),('<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it\'s a useless example, but it\'s handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it\'ll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>\"if/else\"</code>.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p><em>Generator:</em></p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n    # Here is the code that will be called each time you use the generator object:\n\n    # If there is still a child of the node object on its left\n    # AND if the distance is ok, return the next child\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n\n    # If there is still a child of the node object on its right\n    # AND if the distance is ok, return the next child\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild\n\n    # If the function arrives here, the generator will be considered empty\n    # there is no more than two values: the left and the right children\n</code></pre>\n\n<p><em>Caller:</em></p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidate\'s list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list, but the list expands while the loop is being iterated :-) It\'s a concise way to go through all these nested data even if it\'s a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhaust all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it\'s not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code, it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don\'t need to read the values twice.</li>\n<li>You may have a lot of children and you don\'t want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # Let\'s create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # When everything\'s ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n[\'$100\', \'$100\', \'$100\', \'$100\', \'$100\']\n&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type \'exceptions.StopIteration\'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It\'s even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type \'exceptions.StopIteration\'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type \'exceptions.StopIteration\'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let\'s see the possible orders of arrival for a four-horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>There is more about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\" rel=\"noreferrer\">how <code>for</code> loops work</a>.</p>\n',1224802124,14750,231855),('<p>You can undo <code>git add</code> before commit with</p>\n<pre><code>git reset &lt;file&gt;\n</code></pre>\n<p>which will remove it from the current index (the &quot;about to be committed&quot; list) without changing anything else.</p>\n<p>You can use</p>\n<pre><code>git reset\n</code></pre>\n<p>without any file name to unstage all due changes. This can come in handy when there are too many files to be listed one by one in a reasonable amount of time.</p>\n<p>In old versions of Git, the above commands are equivalent to <code>git reset HEAD &lt;file&gt;</code> and <code>git reset HEAD</code> respectively, and will fail if <code>HEAD</code> is undefined (because you haven\'t yet made any commits in your repository) or ambiguous (because you created a branch called <code>HEAD</code>, which is a stupid thing that you shouldn\'t do). This <a href=\"https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/1.8.2.txt#n179\" rel=\"noreferrer\">was changed in Git 1.8.2</a>, though, so in modern versions of Git you can use the commands above even prior to making your first commit:</p>\n<blockquote>\n<p>&quot;git reset&quot; (without options or parameters) used to error out when\nyou do not have any commits in your history, but it now gives you\nan empty index (to match non-existent commit you are not even on).</p>\n</blockquote>\n<p>Documentation: <a href=\"https://git-scm.com/docs/git-reset\" rel=\"noreferrer\"><strong>git reset</strong></a></p>\n',1228689048,10454,348234),('<p><code>--&gt;</code> is not an operator. It is in fact two separate operators, <code>--</code> and <code>&gt;</code>.</p>\n\n<p>The conditional\'s code decrements <code>x</code>, while returning <code>x</code>\'s original (not decremented) value, and then compares the original value with <code>0</code> using the <code>&gt;</code> operator.</p>\n\n<p><strong>To better understand, the statement could be written as follows:</strong></p>\n\n<pre><code>while( (x--) &gt; 0 )\n</code></pre>\n',1256799609,8649,1642035),('<p>If you want to rename a branch while pointed to any branch, do:</p>\n\n<pre><code>git branch -m &lt;oldname&gt; &lt;newname&gt;\n</code></pre>\n\n<p>If you want to rename the current branch, you can do:</p>\n\n<pre><code>git branch -m &lt;newname&gt;\n</code></pre>\n\n<p>A way to remember this is <code>-m</code> is for \"move\" (or <code>mv</code>), which is how you rename files. Adding an alias could also help. To do so, run the following:</p>\n\n<pre><code>git config --global alias.rename \'branch -m\'\n</code></pre>\n\n<p>If you are on Windows or another case-insensitive filesystem, and there are only capitalization changes in the name, you need to use <code>-M</code>, otherwise, git will throw <em><strong>branch already exists</strong></em> error:</p>\n\n<pre><code>git branch -M &lt;newname&gt;\n</code></pre>\n',1309922502,13841,6591218),('<p>Find the <code>index</code> of the array element you want to remove using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"noreferrer\"><code>indexOf</code></a>, and then remove that index with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a>.</p>\n\n<blockquote>\n  <p>The splice() method changes the contents of an array by removing\n  existing elements and/or adding new elements.</p>\n</blockquote>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const array = [2, 5, 9];\r\n\r\nconsole.log(array);\r\n\r\nconst index = array.indexOf(5);\r\nif (index &gt; -1) {\r\n  array.splice(index, 1);\r\n}\r\n\r\n// array = [2, 9]\r\nconsole.log(array); </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n\n<hr>\n\n<p>For the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of <code>5</code> from <code>[2,5,9,1,5,8,5]</code>), while the second function removes all occurrences:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function removeItemOnce(arr, value) {\r\n  var index = arr.indexOf(value);\r\n  if (index &gt; -1) {\r\n    arr.splice(index, 1);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction removeItemAll(arr, value) {\r\n  var i = 0;\r\n  while (i &lt; arr.length) {\r\n    if (arr[i] === value) {\r\n      arr.splice(i, 1);\r\n    } else {\r\n      ++i;\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n//Usage\r\nconsole.log(removeItemOnce([2,5,9,1,5,8,5], 5))\r\nconsole.log(removeItemAll([2,5,9,1,5,8,5], 5))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1303597430,12010,5767357),('<p>The stack is the memory set aside as scratch space for a thread of execution.  When a function is called, a block is reserved on the top of the stack for local variables and some bookkeeping data.  When that function returns, the block becomes unused and can be used the next time a function is called.  The stack is always reserved in a LIFO (last in first out) order; the most recently reserved block is always the next block to be freed.  This makes it really simple to keep track of the stack; freeing a block from the stack is nothing more than adjusting one pointer.</p>\n\n<p>The heap is memory set aside for dynamic allocation.  Unlike the stack, there\'s no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time.  This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.</p>\n\n<p>Each thread gets a stack, while there\'s typically only one heap for the application (although it isn\'t uncommon to have multiple heaps for different types of allocation).</p>\n\n<p>To answer your questions directly:  </p>\n\n<blockquote>\n  <p><em>To what extent are they controlled by the OS or language runtime?</em></p>\n</blockquote>\n\n<p>The OS allocates the stack for each system-level thread when the thread is created.  Typically the OS is called by the language runtime to allocate the heap for the application.</p>\n\n<blockquote>\n  <p><em>What is their scope?</em></p>\n</blockquote>\n\n<p>The stack is attached to a thread, so when the thread exits the stack is reclaimed.  The heap is typically allocated at application startup by the runtime, and is reclaimed when the application (technically process) exits.</p>\n\n<blockquote>\n  <p><em>What determines the size of each of them?</em>  </p>\n</blockquote>\n\n<p>The size of the stack is set when a thread is created.  The size of the heap is set on application startup, but can grow as space is needed (the allocator requests more memory from the operating system).</p>\n\n<blockquote>\n  <p><em>What makes one faster?</em></p>\n</blockquote>\n\n<p>The stack is faster because the access pattern makes it trivial to allocate and deallocate memory from it (a pointer/integer is simply incremented or decremented), while the heap has much more complex bookkeeping involved in an allocation or deallocation.  Also, each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache, making it very fast. Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be - typically - synchronized with \"all\" other heap accesses in the program.</p>\n\n<p>A clear demonstration:\n<img src=\"https://i.stack.imgur.com/i6k0Z.png\" alt=\"\">\n<br/><sub>Image source: <a href=\"http://vikashazrati.wordpress.com/2007/10/01/quicktip-java-basics-stack-and-heap/\" rel=\"noreferrer\">vikashazrati.wordpress.com</a></sub></p>\n',1221627139,5992,80113),('<p>Since the question refers to a single element, this code might be more suitable:</p>\n\n<pre><code>// Checks CSS content for display:[none|block], ignores visibility:[true|false]\n$(element).is(\":visible\");\n\n// The same works with hidden\n$(element).is(\":hidden\");\n</code></pre>\n\n<p>It is the same as <a href=\"https://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\">twernt\'s suggestion</a>, but applied to a single element; and it <a href=\"https://stackoverflow.com/questions/178325/how-do-i-check-if-an-element-is-hidden-in-jquery/4685330#4685330\">matches the algorithm recommended in the jQuery FAQ</a>.</p>\n\n<p>We use jQuery\'s is() to check the selected element with another element, selector or any jQuery object. This method traverses along the DOM elements to find a match, which satisfies the passed parameter. It will return true if there is a match, otherwise return false.</p>\n',1223386222,9430,178450),('<h2>One does not simply redirect using jQuery</h2>\n\n<p>jQuery is not necessary, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/replace\" rel=\"noreferrer\"><strong><code>window.location.replace(...)</code></strong></a> will best simulate an HTTP redirect.  </p>\n\n<p><code>window.location.replace(...)</code> is better than using <code>window.location.href</code>, because <code>replace()</code> does not keep the originating page in the session history, meaning the user won\'t get stuck in a never-ending back-button fiasco.</p>\n\n<p>If you want to simulate someone clicking on a link, use\n <strong><code>location.href</code></strong></p>\n\n<p>If you want to simulate an HTTP redirect, use <strong><code>location.replace</code></strong></p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>// similar behavior as an HTTP redirect\nwindow.location.replace(\"http://stackoverflow.com\");\n\n// similar behavior as clicking on a link\nwindow.location.href = \"http://stackoverflow.com\";\n</code></pre>\n',1233635049,14846,506004),('<h1>Amending the most recent commit message</h1>\n<pre class=\"lang-sh prettyprint-override\"><code>git commit --amend\n</code></pre>\n<p>will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>git commit --amend -m &quot;New commit message&quot;\n</code></pre>\n<p>…however, this can make multi-line commit messages or small corrections more cumbersome to enter.</p>\n<p>Make sure you don\'t have any working copy changes <em>staged</em> before doing this or they will get committed too. (<em>Unstaged</em> changes will not get committed.)</p>\n<h2>Changing the message of a commit that you\'ve already pushed to your remote branch</h2>\n<p>If you\'ve already pushed your commit up to your remote branch, then - after amending your commit locally (as described above) - you\'ll also <a href=\"https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message\">need to force push the commit</a> with:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>git push &lt;remote&gt; &lt;branch&gt; --force\n# Or\ngit push &lt;remote&gt; &lt;branch&gt; -f\n</code></pre>\n<p><strong>Warning: force-pushing will overwrite the remote branch with the state of your local one</strong>. If there are commits on the remote branch that you don\'t have in your local branch, you <em>will</em> lose those commits.</p>\n<p><strong>Warning: be cautious about amending commits that you have already shared with other people.</strong> Amending commits essentially <em>rewrites</em> them to have different <a href=\"http://en.wikipedia.org/wiki/SHA-1\" rel=\"noreferrer\">SHA</a> IDs, which poses a problem if other people have copies of the old commit that you\'ve rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</p>\n<hr />\n<h3>Perform an interactive rebase</h3>\n<p>Another option is to use interactive rebase.\nThis allows you to edit any message you want to update even if it\'s not the latest message.</p>\n<p>In order to do a Git squash, follow these steps:</p>\n<pre><code>// n is the number of commits up to the last commit you want to be able to edit\ngit rebase -i HEAD~n\n</code></pre>\n<p>Once you squash your commits - choose the <code>e/r</code> for editing the message:</p>\n<p><a href=\"https://i.stack.imgur.com/LVcm9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/LVcm9.png\" alt=\"Enter image description here\" /></a></p>\n<h3>Important note about interactive rebase</h3>\n<p>When you use <code>git rebase -i HEAD~n</code> there can be <strong>more</strong> than n commits. Git will &quot;collect&quot; all the commits in the last n commits, and if there was a merge somewhere in between that range you will see all the commits as well, so the outcome will be n + .</p>\n<h3>Good tip:</h3>\n<p>If you have to do it for more than a single branch and you might face conflicts when amending the content, set up <a href=\"https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944\"><code>git rerere</code></a> and let Git resolve those conflicts automatically for you.</p>\n<hr />\n<h2>Documentation</h2>\n<ul>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-commit.html\" rel=\"noreferrer\">git-commit(1) Manual Page</a></p>\n</li>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html\" rel=\"noreferrer\">git-rebase(1) Manual Page</a></p>\n</li>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-push.html\" rel=\"noreferrer\">git-push(1) Manual Page</a></p>\n</li>\n</ul>\n',1223394634,16180,179147),('<p>No. </p>\n\n<p>The JSON should all be data, and if you include a comment, then it will be data too.</p>\n\n<p>You could have a designated data element called <code>\"_comment\"</code> (or something) that would be ignored by apps that use the JSON data.</p>\n\n<p>You would probably be better having the comment in the processes that generates/receives the JSON, as they are supposed to know what the JSON data will be in advance, or at least the structure of it. </p>\n\n<p>But if you decided to:</p>\n\n<pre><code>{\n   \"_comment\": \"comment text goes here...\",\n   \"glossary\": {\n      \"title\": \"example glossary\",\n      \"GlossDiv\": {\n         \"title\": \"S\",\n         \"GlossList\": {\n            \"GlossEntry\": {\n               \"ID\": \"SGML\",\n               \"SortAs\": \"SGML\",\n               \"GlossTerm\": \"Standard Generalized Markup Language\",\n               \"Acronym\": \"SGML\",\n               \"Abbrev\": \"ISO 8879:1986\",\n               \"GlossDef\": {\n                  \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                  \"GlossSeeAlso\": [\"GML\", \"XML\"]\n               },\n               \"GlossSee\": \"markup\"\n            }\n         }\n      }\n   }\n}\n</code></pre>\n',1225227702,5631,244858),('<p>A closure is a pairing of:</p>\n<ol>\n<li>A function, and</li>\n<li>A reference to that function\'s outer scope (lexical environment)</li>\n</ol>\n<p>A lexical environment is part of every execution context (stack frame), and is a map between identifiers (ie. local variable names) and values.</p>\n<p>Every function in JavaScript maintains a reference to its outer lexical environment. This reference is used to configure the execution context created when a function is invoked. This reference enables code inside the function to &quot;see&quot; variables declared outside the function, regardless of when and where the function is called.</p>\n<p>If a function was called by a function, which in turn was called by another function, then a chain of references to outer lexical environments is created. This chain is called the scope chain.</p>\n<p>In the following code, <code>inner</code> forms a closure with the lexical environment of the execution context created when <code>foo</code> is invoked, <em>closing over</em> variable <code>secret</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\n  const secret = Math.trunc(Math.random()*100)\n  return function inner() {\n    console.log(`The secret number is ${secret}.`)\n  }\n}\nconst f = foo() // `secret` is not directly accessible from outside `foo`\nf() // The only way to retrieve `secret`, is to invoke `f`</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In other words: in JavaScript, functions carry a reference to a private &quot;box of state&quot;, to which only they (and any other functions declared within the same lexical environment) have access. This box of state is invisible to the caller of the function, delivering an excellent mechanism for data-hiding and encapsulation.</p>\n<p>And remember: functions in JavaScript can be passed around like variables (first-class functions), meaning these pairings of functionality and state can be passed around your program: similar to how you might pass an instance of a class around in C++.</p>\n<p>If JavaScript did not have closures, then more state would have to be passed between functions <em>explicitly</em>, making parameter lists longer and code noisier.</p>\n<p>So, if you want a function to always have access to a private piece of state, you can use a closure.</p>\n<p>...and frequently we <em>do</em> want to associate state with a function. For example, in Java or C++, when you add a private instance variable and a method to a class, you are associating state with functionality.</p>\n<p>In C and most other common languages, after a function returns, all the local variables are no longer accessible because the stack-frame is destroyed. In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible after returning from it. In this way, in the code above, <code>secret</code> remains available to the function object <code>inner</code>, <em>after</em> it has been returned from <code>foo</code>.</p>\n<h2>Uses of Closures</h2>\n<p>Closures are useful whenever you need private state associated with a function. This is a very common scenario - and remember: JavaScript did not have a class syntax until 2015, and it still does not have a private field syntax. Closures meet this need.</p>\n<h3>Private Instance Variables</h3>\n<p>In the following code, function <code>toString</code> closes over the details of the car.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function Car(manufacturer, model, year, color) {\n  return {\n    toString() {\n      return `${manufacturer} ${model} (${year}, ${color})`\n    }\n  }\n}\nconst car = new Car(\'Aston Martin\',\'V8 Vantage\',\'2012\',\'Quantum Silver\')\nconsole.log(car.toString())</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Functional Programming</h3>\n<p>In the following code, function <code>inner</code> closes over both <code>fn</code> and <code>args</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function curry(fn) {\n  const args = []\n  return function inner(arg) {\n    if(args.length === fn.length) return fn(...args)\n    args.push(arg)\n    return inner\n  }\n}\n\nfunction add(a, b) {\n  return a + b\n}\n\nconst curriedAdd = curry(add)\nconsole.log(curriedAdd(2)(3)()) // 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Event-Oriented Programming</h3>\n<p>In the following code, function <code>onClick</code> closes over variable <code>BACKGROUND_COLOR</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const $ = document.querySelector.bind(document)\nconst BACKGROUND_COLOR = \'rgba(200,200,242,1)\'\n\nfunction onClick() {\n  $(\'body\').style.background = BACKGROUND_COLOR\n}\n\n$(\'button\').addEventListener(\'click\', onClick)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button&gt;Set background color&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Modularization</h3>\n<p>In the following example, all the implementation details are hidden inside an immediately executed function expression. The functions <code>tick</code> and <code>toString</code> close over the private state and functions they need to complete their work. Closures have enabled us to modularise and encapsulate our code.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let namespace = {};\n\n(function foo(n) {\n  let numbers = []\n  function format(n) {\n    return Math.trunc(n)\n  }\n  function tick() {\n    numbers.push(Math.random() * 100)\n  }\n  function toString() {\n    return numbers.map(format)\n  }\n  n.counter = {\n    tick,\n    toString\n  }\n}(namespace))\n\nconst counter = namespace.counter\ncounter.tick()\ncounter.tick()\nconsole.log(counter.toString())</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>Examples</h2>\n<h3>Example 1</h3>\n<p>This example shows that the local variables are not copied in the closure: the closure maintains a reference to the original variables <em>themselves</em>. It is as though the stack-frame stays alive in memory even after the outer function exits.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\n  let x = 42\n  let inner  = function() { console.log(x) }\n  x = x+1\n  return inner\n}\nvar f = foo()\nf() // logs 43</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Example 2</h3>\n<p>In the following code, three methods <code>log</code>, <code>increment</code> and <code>update</code> all close over the same lexical environment.</p>\n<p>And every time <code>createObject</code> is called, a new execution context (stack frame) is created and a completely new variable <code>x</code>, and a new set of functions (<code>log</code> etc.) are created, that close over this new variable.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function createObject() {\n  let x = 42;\n  return {\n    log() { console.log(x) },\n    increment() { x++ },\n    update(value) { x = value }\n  }\n}\n\nconst o = createObject()\no.increment()\no.log() // 43\no.update(5)\no.log() // 5\nconst p = createObject()\np.log() // 42</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Example 3</h3>\n<p>If you are using variables declared using <code>var</code>, be careful you understand which variable you are closing over. Variables declared using <code>var</code> are hoisted. This is much less of a problem in modern JavaScript due to the introduction of <code>let</code> and <code>const</code>.</p>\n<p>In the following code, each time around the loop, a new function <code>inner</code> is created, which closes over <code>i</code>. But because <code>var i</code> is hoisted outside the loop, all of these inner functions close over the same variable, meaning that the final value of <code>i</code> (3) is printed, three times.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\n  var result = []\n  for (var i = 0; i &lt; 3; i++) {\n    result.push(function inner() { console.log(i) } )\n  }\n  return result\n}\n\nconst result = foo()\n// The following will print `3`, three times...\nfor (var i = 0; i &lt; 3; i++) {\n  result[i]() \n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>Final points:</h2>\n<ul>\n<li>Whenever a function is declared in JavaScript a closure is created.</li>\n<li>Returning a <code>function</code> from inside another function is the classic example of a closure, because the state inside the outer function is implicitly available to the returned inner function, even after the outer function has completed execution.</li>\n<li>Whenever you use <code>eval()</code> inside a function, a closure is used. The text you <code>eval</code> can reference local variables of the function, and in non-strict mode you can even create new local variables by using <code>eval(\'var foo = …\')</code>.</li>\n<li>When you use <code>new Function(…)</code> (the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" rel=\"noreferrer\">Function constructor</a>) inside a function, it does not close over its lexical environment: it closes over the global context instead. The new function cannot reference the local variables of the outer function.</li>\n<li>A closure in JavaScript is like keeping a reference (<strong>NOT</strong> a copy) to the scope at the point of function declaration, which in turn keeps a reference to its outer scope, and so on, all the way to the global object at the top of the scope chain.</li>\n<li>A closure is created when a function is declared; this closure is used to configure the execution context when the function is invoked.</li>\n<li>A new set of local variables is created every time a function is called.</li>\n</ul>\n<h2>Links</h2>\n<ul>\n<li>Douglas Crockford\'s simulated <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"noreferrer\">private attributes and private methods</a> for an object, using closures.</li>\n<li>A great explanation of how closures can <a href=\"https://www.codeproject.com/Articles/12231/Memory-Leakage-in-Internet-Explorer-revisited\" rel=\"noreferrer\">cause memory leaks in IE</a> if you are not careful.</li>\n</ul>\n',1222006698,7386,111111),('<p>This depends a lot on what you mean by &quot;revert&quot;.</p>\n<h2>Temporarily switch to a different commit</h2>\n<p>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</p>\n<pre class=\"lang-sh prettyprint-override\"><code># This will detach your HEAD, that is, leave you with no branch checked out:\ngit checkout 0d1d7fc32\n</code></pre>\n<p>Or if you want to make commits while you\'re there, go ahead and make a new branch while you\'re at it:</p>\n<pre><code>git checkout -b old-state 0d1d7fc32\n</code></pre>\n<p>To go back to where you were, just check out the branch you were on again. (If you\'ve made changes, as always when switching branches, you\'ll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)</p>\n<h2>Hard delete unpublished commits</h2>\n<p>If, on the other hand, you want to really get rid of everything you\'ve done since then, there are two possibilities. One, if you haven\'t published any of these commits, simply reset:</p>\n<pre class=\"lang-sh prettyprint-override\"><code># This will destroy any local modifications.\n# Don\'t do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there\'s work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you\'ve modified things which were\n# changed since the commit you reset to.\n</code></pre>\n<p>If you mess up, you\'ve already thrown away your local changes, but you can at least get back to where you were before by resetting again.</p>\n<h2>Undo published commits with new commits</h2>\n<p>On the other hand, if you\'ve published the work, you probably don\'t want to reset the branch, since that\'s effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don\'t rewrite any history.</p>\n<pre class=\"lang-sh prettyprint-override\"><code># This will create three separate revert commits:\ngit revert a867b4af 25eee4ca 0766c053\n\n# It also takes ranges. This will revert the last two commits:\ngit revert HEAD~2..HEAD\n\n#Similarly, you can revert a range of commits using commit hashes (non inclusive of first hash):\ngit revert 0d1d7fc..a867b4a\n\n# Reverting a merge commit\ngit revert -m 1 &lt;merge_commit_sha&gt;\n\n# To get just one, you could use `rebase -i` to squash them afterwards\n# Or, you could do it manually (be sure to do this at top level of the repo)\n# get your index and work tree into the desired state, without changing HEAD:\ngit checkout 0d1d7fc32 .\n\n# Then commit. Be sure and write a good message describing what you just did\ngit commit\n</code></pre>\n<p>The <a href=\"http://schacon.github.com/git/git-revert.html\" rel=\"noreferrer\"><code>git-revert</code> manpage</a> actually covers a lot of this in its description. Another useful link is <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_undoing_merges\" rel=\"noreferrer\">this git-scm.com section discussing git-revert</a>.</p>\n<p>If you decide you didn\'t want to revert after all, you can revert the revert (as described here) or reset back to before the revert (see the previous section).</p>\n<p>You may also find this answer helpful in this case:<br />\n<a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-forward-checkout-revet-reflog-reset/34519716#34519716\">How can I move HEAD back to a previous location? (Detached head) &amp; Undo commits</a></p>\n',1289063094,9793,4114122),('<p>This article about Javascript Strict Mode might interest you: <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\" rel=\"noreferrer\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a></p>\n\n<p>To quote some interesting parts:</p>\n\n<blockquote>\n  <p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>\n</blockquote>\n\n<p>And:</p>\n\n<blockquote>\n  <p>Strict mode helps out in a couple ways:</p>\n  \n  <ul>\n  <li>It catches some common coding bloopers, throwing exceptions.</li>\n  <li>It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).</li>\n  <li>It disables features that are confusing or poorly thought out.</li>\n  </ul>\n</blockquote>\n\n<p>Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function <em>(still quoting from John Resig\'s article)</em>:</p>\n\n<blockquote>\n<pre><code>// Non-strict code...\n\n(function(){\n  \"use strict\";\n\n  // Define your library strictly...\n})();\n\n// Non-strict code... \n</code></pre>\n</blockquote>\n\n<p>Which might be helpful if you have to mix old and new code ;-)</p>\n\n<p>So, I suppose it\'s a bit like the <code>\"use strict\"</code> you can use in Perl <em>(hence the name?)</em>: it helps you make fewer errors, by detecting more things that could lead to breakages.</p>\n\n<p>Strict mode is now <a href=\"http://caniuse.com/#use-strict\" rel=\"noreferrer\">supported by all major browsers</a>. </p>\n\n<p>Inside <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">native ECMAScript modules</a> (with <code>import</code> and <code>export</code> statements) and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" rel=\"noreferrer\">ES6 classes</a>, strict mode is always enabled and cannot be disabled.</p>\n',1251303339,4953,1335881),('<p>It\'s a holdover from the Netscape days:</p>\n\n<blockquote>\n  <p>Missing digits are treated as 0[...]. An incorrect digit is simply interpreted as 0. For example the values #F0F0F0, F0F0F0, F0F0F, #FxFxFx and FxFxFx are all the same.</p>\n</blockquote>\n\n<p>It is from the blog post <em><a href=\"http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html\">A little rant about Microsoft Internet Explorer\'s color parsing</a></em> which covers it in great detail, including varying lengths of color values, etc.</p>\n\n<p>If we apply the rules in turn from the blog post, we get the following:</p>\n\n<ol>\n<li><p>Replace all nonvalid hexadecimal characters with 0\'s</p>\n\n<pre><code>chucknorris becomes c00c0000000\n</code></pre></li>\n<li><p>Pad out to the next total number of characters divisible by 3 (11 -> 12)</p>\n\n<pre><code>c00c 0000 0000\n</code></pre></li>\n<li><p>Split into three equal groups, with each component representing the corresponding colour component of an RGB colour:</p>\n\n<pre><code>RGB (c00c, 0000, 0000)\n</code></pre></li>\n<li><p>Truncate each of the arguments from the right down to two characters</p></li>\n</ol>\n\n<p>Which gives the following result:</p>\n\n<pre><code>RGB (c0, 00, 00) = #C00000 or RGB(192, 0, 0)\n</code></pre>\n\n<p>Here\'s an example demonstrating the <code>bgcolor</code> attribute in action, to produce this \"amazing\" colour swatch:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;td bgcolor=\"chucknorris\" cellpadding=\"8\" width=\"100\" align=\"center\"&gt;chuck norris&lt;/td&gt;\r\n    &lt;td bgcolor=\"mrt\"         cellpadding=\"8\" width=\"100\" align=\"center\" style=\"color:#ffffff\"&gt;Mr T&lt;/td&gt;\r\n    &lt;td bgcolor=\"ninjaturtle\" cellpadding=\"8\" width=\"100\" align=\"center\" style=\"color:#ffffff\"&gt;ninjaturtle&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td bgcolor=\"sick\"  cellpadding=\"8\" width=\"100\" align=\"center\"&gt;sick&lt;/td&gt;\r\n    &lt;td bgcolor=\"crap\"  cellpadding=\"8\" width=\"100\" align=\"center\"&gt;crap&lt;/td&gt;\r\n    &lt;td bgcolor=\"grass\" cellpadding=\"8\" width=\"100\" align=\"center\"&gt;grass&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This also answers the other part of the question; why does <code>bgcolor=\"chucknorr\"</code> produce a yellow colour? Well, if we apply the rules, the string is:</p>\n\n<pre><code>c00c00000 =&gt; c00 c00 000 =&gt; c0 c0 00 [RGB(192, 192, 0)]\n</code></pre>\n\n<p>Which gives a light yellow gold colour. As the string starts off as 9 characters, we keep the second C this time around hence it ends up in the final colour value.</p>\n\n<p>I originally encountered this when someone pointed out you could do <code>color=\"crap\"</code> and, well, it comes out brown.</p>\n',1322690018,6903,8333464),('<p>ECMAScript&nbsp;6  introduced <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" rel=\"noreferrer\"><code>String.prototype.includes</code></a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const string = \"foo\";\r\nconst substring = \"oo\";\r\n\r\nconsole.log(string.includes(substring));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>includes</code> <a href=\"https://caniuse.com/#feat=es6-string-includes\" rel=\"noreferrer\">doesn’t have Internet&nbsp;Explorer support</a>, though. In ECMAScript&nbsp;5 or older environments, use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" rel=\"noreferrer\"><code>String.prototype.indexOf</code></a>, which returns -1 when a substring cannot be found:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var string = \"foo\";\r\nvar substring = \"oo\";\r\n\r\nconsole.log(string.indexOf(substring) !== -1);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1259067936,13837,1789952),('<h2>⚠ Important: If you have any local changes, they will be lost. With or without <code>--hard</code> option, any local commits that haven\'t been pushed will be lost.<sup>[*]</sup></h2>\n\n<p>If you have any files that are <em>not</em> tracked by Git (e.g. uploaded user content), these files will not be affected.</p>\n\n<hr>\n\n<p>I think this is the right way:</p>\n\n<pre><code>git fetch --all\n</code></pre>\n\n<p>Then, you have two options:</p>\n\n<pre><code>git reset --hard origin/master\n</code></pre>\n\n<p>OR If you are on some other branch:</p>\n\n<pre><code>git reset --hard origin/&lt;branch_name&gt;\n</code></pre>\n\n<h3>Explanation:</h3>\n\n<p><code>git fetch</code> downloads the latest from remote without trying to merge or rebase anything.</p>\n\n<p>Then the <code>git reset</code> resets the master branch to what you just fetched. The <code>--hard</code> option changes all the files in your working tree to match the files in <code>origin/master</code></p>\n\n<hr>\n\n<h3>Maintain current local commits</h3>\n\n<p><sup>[*]</sup>: It\'s worth noting that it is possible to maintain current local commits by creating a branch from <code>master</code> before resetting:</p>\n\n<pre><code>git checkout master\ngit branch new-branch-to-save-current-commits\ngit fetch --all\ngit reset --hard origin/master\n</code></pre>\n\n<p>After this, all of the old commits will be kept in <code>new-branch-to-save-current-commits</code>. </p>\n\n<h3>Uncommitted changes</h3>\n\n<p>Uncommitted changes, however (even staged), will be lost. Make sure to stash and commit anything you need. For that you can run the following:</p>\n\n<pre><code>git stash\n</code></pre>\n\n<p>And then to reapply these uncommitted changes:</p>\n\n<pre><code>git stash pop\n</code></pre>\n',1326758578,10158,8888015),('<p>The difference is that <code>functionOne</code> is a function expression and so only defined when that line is reached, whereas <code>functionTwo</code> is a function declaration and is defined as soon as its surrounding function or script is executed (due to <a href=\"http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html\" rel=\"noreferrer\">hoisting</a>).  </p>\n\n<p>For example, a function expression:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// TypeError: functionOne is not a function\r\nfunctionOne();\r\n\r\nvar functionOne = function() {\r\n  console.log(\"Hello!\");\r\n};</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And, a function declaration:   </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Outputs: \"Hello!\"\r\nfunctionTwo();\r\n\r\nfunction functionTwo() {\r\n  console.log(\"Hello!\");\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Historically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>\'use strict\';    \r\n{ // note this block!\r\n  function functionThree() {\r\n    console.log(\"Hello!\");\r\n  }\r\n}\r\nfunctionThree(); // ReferenceError</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1228304262,5063,336868),('<blockquote>\n  <h2><a href=\"https://git-scm.com/docs/git-clean\" rel=\"noreferrer\">git-clean</a> - Remove untracked files from the working tree</h2>\n  \n  <h3>Synopsis</h3>\n\n<pre><code>git clean [-d] [-f] [-i] [-n] [-q] [-e &lt;pattern&gt;] [-x | -X] [--] &lt;path&gt;…​\n</code></pre>\n  \n  <h3>Description</h3>\n  \n  <p>Cleans the working tree by recursively removing files that are not under version control, <strong>starting from the current directory</strong>.</p>\n  \n  <p>Normally, only files unknown to Git are removed, but if the <code>-x</code> option is specified, ignored files are also removed. This can, for example, be useful to remove all build products.</p>\n  \n  <p>If any optional <code>&lt;path&gt;...</code> arguments are given, only those paths are affected.</p>\n</blockquote>\n\n<hr>\n\n<p>Step 1 is to show what will be deleted by using the <code>-n</code> option:</p>\n\n<pre><code># Print out the list of files which will be removed (dry run)\ngit clean -n\n</code></pre>\n\n<p>Clean Step - <strong>beware: this will delete files</strong>:</p>\n\n<pre><code># Delete the files from the repository\ngit clean -f\n</code></pre>\n\n<ul>\n<li>To remove directories, run <code>git clean -f -d</code> or <code>git clean -fd</code></li>\n<li>To remove ignored files, run <code>git clean -f -X</code> or <code>git clean -fX</code></li>\n<li>To remove ignored and non-ignored files, run <code>git clean -f -x</code> or <code>git clean -fx</code></li>\n</ul>\n\n<p><strong>Note</strong> the case difference on the <code>X</code> for the two latter commands.</p>\n\n<p>If <code>clean.requireForce</code> is set to \"true\" (the default) in your configuration, one needs to specify <code>-f</code> otherwise nothing will actually happen.</p>\n\n<p>Again see the <a href=\"http://git-scm.com/docs/git-clean\" rel=\"noreferrer\"><code>git-clean</code></a> docs for more information.</p>\n\n<hr>\n\n<blockquote>\n  <h3>Options</h3>\n  \n  <p><strong><code>-f</code>, <code>--force</code></strong>  </p>\n  \n  <p>If the Git configuration variable clean.requireForce is not set to\n  false, git clean will refuse to run unless given <code>-f</code>, <code>-n</code> or <code>-i</code>.</p>\n  \n  <p><strong><code>-x</code></strong></p>\n  \n  <p>Don’t use the standard ignore rules read from .gitignore (per\n  directory) and <code>$GIT_DIR/info/exclude</code>, but do still use the ignore\n  rules given with <code>-e</code> options. This allows removing all untracked files,\n  including build products. This can be used (possibly in conjunction\n  with git reset) to create a pristine working directory to test a clean\n  build.</p>\n  \n  <p><strong><code>-X</code></strong></p>\n  \n  <p>Remove only files ignored by Git. This may be useful to rebuild\n  everything from scratch, but keep manually created files.</p>\n  \n  <p><strong><code>-n</code>, <code>--dry-run</code></strong></p>\n  \n  <p>Don’t actually remove anything, just show what would be done.</p>\n  \n  <p><strong><code>-d</code></strong></p>\n  \n  <p>Remove untracked directories in addition to untracked files. If an\n  untracked directory is managed by a different Git repository, it is\n  not removed by default. Use <code>-f</code> option twice if you really want to\n  remove such a directory.</p>\n</blockquote>\n',1221499975,8763,64966),('<p>It\'s a time zone change on December 31st in Shanghai.</p>\n\n<p>See <a href=\"http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927\" rel=\"noreferrer\">this page</a> for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So \"1927-12-31 23:54:08\" actually happened twice, and it looks like Java is parsing it as the <em>later</em> possible instant for that local date/time - hence the difference.</p>\n\n<p>Just another episode in the often weird and wonderful world of time zones.</p>\n\n<p><strong>EDIT:</strong> Stop press! History changes...</p>\n\n<p>The original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of <a href=\"https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\" rel=\"noreferrer\">TZDB</a>. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</p>\n\n<p>I only noticed this because I\'m collecting questions like this in Noda Time, in the form of <a href=\"https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\" rel=\"noreferrer\">unit tests</a>... The test has now been changed, but it just goes to show - not even historical data is safe.</p>\n\n<p><strong>EDIT:</strong> History has changed again...</p>\n\n<p>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it\'s now a mere 343 second change (so the time between <code>t</code> and <code>t+1</code> is 344 seconds, if you see what I mean).</p>\n\n<p><strong>EDIT:</strong> To answer a question around a transition at 1900... it looks like the Java timezone implementation treats <em>all</em> time zones as simply being in their standard time for any instant before the start of 1900 UTC:</p>\n\n<pre><code>import java.util.TimeZone;\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        long startOf1900Utc = -2208988800000L;\n        for (String id : TimeZone.getAvailableIDs()) {\n            TimeZone zone = TimeZone.getTimeZone(id);\n            if (zone.getRawOffset() != zone.getOffset(startOf1900Utc - 1)) {\n                System.out.println(id);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn\'t rely on any idea of a \"fixed\" standard time (which is what <code>getRawOffset</code> assumes to be a valid concept) so other libraries needn\'t introduce this artificial transition.</p>\n',1311755470,10904,6841479),('<h2>Update</h2>\n\n<p><a href=\"https://stackoverflow.com/a/1787014/456814\">Jakub\'s answer</a> actually improves on this. With Git versions &ge; 1.6.6, with only one remote, you can just do:</p>\n\n<pre><code>git fetch\ngit checkout test\n</code></pre>\n\n<p>As user masukomi points out in a comment, <code>git checkout test</code> will NOT work in modern git if you have multiple remotes. In this case use</p>\n\n<pre><code>git checkout -b test &lt;name of remote&gt;/test\n</code></pre>\n\n<p>or the shorthand</p>\n\n<pre><code>git checkout -t &lt;name of remote&gt;/test\n</code></pre>\n\n<h2>Old Answer</h2>\n\n<p>Before you can start working locally on a remote branch, you need to fetch it as called out in answers below. </p>\n\n<p>To fetch a branch, you simply need to:</p>\n\n<pre><code>git fetch origin\n</code></pre>\n\n<p>This will fetch all of the remote branches for you. You can see the branches available for checkout with:</p>\n\n<pre><code>git branch -v -a\n</code></pre>\n\n<p>With the remote branches in hand, you now  need to check out the branch you are interested in, giving you a local working copy:</p>\n\n<pre><code>git checkout -b test origin/test\n</code></pre>\n',1258986368,9212,1783426),('<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/string\" rel=\"noreferrer\"><code>string</code></a> is an alias in C# for <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" rel=\"noreferrer\"><code>System.String</code></a>.<br>\nSo technically, there is no difference.  It\'s like <a href=\"https://stackoverflow.com/questions/62503/c-int-or-int32-should-i-care\"><code>int</code> <em>vs.</em> <code>System.Int32</code></a>.</p>\n\n<p>As far as guidelines, it\'s generally recommended to use <code>string</code> any time you\'re referring to an object.</p>\n\n<p>e.g. </p>\n\n<pre><code>string place = \"world\";\n</code></pre>\n\n<p>Likewise, I think it\'s generally recommended to use <code>String</code> if you need to refer specifically to the class.</p>\n\n<p>e.g.</p>\n\n<pre><code>string greet = String.Format(\"Hello {0}!\", place);\n</code></pre>\n\n<h2>This is the style that Microsoft tends to use in <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.format#examples\" rel=\"noreferrer\">their examples</a>.</h2>\n\n<p>It appears that the guidance in this area may have changed, as <a href=\"https://github.com/StyleCop\" rel=\"noreferrer\">StyleCop</a> now enforces the use of the C# specific aliases.</p>\n',1218352922,6131,7077),('<p>Like this:</p>\n\n<pre><code>delete myObject.regex;\n// or,\ndelete myObject[\'regex\'];\n// or,\nvar prop = \"regex\";\ndelete myObject[prop];\n</code></pre>\n\n<p>Demo\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myObject = {\r\n    \"ircEvent\": \"PRIVMSG\",\r\n    \"method\": \"newURI\",\r\n    \"regex\": \"^http://.*\"\r\n};\r\ndelete myObject.regex;\r\n\r\nconsole.log(myObject);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For anyone interested in reading more about it, Stack Overflow user <a href=\"https://stackoverflow.com/users/130652/kangax\">kangax</a> has written an incredibly in-depth blog post about the <code>delete</code> statement on their blog, <em><a href=\"http://perfectionkills.com/understanding-delete/\" rel=\"noreferrer\">Understanding delete</a></em>. It is highly recommended.</p>\n',1224154733,8332,208106),('<p>Whenever the Python interpreter reads a source file, it does two things:</p>\n<ul>\n<li><p>it sets a few special variables like <code>__name__</code>, and then</p>\n</li>\n<li><p>it executes all of the code found in the file.</p>\n</li>\n</ul>\n<p>Let\'s see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>\n<h1>Code Sample</h1>\n<p>Let\'s use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>\n<pre><code># Suppose this is foo.py.\n\nprint(&quot;before import&quot;)\nimport math\n\nprint(&quot;before functionA&quot;)\ndef functionA():\n    print(&quot;Function A&quot;)\n\nprint(&quot;before functionB&quot;)\ndef functionB():\n    print(&quot;Function B {}&quot;.format(math.sqrt(100)))\n\nprint(&quot;before __name__ guard&quot;)\nif __name__ == \'__main__\':\n    functionA()\n    functionB()\nprint(&quot;after __name__ guard&quot;)\n</code></pre>\n<h1>Special Variables</h1>\n<p>When the Python interpeter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>\n<p><strong>When Your Module Is the Main Program</strong></p>\n<p>If you are running your module (the source file) as the main program, e.g.</p>\n<pre><code>python foo.py\n</code></pre>\n<p>the interpreter will assign the hard-coded string <code>&quot;__main__&quot;</code> to the <code>__name__</code> variable, i.e.</p>\n<pre><code># It\'s as if the interpreter inserts this at the top\n# of your module when run as the main program.\n__name__ = &quot;__main__&quot; \n</code></pre>\n<p><strong>When Your Module Is Imported By Another</strong></p>\n<p>On the other hand, suppose some other module is the main program and it imports your module. This means there\'s a statement like this in the main program, or in some other module the main program imports:</p>\n<pre><code># Suppose this is in some other main program.\nimport foo\n</code></pre>\n<p>The interpreter will search for your <code>foo.py</code> file (along with searching for a few other variants), and prior to executing that module, it will assign the name <code>&quot;foo&quot;</code> from the import statement to the <code>__name__</code> variable, i.e.</p>\n<pre><code># It\'s as if the interpreter inserts this at the top\n# of your module when it\'s imported from another module.\n__name__ = &quot;foo&quot;\n</code></pre>\n<h1>Executing the Module\'s Code</h1>\n<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>\n<p><strong>Always</strong></p>\n<ol>\n<li><p>It prints the string <code>&quot;before import&quot;</code> (without quotes).</p>\n</li>\n<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p>\n</li>\n</ol>\n<pre><code># Find and load a module given its string name, &quot;math&quot;,\n# then assign it to a local variable called math.\nmath = __import__(&quot;math&quot;)\n</code></pre>\n<ol start=\"3\">\n<li><p>It prints the string <code>&quot;before functionA&quot;</code>.</p>\n</li>\n<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>functionA</code>.</p>\n</li>\n<li><p>It prints the string <code>&quot;before functionB&quot;</code>.</p>\n</li>\n<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>functionB</code>.</p>\n</li>\n<li><p>It prints the string <code>&quot;before __name__ guard&quot;</code>.</p>\n</li>\n</ol>\n<p><strong>Only When Your Module Is the Main Program</strong></p>\n<ol start=\"8\">\n<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>&quot;__main__&quot;</code> and it calls the two functions, printing the strings <code>&quot;Function A&quot;</code> and <code>&quot;Function B 10.0&quot;</code>.</li>\n</ol>\n<p><strong>Only When Your Module Is Imported by Another</strong></p>\n<ol start=\"8\">\n<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>&quot;foo&quot;</code>, not <code>&quot;__main__&quot;</code>, and it\'ll skip the body of the <code>if</code> statement.</li>\n</ol>\n<p><strong>Always</strong></p>\n<ol start=\"9\">\n<li>It will print the string <code>&quot;after __name__ guard&quot;</code> in both situations.</li>\n</ol>\n<p><em><strong>Summary</strong></em></p>\n<p>In summary, here\'s what\'d be printed in the two cases:</p>\n<pre class=\"lang-none prettyprint-override\"><code># What gets printed if foo is the main program\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nFunction A\nFunction B 10.0\nafter __name__ guard\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code># What gets printed if foo is imported as a regular module\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nafter __name__ guard\n</code></pre>\n<h1>Why Does It Work This Way?</h1>\n<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>\n<ul>\n<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p>\n</li>\n<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don\'t want it to try running the script just because it\'s importing the module.</p>\n</li>\n<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p>\n</li>\n</ul>\n<p>Beyond those examples, it\'s elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script\'s module.</p>\n<h1>Food for Thought</h1>\n<ul>\n<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it\'s strange to do so, but the language won\'t stop you.</p>\n</li>\n<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p>\n</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is foo2.py.\nimport os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters\n\ndef functionA():\n    print(&quot;a1&quot;)\n    from foo2 import functionB\n    print(&quot;a2&quot;)\n    functionB()\n    print(&quot;a3&quot;)\n\ndef functionB():\n    print(&quot;b&quot;)\n\nprint(&quot;t1&quot;)\nif __name__ == &quot;__main__&quot;:\n    print(&quot;m1&quot;)\n    functionA()\n    print(&quot;m2&quot;)\nprint(&quot;t2&quot;)\n      \n</code></pre>\n<ul>\n<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is foo3.py.\nimport os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters\n\ndef functionA():\n    print(&quot;a1&quot;)\n    from foo3 import functionB\n    print(&quot;a2&quot;)\n    functionB()\n    print(&quot;a3&quot;)\n\ndef functionB():\n    print(&quot;b&quot;)\n\nprint(&quot;t1&quot;)\nprint(&quot;m1&quot;)\nfunctionA()\nprint(&quot;m2&quot;)\nprint(&quot;t2&quot;)\n</code></pre>\n<ul>\n<li>What will this do when used as a script?  When imported as a module?</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is in foo4.py\n__name__ = &quot;__main__&quot;\n\ndef bar():\n    print(&quot;bar&quot;)\n    \nprint(&quot;before __name__ guard&quot;)\nif __name__ == &quot;__main__&quot;:\n    bar()\nprint(&quot;after __name__ guard&quot;)\n</code></pre>\n',1231302403,6706,419185),('<p>Yes, it was <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" rel=\"noreferrer\" title=\"[Python-Dev] Conditional Expression Resolution\">added</a> in version 2.5. The expression syntax is:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>a if condition else b\n</code></pre>\n\n<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\" rel=\"noreferrer\" title=\"Boolean data type\">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>\n\n<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; \'true\' if True else \'false\'\n\'true\'\n&gt;&gt;&gt; \'true\' if False else \'false\'\n\'false\'\n</code></pre>\n\n<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can\'t use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; pass if False else x = 3\n  File \"&lt;stdin&gt;\", line 1\n    pass if False else x = 3\n          ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>You can, however, use conditional expressions to assign a variable like so:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>x = a if True else b\n</code></pre>\n\n<p>Think of the conditional expression as switching between two values. It is very useful when you\'re in a \'one value or another\' situation, it but doesn\'t do much else.</p>\n\n<p>If you need to use statements, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>\n\n<hr>\n\n<p>Keep in mind that it\'s frowned upon by some Pythonistas for several reasons:</p>\n\n<ul>\n<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python\'s \"surprising\" behaviour use it (they may reverse the argument order).</li>\n<li>Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\n<li>Stylistic reasons. (Although the \'inline <code>if</code>\' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>\n</ul>\n\n<p>If you\'re having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n\n<p>Official documentation:     </p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\" title=\"Conditional expressions\">Conditional expressions</a></li>\n<li><a href=\"https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\" title=\"Is there an equivalent of C’s ”?:” ternary operator?\">Is there an equivalent of C’s ”?:” ternary operator?</a></li>\n</ul>\n',1230367459,7092,394814),('<p>From the <a href=\"http://developer.android.com/guide/topics/resources/more-resources.html#Dimension\" rel=\"noreferrer\">Android Developer Documentation</a>:</p>\n\n<ol>\n<li><blockquote>\n  <p><strong>px</strong><br>\n  <strong>Pixels</strong> - corresponds to actual pixels on the screen.</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>in</strong><br>\n  <strong>Inches</strong> - based on the physical size of the screen.<br>\n  1 Inch = 2.54 centimeters</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>mm</strong><br>\n  <strong>Millimeters</strong> - based on the physical size of the screen.</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>pt</strong><br>\n  <strong>Points</strong> - 1/72 of an inch based on the physical size of the screen.</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>dp</strong> or <strong>dip</strong><br>\n  <strong>Density</strong>-independent Pixels - an abstract unit that is based on the physical density of the screen. These units are relative to a 160\n      dpi screen, so one dp is one pixel on a 160 dpi screen. The ratio of\n      dp-to-pixel will change with the screen density, but not necessarily\n      in direct proportion. Note: The compiler accepts both \"dip\" and\n      \"dp\", though \"dp\" is more consistent with \"sp\".</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>sp</strong><br>\n  <strong>Scale</strong>-independent Pixels - this is like the dp unit, but it is also scaled by the user\'s font size preference. It is recommended you\n      use this unit when specifying font sizes, so they will be adjusted\n      for both the screen density and user\'s preference.</p>\n</blockquote></li>\n</ol>\n\n<p>From <a href=\"https://blog.mindorks.com/understanding-density-independent-pixel-sp-dp-dip-in-android\" rel=\"noreferrer\">Understanding Density Independence In Android</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+----------------+----------------+---------------+-------------------------------+\n| Density Bucket | Screen Density | Physical Size | Pixel Size                    | \n+----------------+----------------+---------------+-------------------------------+\n| ldpi           | 120 dpi        | 0.5 x 0.5 in  | 0.5 in * 120 dpi = 60x60 px   | \n+----------------+----------------+---------------+-------------------------------+\n| mdpi           | 160 dpi        | 0.5 x 0.5 in  | 0.5 in * 160 dpi = 80x80 px   | \n+----------------+----------------+---------------+-------------------------------+\n| hdpi           | 240 dpi        | 0.5 x 0.5 in  | 0.5 in * 240 dpi = 120x120 px | \n+----------------+----------------+---------------+-------------------------------+\n| xhdpi          | 320 dpi        | 0.5 x 0.5 in  | 0.5 in * 320 dpi = 160x160 px | \n+----------------+----------------+---------------+-------------------------------+\n| xxhdpi         | 480 dpi        | 0.5 x 0.5 in  | 0.5 in * 480 dpi = 240x240 px | \n+----------------+----------------+---------------+-------------------------------+\n| xxxhdpi        | 640 dpi        | 0.5 x 0.5 in  | 0.5 in * 640 dpi = 320x320 px | \n+----------------+----------------+---------------+-------------------------------+\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>+---------+-------------+---------------+-------------+--------------------+\n| Unit    | Description | Units Per     | Density     | Same Physical Size | \n|         |             | Physical Inch | Independent | On Every Screen    | \n+---------+-------------+---------------+-------------+--------------------+\n| px      | Pixels      | Varies        | No          | No                 | \n+---------+-------------+---------------+-------------+--------------------+\n| in      | Inches      | 1             | Yes         | Yes                | \n+---------+-------------+---------------+-------------+--------------------+\n| mm      | Millimeters | 25.4          | Yes         | Yes                | \n+---------+-------------+---------------+-------------+--------------------+\n| pt      | Points      | 72            | Yes         | Yes                | \n+---------+-------------+---------------+-------------+--------------------+\n| dp      | Density     | ~160          | Yes         | No                 | \n|         | Independent |               |             |                    | \n|         | Pixels      |               |             |                    | \n+---------+-------------+---------------+-------------+--------------------+\n| sp      | Scale       | ~160          | Yes         | No                 | \n|         | Independent |               |             |                    | \n|         | Pixels      |               |             |                    | \n+---------+-------------+---------------+-------------+--------------------+\n</code></pre>\n\n<p>More info can be also be found in the <a href=\"https://www.google.com/design/spec/layout/units-measurements.html#\" rel=\"noreferrer\">Google Design Documentation</a>.</p>\n',1262925713,5784,2025541),('<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\n\n<p>While in Python you can use arbitrary callables for metaclasses (like <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037\">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won\'t be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>\n\n<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the \'class\' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do \'extra things\' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>\n\n<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\n\n<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal \'magic\' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\n\n<p>Here\'s an aggregated example of the bits and pieces:</p>\n\n<pre><code>def make_hook(f):\n    \"\"\"Decorator to turn \'foo\' method into \'__foo__\'\"\"\"\n    f.is_hook = 1\n    return f\n\nclass MyType(type):\n    def __new__(mcls, name, bases, attrs):\n\n        if name.startswith(\'None\'):\n            return None\n\n        # Go over attributes and see if they should be renamed.\n        newattrs = {}\n        for attrname, attrvalue in attrs.iteritems():\n            if getattr(attrvalue, \'is_hook\', 0):\n                newattrs[\'__%s__\' % attrname] = attrvalue\n            else:\n                newattrs[attrname] = attrvalue\n\n        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)\n\n    def __init__(self, name, bases, attrs):\n        super(MyType, self).__init__(name, bases, attrs)\n\n        # classregistry.register(self, self.interfaces)\n        print \"Would register class %s now.\" % self\n\n    def __add__(self, other):\n        class AutoClass(self, other):\n            pass\n        return AutoClass\n        # Alternatively, to autogenerate the classname as well as the class:\n        # return type(self.__name__ + other.__name__, (self, other), {})\n\n    def unregister(self):\n        # classregistry.unregister(self)\n        print \"Would unregister class %s now.\" % self\n\nclass MyObject:\n    __metaclass__ = MyType\n\n\nclass NoneSample(MyObject):\n    pass\n\n# Will print \"NoneType None\"\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n    def __init__(self, value):\n        self.value = value\n    @make_hook\n    def add(self, other):\n        return self.__class__(self.value + other.value)\n\n# Will unregister the class\nExample.unregister()\n\ninst = Example(10)\n# Will fail with an AttributeError\n#inst.unregister()\n\nprint inst + inst\nclass Sibling(MyObject):\n    pass\n\nExampleSibling = Example + Sibling\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n# content of its own) although it will believe it\'s called \'AutoClass\'\nprint ExampleSibling\nprint ExampleSibling.__mro__\n</code></pre>\n',1221807718,2890,100146),('<p>The strict equality operator (<code>===</code>) behaves identically to the abstract equality operator (<code>==</code>) except no type conversion is done, and the types must be the same to be considered equal.</p>\n\n<p>Reference: <a href=\"http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm\" rel=\"noreferrer\">Javascript Tutorial: Comparison Operators</a></p>\n\n<p>The <code>==</code> operator will compare for equality <em>after doing any necessary type conversions</em>.  The <code>===</code> operator will <strong>not</strong> do the conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. Both are equally quick.</p>\n\n<p>To quote Douglas Crockford\'s excellent <a href=\"https://rads.stackoverflow.com/amzn/click/com/0596517742\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">JavaScript: The Good Parts</a>,</p>\n\n<blockquote>\n  <p>JavaScript has two sets of equality operators: <code>===</code> and <code>!==</code>, and their evil twins <code>==</code> and <code>!=</code>.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then <code>===</code> produces <code>true</code> and <code>!==</code> produces <code>false</code>.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:</p>\n\n<pre><code>\'\' == \'0\'           // false\n0 == \'\'             // true\n0 == \'0\'            // true\n\nfalse == \'false\'    // false\nfalse == \'0\'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n\' \\t\\r\\n \' == 0     // true\n</code></pre>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/yISob.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/yISob.png\" alt=\"Equality Comparison Table \"></a></p>\n\n<blockquote>\n  <p>The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use <code>===</code> and <code>!==</code>.  All of the comparisons just shown produce <code>false</code> with the <code>===</code> operator.</p>\n</blockquote>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>A good point was brought up by <a href=\"https://stackoverflow.com/users/165495/casebash\">@Casebash</a> in the comments and in <a href=\"https://stackoverflow.com/users/113570/philippe-leybaert\">@Phillipe Laybaert\'s</a> <a href=\"https://stackoverflow.com/a/957602/1288\">answer</a> concerning objects.  For objects, <code>==</code> and <code>===</code> act consistently with one another (except in a special case).</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\n\nvar c = { x: 1, y: 2 };\nvar d = { x: 1, y: 2 };\n\nvar e = \"text\";\nvar f = \"te\" + \"xt\";\n\na == b            // false\na === b           // false\n\nc == d            // false\nc === d           // false\n\ne == f            // true\ne === f           // true\n</code></pre>\n\n<p>The special case is when you compare a primitive with an object that evaluates to the same primitive, due to its <code>toString</code> or <code>valueOf</code> method. For example, consider the comparison of a string primitive with a string object created using the <code>String</code> constructor.</p>\n\n<pre><code>\"abc\" == new String(\"abc\")    // true\n\"abc\" === new String(\"abc\")   // false\n</code></pre>\n\n<p>Here the <code>==</code> operator is checking the values of the two objects and returning <code>true</code>, but the <code>===</code> is seeing that they\'re not the same type and returning <code>false</code>.  Which one is correct?  That really depends on what you\'re trying to compare.  My advice is to bypass the question entirely and just don\'t use the <code>String</code> constructor to create string objects from string literals.</p>\n\n<p><strong>Reference</strong><br>\n<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a></p>\n',1229005506,6507,359509),('<blockquote>\n  <p><em>&rarr; For a more general explanation of async behaviour with different examples, please see</em> <a href=\"https://stackoverflow.com/q/23667086/218196\">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a>  </p>\n  \n  <p><em>&rarr; If you already understand the problem, skip to the possible solutions below.</em></p>\n</blockquote>\n\n<h1>The problem</h1>\n\n<p>The <strong>A</strong> in <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\" rel=\"noreferrer\">Ajax</a> stands for <a href=\"https://www.merriam-webster.com/dictionary/asynchronous\" rel=\"noreferrer\"><strong>asynchronous</strong></a> . That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer: </p>\n\n<h2>Synchronous</h2>\n\n<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.</p>\n\n<p>The same is happening when you make a function call containing \"normal\" code:</p>\n\n<pre><code>function findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n\n// Do something with item\ndoSomethingElse();\n</code></pre>\n\n<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>\n\n<h2>Asynchronous</h2>\n\n<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>\n\n<p>That\'s exactly what\'s happening when you do an Ajax request. </p>\n\n<pre><code>findItem(function(item) {\n    // Do something with item\n});\ndoSomethingElse();\n</code></pre>\n\n<p>Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>\n\n<hr>\n\n<h1>Solution(s)</h1>\n\n<p><strong>Embrace the asynchronous nature of JavaScript!</strong> While certain asynchronous operations provide synchronous counterparts (so does \"Ajax\"), it\'s generally discouraged to use them, especially in a browser context.</p>\n\n<p>Why is it bad do you ask?</p>\n\n<p>JavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not. </p>\n\n<p>All of this is really bad user experience. The user won\'t be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.</p>\n\n<p>In the following we will look at three different solutions that are all building on top of each other:</p>\n\n<ul>\n<li><strong>Promises with <code>async/await</code></strong> (ES2017+, available in older browsers if you use a transpiler or regenerator)</li>\n<li><strong>Callbacks</strong> (popular in node)</li>\n<li><strong>Promises with <code>then()</code></strong> (ES2015+, available in older browsers if you use one of the many promise libraries)</li>\n</ul>\n\n<p><strong>All three are available in current browsers, and node 7+.</strong> </p>\n\n<hr>\n\n<h2>ES2017+: Promises with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async/await</code></a></h2>\n\n<p>The ECMAScript version released in 2017 introduced <em>syntax-level support</em> for asynchronous functions. With the help of <code>async</code> and <code>await</code>, you can write asynchronous in a \"synchronous style\". The code is still asynchronous, but it\'s easier to read/understand.</p>\n\n<p><code>async/await</code> builds on top of promises: an <code>async</code> function always returns a promise. <code>await</code> \"unwraps\" a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.</p>\n\n<p><strong>Important:</strong> You can only use <code>await</code> inside an <code>async</code> function. Right now, top-level <code>await</code> isn\'t yet supported, so you might have to make an async IIFE (<a href=\"https://en.wikipedia.org/wiki/Immediately_invoked_function_expression\" rel=\"noreferrer\">Immediately Invoked Function Expression</a>) to start an <code>async</code> context.</p>\n\n<p>You can read more about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" rel=\"noreferrer\"><code>await</code></a> on MDN.</p>\n\n<p>Here is an example that builds on top of delay above:</p>\n\n<pre><code>// Using \'superagent\' which will return a promise.\nvar superagent = require(\'superagent\')\n\n// This is isn\'t declared as `async` because it already returns a promise\nfunction delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\n\nasync function getAllBooks() {\n  try {\n    // GET a list of book IDs of the current user\n    var bookIDs = await superagent.get(\'/user/books\');\n    // wait for 3 seconds (just for the sake of this example)\n    await delay();\n    // GET information about each book\n    return await superagent.get(\'/books/ids=\'+JSON.stringify(bookIDs));\n  } catch(error) {\n    // If any of the awaited promises was rejected, this catch block\n    // would catch the rejection reason\n    return null;\n  }\n}\n\n// Start an IIFE to use `await` at the top level\n(async function(){\n  let books = await getAllBooks();\n  console.log(books);\n})();\n</code></pre>\n\n<p>Current <a href=\"https://kangax.github.io/compat-table/es2016plus/#test-async_functions\" rel=\"noreferrer\">browser</a> and <a href=\"http://node.green/#ES2017-features-async-functions\" rel=\"noreferrer\">node</a> versions support <code>async/await</code>. You can also support older environments by transforming your code to ES5 with the help of <a href=\"https://github.com/facebook/regenerator\" rel=\"noreferrer\">regenerator</a> (or tools that use regenerator, such as <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a>).</p>\n\n<hr>\n\n<h2>Let functions accept <em>callbacks</em></h2>\n\n<p>A callback is simply a function passed to another function. That other function can call the function passed whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.</p>\n\n<p>In the example of the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>\n\n<pre><code>var result = foo();\n// Code that depends on \'result\'\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>foo(function(result) {\n    // Code that depends on \'result\'\n});\n</code></pre>\n\n<p>Here we defined the function \"inline\" but you can pass any function reference:</p>\n\n<pre><code>function myCallback(result) {\n    // Code that depends on \'result\'\n}\n\nfoo(myCallback);\n</code></pre>\n\n<p><code>foo</code> itself is defined as follows:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n</code></pre>\n\n<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we simply pass it on to <code>success</code>. I.e. once the Ajax request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>\n\n<p>You can also process the response before passing it to the callback:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // For example, filter the response\n            callback(filtered_response);\n        }\n    });\n}\n</code></pre>\n\n<p>It\'s easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event driven (DOM events). Receiving the Ajax response is nothing else but an event.<br>\nDifficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.</p>\n\n<hr>\n\n<h2>ES2015+: Promises with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">then()</a></h2>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">Promise API</a> is a new feature of ECMAScript 6 (ES2015), but it has good <a href=\"http://caniuse.com/#feat=promises\" rel=\"noreferrer\" title=\"caniuse\">browser support</a> already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g. <a href=\"https://github.com/petkaantonov/bluebird\" rel=\"noreferrer\">bluebird</a>).</p>\n\n<p>Promises are containers for <em>future</em> values. When the promise receives the value (it is <em>resolved</em>) or when it is canceled (<em>rejected</em>), it notifies all of its \"listeners\" who want to access this value.</p>\n\n<p>The advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.</p>\n\n<p>Here is a simple example of using a promise:</p>\n\n<pre><code>function delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay()\n  .then(function(v) { // `delay` returns a promise\n    console.log(v); // Log the value once it is resolved\n  })\n  .catch(function(v) {\n    // Or do something else if it is rejected \n    // (it would not happen in this example, since `reject` is not called).\n  });\n</code></pre>\n\n<p>Applied to our Ajax call we could use promises like this:</p>\n\n<pre><code>function ajax(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open(\'GET\', url);\n    xhr.send();\n  });\n}\n\najax(\"/echo/json\")\n  .then(function(result) {\n    // Code depending on result\n  })\n  .catch(function() {\n    // An error occurred\n  });\n</code></pre>\n\n<p>Describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>\n\n<p>More information about promises: <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"noreferrer\">HTML5 rocks - JavaScript Promises</a></p>\n\n<h3>Side note: jQuery\'s deferred objects</h3>\n\n<p><a href=\"https://stackoverflow.com/questions/4866721/what-are-deferred-objects\">Deferred objects</a> are jQuery\'s custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.</p>\n\n<p>Every Ajax method of jQuery already returns a \"deferred object\" (actually a promise of a deferred object) which you can just return from your function:</p>\n\n<pre><code>function ajax() {\n    return $.ajax(...);\n}\n\najax().done(function(result) {\n    // Code depending on result\n}).fail(function() {\n    // An error occurred\n});\n</code></pre>\n\n<h3>Side note: Promise gotchas</h3>\n\n<p>Keep in mind that promises and deferred objects are just <em>containers</em> for a future value, they are not the value itself. For example, suppose you had the following:</p>\n\n<pre><code>function checkPassword() {\n    return $.ajax({\n        url: \'/password\',\n        data: {\n            username: $(\'#username\').val(),\n            password: $(\'#password\').val()\n        },\n        type: \'POST\',\n        dataType: \'json\'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they\'re logged in\n}\n</code></pre>\n\n<p>This code misunderstands the above asynchrony issues. Specifically, <code>$.ajax()</code> doesn\'t freeze the code while it checks the \'/password\' page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the <code>if</code> statement is going to always get this Deferred object, treat it as <code>true</code>, and proceed as though the user is logged in. Not good.</p>\n\n<p>But the fix is easy:</p>\n\n<pre><code>checkPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they\'re logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n</code></pre>\n\n<hr>\n\n<h2>Not recommended: Synchronous \"Ajax\" calls</h2>\n\n<p>As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don\'t advocate their use, but for completeness\' sake, here is how you would perform a synchronous call:</p>\n\n<h3>Without jQuery</h3>\n\n<p>If you directly use a <a href=\"http://www.w3.org/TR/XMLHttpRequest/\" rel=\"noreferrer\"><code>XMLHTTPRequest</code></a> object, pass <code>false</code> as third argument to <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-open%28%29-method\" rel=\"noreferrer\"><code>.open</code></a>.</p>\n\n<h3>jQuery</h3>\n\n<p>If you use <a href=\"http://api.jquery.com/jQuery.ajax/\" rel=\"noreferrer\">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.\nYou can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\" rel=\"noreferrer\">jqXHR object</a>:</p>\n\n<pre><code>function foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n</code></pre>\n\n<p>If you use any other jQuery Ajax method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>\n\n<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=\"https://stackoverflow.com/questions/2067472/please-explain-jsonp\">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>\n',1357664774,5726,14220323),('<p><code>.gitignore</code> will prevent untracked files from being added (without an <code>add -f</code>) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</p>\n\n<p>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</p>\n\n<pre><code>git rm --cached &lt;file&gt;\n</code></pre>\n\n<p>If you want to remove a whole folder, you need to remove all files in it recursively.</p>\n\n<pre><code>git rm -r --cached &lt;folder&gt;\n</code></pre>\n\n<p>The removal of the file from the head revision will happen on the next commit.</p>\n\n<p><strong>WARNING: While this will not remove the physical file from your local, it will remove the files from other developers machines on next <code>git pull</code>.</strong></p>\n',1250196059,5762,1274447),('<p><strong>Overall:</strong> </p>\n\n<p>Both PUT and POST can be used for creating. </p>\n\n<p>You have to ask \"what are you performing the action to?\" to distinguish what you should be using. Let\'s assume you\'re designing an API for asking questions.  If you want to use POST then you would do that to a list of questions. If you want to use PUT then you would do that to a particular question.</p>\n\n<p><strong>Great both can be used, so which one should I use in my RESTful design:</strong></p>\n\n<p>You do not need to support both PUT and POST.  </p>\n\n<p>Which is used is left up to you.  But just remember to use the right one depending on what object you are referencing in the request. </p>\n\n<p>Some considerations:</p>\n\n<ul>\n<li>Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT.  If you let the server decide then use POST.</li>\n<li>PUT is idempotent, so if you PUT an object twice, it has no effect.  This is a nice property, so I would use PUT when possible. </li>\n<li>You can update or create a resource with PUT with the same object URL</li>\n<li>With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object. </li>\n</ul>\n\n<p><strong>An example:</strong></p>\n\n<p><a href=\"https://stackoverflow.com/questions/256349/what-are-the-best-common-restful-url-verbs-and-actions/256359#256359\">I wrote the following as part of another answer on SO regarding this</a>:</p>\n\n<blockquote>\n  <p><strong>POST:</strong></p>\n  \n  <p>Used to modify and update a resource</p>\n\n<pre><code>POST /questions/&lt;existing_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>Note that the following is an error:</p>\n\n<pre><code>POST /questions/&lt;new_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>If the URL is not yet created, you\n  should not be using POST to create it\n  while specifying the name.  This should\n  result in a \'resource not found\' error\n  because <code>&lt;new_question&gt;</code> does not exist\n  yet.  You should PUT the <code>&lt;new_question&gt;</code>\n  resource on the server first.</p>\n  \n  <p>You could though do something like\n  this to create a resources using POST:</p>\n\n<pre><code>POST /questions HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>Note that in this case the resource\n  name is not specified, the new objects\n  URL path would be returned to you.</p>\n  \n  <p><strong>PUT:</strong> </p>\n  \n  <p>Used to create a resource, or\n  overwrite it.  While you specify the\n  resources new URL.</p>\n  \n  <p>For a new resource:</p>\n\n<pre><code>PUT /questions/&lt;new_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>To overwrite an existing resource:</p>\n\n<pre><code>PUT /questions/&lt;existing_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n</blockquote>\n\n<p>Additionally, and a bit more concisely, <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.4\" rel=\"noreferrer\">RFC 7231 Section 4.3.4 PUT</a> states (emphasis added),</p>\n\n<blockquote>\n  <p><strong>4.3.4.  PUT</strong></p>\n  \n  <p>The PUT method requests that the state of the target resource be\n    <code>created</code> or <code>replaced</code> with the state defined by the representation\n    enclosed in the request message payload.</p>\n</blockquote>\n',1236695386,4254,630475),('<h2>PART I: How To Log In</h2>\n\n<p>We\'ll assume you already know how to build a login+password HTML form which POSTs the values to a script on the server side for authentication. The sections below will deal with patterns for sound practical auth, and how to avoid the most common security pitfalls.</p>\n\n<p><strong>To HTTPS or not to HTTPS?</strong></p>\n\n<p>Unless the connection is already secure (that is, tunneled through HTTPS using SSL/TLS), your login form values will be sent in cleartext, which allows anyone eavesdropping on the line between browser and web server will be able to read logins as they pass through. This type of wiretapping is done routinely by governments, but in general, we won\'t address \'owned\' wires other than to say this: Just use HTTPS.</p>\n\n<p>In essence, the only <strong>practical</strong> way to protect against wiretapping/packet sniffing during login is by using HTTPS or another certificate-based encryption scheme (for example, <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\" rel=\"noreferrer\">TLS</a>) or a proven &amp; tested challenge-response scheme (for example, the <a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\" rel=\"noreferrer\">Diffie-Hellman</a>-based SRP). <em>Any other method can be easily circumvented</em> by an eavesdropping attacker.</p>\n\n<p>Of course, if you are willing to get a little bit impractical, you could also employ some form of two-factor authentication scheme (e.g. the Google Authenticator app, a physical \'cold war style\' codebook, or an RSA key generator dongle). If applied correctly, this could work even with an unsecured connection, but it\'s hard to imagine that a dev would be willing to implement two-factor auth but not SSL.</p>\n\n<p><strong>(Do not) Roll-your-own JavaScript encryption/hashing</strong></p>\n\n<p>Given the perceived (though now <a href=\"https://letsencrypt.org/\" rel=\"noreferrer\">avoidable</a>) cost and technical difficulty of setting up an SSL certificate on your website, some developers are tempted to roll their own in-browser hashing or encryption schemes in order to avoid passing cleartext logins over an unsecured wire.</p>\n\n<p>While this is a noble thought, it is essentially useless (and can be a <a href=\"https://stackoverflow.com/questions/1380168/does-it-make-security-sense-to-hash-password-on-client-end\">security flaw</a>) unless it is combined with one of the above - that is, either securing the line with strong encryption or using a tried-and-tested challenge-response mechanism (if you don\'t know what that is, just know that it is one of the most difficult to prove, most difficult to design, and most difficult to implement concepts in digital security).</p>\n\n<p>While it is true that hashing the password <em>can be</em> effective against <strong>password disclosure</strong>, it is vulnerable to replay attacks, Man-In-The-Middle attacks / hijackings (if an attacker can inject a few bytes into your unsecured HTML page before it reaches your browser, they can simply comment out the hashing in the JavaScript), or brute-force attacks (since you are handing the attacker both username, salt and hashed password).</p>\n\n<p><strong>CAPTCHAS against humanity</strong></p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/CAPTCHA\" rel=\"noreferrer\">CAPTCHA</a> is meant to thwart one specific category of attack: automated dictionary/brute force trial-and-error with no human operator. There is no doubt that this is a real threat, however, there are ways of dealing with it seamlessly that don\'t require a CAPTCHA, specifically properly designed server-side login throttling schemes - we\'ll discuss those later.</p>\n\n<p>Know that CAPTCHA implementations are not created alike; they often aren\'t human-solvable, most of them are actually ineffective against bots, all of them are ineffective against cheap third-world labor (according to <a href=\"https://en.wikipedia.org/wiki/OWASP\" rel=\"noreferrer\">OWASP</a>, the current sweatshop rate is $12 per 500 tests), and some implementations may be technically illegal in some countries (see <a href=\"https://www.owasp.org/index.php/Authentication_Cheat_Sheet\" rel=\"noreferrer\">OWASP Authentication Cheat Sheet</a>). If you must use a CAPTCHA, use Google\'s <a href=\"https://en.wikipedia.org/wiki/ReCAPTCHA\" rel=\"noreferrer\">reCAPTCHA</a>, since it is OCR-hard by definition (since it uses already OCR-misclassified book scans) and tries very hard to be user-friendly.</p>\n\n<p>Personally, I tend to find CAPTCHAS annoying, and use them only as a last resort when a user has failed to log in a number of times and throttling delays are maxed out. This will happen rarely enough to be acceptable, and it strengthens the system as a whole.</p>\n\n<p><strong>Storing Passwords / Verifying logins</strong></p>\n\n<p>This may finally be common knowledge after all the highly-publicized hacks and user data leaks we\'ve seen in recent years, but it has to be said: Do not store passwords in cleartext in your database. User databases are routinely hacked, leaked or gleaned through SQL injection, and if you are storing raw, plaintext passwords, that is instant game over for your login security.</p>\n\n<p>So if you can\'t store the password, how do you check that the login+password combination POSTed from the login form is correct? The answer is hashing using a <a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\" rel=\"noreferrer\">key derivation function</a>. Whenever a new user is created or a password is changed, you take the password and run it through a KDF, such as Argon2, bcrypt, scrypt or PBKDF2, turning the cleartext password (\"correcthorsebatterystaple\") into a long, random-looking string, which is a lot safer to store in your database. To verify a login, you run the same hash function on the entered password, this time passing in the salt and compare the resulting hash string to the value stored in your database. Argon2, bcrypt and scrypt store the salt with the hash already. Check out this <a href=\"https://security.stackexchange.com/a/31846/8340\">article</a> on sec.stackexchange for more detailed information.</p>\n\n<p>The reason a salt is used is that hashing in itself is not sufficient -- you\'ll want to add a so-called \'salt\' to protect the hash against <a href=\"https://en.wikipedia.org/wiki/Rainbow_table\" rel=\"noreferrer\">rainbow tables</a>. A salt effectively prevents two passwords that exactly match from being stored as the same hash value, preventing the whole database being scanned in one run if an attacker is executing a password guessing attack.</p>\n\n<p>A cryptographic hash should not be used for password storage because user-selected passwords are not strong enough (i.e. do not usually contain enough entropy) and a password guessing attack could be completed in a relatively short time by an attacker with access to the hashes. This is why KDFs are used - these effectively <a href=\"https://en.wikipedia.org/wiki/Key_stretching\" rel=\"noreferrer\">\"stretch the key\"</a>, which means that every password guess an attacker makes causes multiple repetitions of the hash algorithm, for example 10,000 times, which causes the attacker to guess the password 10,000 times slower.</p>\n\n<p><strong>Session data - \"You are logged in as Spiderman69\"</strong></p>\n\n<p>Once the server has verified the login and password against your user database and found a match, the system needs a way to remember that the browser has been authenticated. This fact should only ever be stored server side in the session data.</p>\n\n<blockquote>\n  <p>If you are unfamiliar with session data, here\'s how it works: A single randomly-generated string is stored in an expiring cookie and used to reference a collection of data - the session data - which is stored on the server. If you are using an MVC framework, this is undoubtedly handled already.</p>\n</blockquote>\n\n<p>If at all possible, make sure the session cookie has the secure and HTTP Only flags set when sent to the browser. The HttpOnly flag provides some protection against the cookie being read through XSS attack. The secure flag ensures that the cookie is only sent back via HTTPS, and therefore protects against network sniffing attacks. The value of the cookie should not be predictable. Where a cookie referencing a non-existent session is presented, its value should be replaced immediately to prevent <a href=\"https://www.owasp.org/index.php/Session_fixation\" rel=\"noreferrer\">session fixation</a>.</p>\n\n<h2>PART II: How To Remain Logged In - The Infamous \"Remember Me\" Checkbox</h2>\n\n<p>Persistent Login Cookies (\"remember me\" functionality) are a danger zone; on the one hand, they are entirely as safe as conventional logins when users understand how to handle them; and on the other hand, they are an enormous security risk in the hands of careless users, who may use them on public computers and forget to log out, and who may not know what browser cookies are or how to delete them.</p>\n\n<p>Personally, I like persistent logins for the websites I visit on a regular basis, but I know how to handle them safely. If you are positive that your users know the same, you can use persistent logins with a clean conscience. If not - well, then you may subscribe to the philosophy that users who are careless with their login credentials brought it upon themselves if they get hacked. It\'s not like we go to our user\'s houses and tear off all those facepalm-inducing Post-It notes with passwords they have lined up on the edge of their monitors, either.</p>\n\n<p>Of course, some systems can\'t afford to have <em>any</em> accounts hacked; for such systems, there is no way you can justify having persistent logins.</p>\n\n<p><strong>If you DO decide to implement persistent login cookies, this is how you do it:</strong></p>\n\n<ol>\n<li><p>First, take some time to read <a href=\"https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence\" rel=\"noreferrer\">Paragon Initiative\'s article</a> on the subject. You\'ll need to get a bunch of elements right, and the article does a great job of explaining each.</p></li>\n<li><p>And just to reiterate one of the most common pitfalls, <strong>DO NOT STORE THE PERSISTENT LOGIN COOKIE (TOKEN) IN YOUR DATABASE, ONLY A HASH OF IT!</strong> The login token is Password Equivalent, so if an attacker got their hands on your database, they could use the tokens to log in to any account, just as if they were cleartext login-password combinations. Therefore, use hashing (according to <a href=\"https://security.stackexchange.com/a/63438/5002\">https://security.stackexchange.com/a/63438/5002</a> a weak hash will do just fine for this purpose) when storing persistent login tokens.</p></li>\n</ol>\n\n<h2>PART III: Using Secret Questions</h2>\n\n<p><strong>Don\'t implement \'secret questions\'</strong>. The \'secret questions\' feature is a security anti-pattern. Read the paper from link number 4 from the MUST-READ list. You can ask Sarah Palin about that one, after her Yahoo! email account got hacked during a previous presidential campaign because the answer to her security question was... \"Wasilla High School\"!</p>\n\n<p>Even with user-specified questions, it is highly likely that most users will choose either:</p>\n\n<ul>\n<li><p>A \'standard\' secret question like mother\'s maiden name or favorite pet</p></li>\n<li><p>A simple piece of trivia that anyone could lift from their blog, LinkedIn profile, or similar</p></li>\n<li><p>Any question that is easier to answer than guessing their password. Which, for any decent password, is every question you can imagine</p></li>\n</ul>\n\n<p><strong>In conclusion, security questions are inherently insecure in virtually all their forms and variations, and should not be employed in an authentication scheme for any reason.</strong></p>\n\n<p>The true reason why security questions even exist in the wild is that they conveniently save the cost of a few support calls from users who can\'t access their email to get to a reactivation code. This at the expense of security and Sarah Palin\'s reputation. Worth it? Probably not.</p>\n\n<h2>PART IV: Forgotten Password Functionality</h2>\n\n<p>I already mentioned why you should <strong>never use security questions</strong> for handling forgotten/lost user passwords; it also goes without saying that you should never e-mail users their actual passwords. There are at least two more all-too-common pitfalls to avoid in this field:</p>\n\n<ol>\n<li><p>Don\'t <em>reset</em> a forgotten password to an autogenerated strong password - such passwords are notoriously hard to remember, which means the user must either change it or write it down - say, on a bright yellow Post-It on the edge of their monitor. Instead of setting a new password, just let users pick a new one right away - which is what they want to do anyway. (An exception to this might be if the users are universally using a password manager to store/manage passwords that would normally be impossible to remember without writing it down).</p></li>\n<li><p>Always hash the lost password code/token in the database. <strong><em>AGAIN</em></strong>, this code is another example of a Password Equivalent, so it MUST be hashed in case an attacker got their hands on your database. When a lost password code is requested, send the plaintext code to the user\'s email address, then hash it, save the hash in your database -- and <em>throw away the original</em>. Just like a password or a persistent login token.</p></li>\n</ol>\n\n<p>A final note: always make sure your interface for entering the \'lost password code\' is at least as secure as your login form itself, or an attacker will simply use this to gain access instead. Making sure you generate very long \'lost password codes\' (for example, 16 case-sensitive alphanumeric characters) is a good start, but consider adding the same throttling scheme that you do for the login form itself.</p>\n\n<h2>PART V: Checking Password Strength</h2>\n\n<p>First, you\'ll want to read this small article for a reality check: <a href=\"http://www.whatsmypass.com/?p=415\" rel=\"noreferrer\">The 500 most common passwords</a></p>\n\n<p>Okay, so maybe the list isn\'t the <em>canonical</em> list of most common passwords on <em>any</em> system <em>anywhere ever</em>, but it\'s a good indication of how poorly people will choose their passwords when there is no enforced policy in place. Plus, the list looks frighteningly close to home when you compare it to publicly available analyses of recently stolen passwords.</p>\n\n<p>So: With no minimum password strength requirements, 2% of users use one of the top 20 most common passwords. Meaning: if an attacker gets just 20 attempts, 1 in 50 accounts on your website will be crackable.</p>\n\n<p>Thwarting this requires calculating the entropy of a password and then applying a threshold.  The National Institute of Standards and Technology (NIST) <a href=\"https://en.wikipedia.org/wiki/Password_strength#NIST_Special_Publication_800-63\" rel=\"noreferrer\">Special Publication 800-63</a> has a set of very good suggestions.  That, when combined with a dictionary and keyboard layout analysis (for example, \'qwertyuiop\' is a bad password), can <a href=\"https://cubicspot.blogspot.com/2012/01/how-to-calculate-password-strength-part.html\" rel=\"noreferrer\">reject 99% of all poorly selected passwords</a> at a level of 18 bits of entropy.  Simply calculating password strength and <a href=\"https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/\" rel=\"noreferrer\">showing a visual strength meter</a> to a user is good, but insufficient.  Unless it is enforced, a lot of users will most likely ignore it.</p>\n\n<p>And for a refreshing take on user-friendliness of high-entropy passwords, Randall Munroe\'s <a href=\"https://xkcd.com/936/\" rel=\"noreferrer\">Password Strength xkcd</a> is highly recommended.</p>\n\n<p>Utilize Troy Hunt\'s <a href=\"https://haveibeenpwned.com/API/\" rel=\"noreferrer\">Have I Been Pwned API</a> to check users passwords against passwords compromised in public data breaches.</p>\n\n<h2>PART VI: Much More - Or: Preventing Rapid-Fire Login Attempts</h2>\n\n<p>First, have a look at the numbers: <a href=\"https://www.lockdown.co.uk/?pg=combi&amp;s=articles\" rel=\"noreferrer\">Password Recovery Speeds - How long will your password stand up</a></p>\n\n<p>If you don\'t have the time to look through the tables in that link, here\'s the list of them:</p>\n\n<ol>\n<li><p>It takes <em>virtually no time</em> to crack a weak password, even if you\'re cracking it with an abacus</p></li>\n<li><p>It takes <em>virtually no time</em> to crack an alphanumeric 9-character password if it is <strong>case insensitive</strong></p></li>\n<li><p>It takes <em>virtually no time</em> to crack an intricate, symbols-and-letters-and-numbers, upper-and-lowercase password if it is <strong>less than 8 characters long</strong> (a desktop PC can search the entire keyspace up to 7 characters in a matter of days or even hours)</p></li>\n<li><p><strong>It would, however, take an inordinate amount of time to crack even a 6-character password, <em>if you were limited to one attempt per second!</em></strong></p></li>\n</ol>\n\n<p>So what can we learn from these numbers? Well, lots, but we can focus on the most important part: the fact that preventing large numbers of rapid-fire successive login attempts (ie. the <em>brute force</em> attack) really isn\'t that difficult. But preventing it <em>right</em> isn\'t as easy as it seems.</p>\n\n<p>Generally speaking, you have three choices that are all effective against brute-force attacks <em>(and dictionary attacks, but since you are already employing a strong passwords policy, they shouldn\'t be an issue)</em>:</p>\n\n<ul>\n<li><p>Present a <strong>CAPTCHA</strong> after N failed attempts (annoying as hell and often ineffective -- but I\'m repeating myself here)</p></li>\n<li><p><strong>Locking accounts</strong> and requiring email verification after N failed attempts (this is a <a href=\"https://en.wikipedia.org/wiki/Denial-of-service_attack\" rel=\"noreferrer\">DoS</a> attack waiting to happen)</p></li>\n<li><p>And finally, <strong>login throttling</strong>: that is, setting a time delay between attempts after N failed attempts (yes, DoS attacks are still possible, but at least they are far less likely and a lot more complicated to pull off).</p></li>\n</ul>\n\n<p><strong>Best practice #1:</strong> A short time delay that increases with the number of failed attempts, like:</p>\n\n<ul>\n<li>1 failed attempt = no delay</li>\n<li>2 failed attempts = 2 sec delay</li>\n<li>3 failed attempts = 4 sec delay</li>\n<li>4 failed attempts = 8 sec delay</li>\n<li>5 failed attempts = 16 sec delay</li>\n<li>etc.</li>\n</ul>\n\n<p>DoS attacking this scheme would be very impractical, since the resulting lockout time is slightly larger than the sum of the previous lockout times.</p>\n\n<blockquote>\n  <p>To clarify: The delay is <em>not</em> a delay before returning the response to the browser. It is more like a timeout or refractory period during which login attempts to a specific account or from a specific IP address will not be accepted or evaluated at all. That is, correct credentials will not return in a successful login, and incorrect credentials will not trigger a delay increase.</p>\n</blockquote>\n\n<p><strong>Best practice #2:</strong> A medium length time delay that goes into effect after N failed attempts, like:</p>\n\n<ul>\n<li>1-4 failed attempts = no delay</li>\n<li>5 failed attempts = 15-30 min delay</li>\n</ul>\n\n<p>DoS attacking this scheme would be quite impractical, but certainly doable. Also, it might be relevant to note that such a long delay can be very annoying for a legitimate user. Forgetful users will dislike you.</p>\n\n<p><strong>Best practice #3:</strong> Combining the two approaches - either a fixed, short time delay that goes into effect after N failed attempts, like:</p>\n\n<ul>\n<li>1-4 failed attempts = no delay</li>\n<li>5+ failed attempts = 20 sec delay</li>\n</ul>\n\n<p>Or, an increasing delay with a fixed upper bound, like:</p>\n\n<ul>\n<li>1 failed attempt = 5 sec delay</li>\n<li>2 failed attempts = 15 sec delay</li>\n<li>3+ failed attempts = 45 sec delay</li>\n</ul>\n\n<p>This final scheme was taken from the OWASP best-practices suggestions (link 1 from the MUST-READ list) and should be considered best practice, even if it is admittedly on the restrictive side.</p>\n\n<blockquote>\n  <p><em>As a rule of thumb, however, I would say: the stronger your password policy is, the less you have to bug users with delays. If you require strong (case-sensitive alphanumerics + required numbers and symbols) 9+ character passwords, you could give the users 2-4 non-delayed password attempts before activating the throttling.</em></p>\n</blockquote>\n\n<p>DoS attacking this final login throttling scheme would be <strong><em>very</em></strong> impractical. And as a final touch, always allow persistent (cookie) logins (and/or a CAPTCHA-verified login form) to pass through, so legitimate users won\'t even be delayed <em>while the attack is in progress</em>. That way, the very impractical DoS attack becomes an <em>extremely</em> impractical attack.</p>\n\n<p>Additionally, it makes sense to do more aggressive throttling on admin accounts, since those are the most attractive entry points</p>\n\n<h2>PART VII: Distributed Brute Force Attacks</h2>\n\n<p>Just as an aside, more advanced attackers will try to circumvent login throttling by \'spreading their activities\':</p>\n\n<ul>\n<li><p>Distributing the attempts on a botnet to prevent IP address flagging</p></li>\n<li><p>Rather than picking one user and trying the 50.000 most common passwords (which they can\'t, because of our throttling), they will pick THE most common password and try it against 50.000 users instead. That way, not only do they get around maximum-attempts measures like CAPTCHAs and login throttling, their chance of success increases as well, since the number 1 most common password is far more likely than number 49.995</p></li>\n<li><p>Spacing the login requests for each user account, say, 30 seconds apart, to sneak under the radar</p></li>\n</ul>\n\n<p>Here, the best practice would be <strong>logging the number of failed logins, system-wide</strong>, and using a running average of your site\'s bad-login frequency as the basis for an upper limit that you then impose on all users.</p>\n\n<p>Too abstract? Let me rephrase:</p>\n\n<p>Say your site has had an average of 120 bad logins per day over the past 3 months. Using that (running average), your system might set the global limit to 3 times that -- ie. 360 failed attempts over a 24 hour period. Then, if the total number of failed attempts across all accounts exceeds that number within one day (or even better, monitor the rate of acceleration and trigger on a calculated threshold), it activates system-wide login throttling - meaning short delays for ALL users (still, with the exception of cookie logins and/or backup CAPTCHA logins).</p>\n\n<p>I also posted a question with <a href=\"https://stackoverflow.com/questions/479233/what-is-the-best-distributed-brute-force-countermeasure\">more details and a really good discussion of how to avoid tricky pitfals</a> in fending off distributed brute force attacks</p>\n\n<h2>PART VIII: Two-Factor Authentication and Authentication Providers</h2>\n\n<p>Credentials can be compromised, whether by exploits, passwords being written down and lost, laptops with keys being stolen, or users entering logins into phishing sites.  Logins can be further protected with two-factor authentication, which uses out-of-band factors such as single-use codes received from a phone call, SMS message, app, or dongle. Several providers offer two-factor authentication services.</p>\n\n<p>Authentication can be completely delegated to a single-sign-on service, where another provider handles collecting credentials. This pushes the problem to a trusted third party. Google and Twitter both provide standards-based SSO services, while Facebook provides a similar proprietary solution.</p>\n\n<h2>MUST-READ LINKS About Web Authentication</h2>\n\n<ol>\n<li><a href=\"https://www.owasp.org/index.php/Authentication_Cheat_Sheet\" rel=\"noreferrer\">OWASP Guide To Authentication</a> / <a href=\"https://www.owasp.org/index.php/Authentication_Cheat_Sheet\" rel=\"noreferrer\">OWASP Authentication Cheat Sheet</a></li>\n<li><a href=\"https://pdos.csail.mit.edu/papers/webauth:sec10.pdf\" rel=\"noreferrer\">Dos and Don’ts of Client Authentication on the Web (very readable MIT research paper)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP_cookie#Drawbacks_of_cookies\" rel=\"noreferrer\">Wikipedia: HTTP cookie</a></li>\n<li><a href=\"https://cups.cs.cmu.edu/soups/2008/proceedings/p13Rabkin.pdf\" rel=\"noreferrer\">Personal knowledge questions for fallback authentication: Security questions in the era of Facebook (very readable Berkeley research paper)</a></li>\n</ol>\n',1232882866,3771,477578),('<p>Do the following:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>grep -rnw \'/path/to/somewhere/\' -e \'pattern\'\n</code></pre>\n\n<ul>\n<li><code>-r</code> or <code>-R</code> is recursive, </li>\n<li><code>-n</code> is line number, and </li>\n<li><code>-w</code> stands for match the whole word. </li>\n<li><code>-l</code> (lower-case L) can be added to just give the file name of matching files.</li>\n</ul>\n\n<p>Along with these, <code>--exclude</code>, <code>--include</code>, <code>--exclude-dir</code> flags could be used for efficient searching:</p>\n\n<ul>\n<li><p>This will only search through those files which have .c or .h extensions:</p>\n\n<pre><code>grep --include=\\*.{c,h} -rnw \'/path/to/somewhere/\' -e \"pattern\"\n</code></pre></li>\n<li><p>This will exclude searching all the files ending with .o extension:</p>\n\n<pre><code>grep --exclude=*.o -rnw \'/path/to/somewhere/\' -e \"pattern\"\n</code></pre></li>\n<li><p>For directories it\'s possible to exclude a particular directory(ies) through <code>--exclude-dir</code> parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:</p>\n\n<pre><code>grep --exclude-dir={dir1,dir2,*.dst} -rnw \'/path/to/somewhere/\' -e \"pattern\"\n</code></pre></li>\n</ul>\n\n<p>This works very well for me, to achieve almost the same purpose like yours.</p>\n\n<p>For more options check <code>man grep</code>.</p>\n',1370506895,9599,16957078),('<p>The old versions of JavaScript had no import, include, or require, so many different approaches to this problem have been developed.</p>\n\n<p>But since 2015 (ES6), JavaScript has had the <a href=\"http://exploringjs.com/es6/ch_modules.html\" rel=\"noreferrer\">ES6 modules</a> standard to import modules in Node.js, which is also supported by <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">most modern browsers</a>.</p>\n\n<p>For compatibility with older browsers, build tools like <a href=\"https://webpack.github.io/\" rel=\"noreferrer\">Webpack</a> and <a href=\"https://rollupjs.org/\" rel=\"noreferrer\">Rollup</a> and/or transpilation tools like <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a> can be used.</p>\n\n<h1>ES6 Modules</h1>\n\n<p>ECMAScript (ES6) modules have been <a href=\"https://nodejs.org/api/esm.html\" rel=\"noreferrer\">supported in Node.js</a> since v8.5, with the <code>--experimental-modules</code> flag, and since at least Node.js v13.8.0 without the flag. To enable \"ESM\" (vs. Node.js\'s previous CommonJS-style module system [\"CJS\"]) you either use <code>\"type\": \"module\"</code> in <code>package.json</code> or give the files the extension <code>.mjs</code>. (Similarly, modules written with Node.js\'s previous CJS module can be named <code>.cjs</code> if your default is ESM.)</p>\n\n<p>Using <code>package.json</code>:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n    \"type\": \"module\"\n}\n</code></pre>\n\n<p>Then <code>module.js</code>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>export function hello() {\n  return \"Hello\";\n}\n</code></pre>\n\n<p>Then <code>main.js</code>:</p>\n\n<pre><code>import { hello } from \'./module.js\';\nlet val = hello();  // val is \"Hello\";\n</code></pre>\n\n<p>Using <code>.mjs</code>, you\'d have <code>module.mjs</code>:</p>\n\n<pre><code>export function hello() {\n  return \"Hello\";\n}\n</code></pre>\n\n<p>Then <code>main.mjs</code>:</p>\n\n<pre><code>import { hello } from \'./module.mjs\';\nlet val = hello();  // val is \"Hello\";\n</code></pre>\n\n<h2>ECMAScript modules in browsers</h2>\n\n<p>Browsers have had support for loading ECMAScript modules directly (no tools like Webpack required) <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" rel=\"noreferrer\">since</a> Safari 10.1, Chrome 61, Firefox 60, and Edge 16. Check the current support at <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">caniuse</a>. There is no need to use Node.js\' <code>.mjs</code> extension; browsers completely ignore file extensions on modules/scripts.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  import { hello } from \'./hello.mjs\'; // Or it could be simply `hello.js`\n  hello(\'world\');\n&lt;/script&gt;\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// hello.mjs -- or it could be simply `hello.js`\nexport function hello(text) {\n  const div = document.createElement(\'div\');\n  div.textContent = `Hello ${text}`;\n  document.body.appendChild(div);\n}\n</code></pre>\n\n<p>Read more at <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" rel=\"noreferrer\">https://jakearchibald.com/2017/es-modules-in-browsers/</a></p>\n\n<h3>Dynamic imports in browsers</h3>\n\n<p>Dynamic imports let the script load other scripts as needed:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  import(\'hello.mjs\').then(module =&gt; {\n      module.hello(\'world\');\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Read more at <a href=\"https://developers.google.com/web/updates/2017/11/dynamic-import\" rel=\"noreferrer\">https://developers.google.com/web/updates/2017/11/dynamic-import</a></p>\n\n<h1>Node.js require</h1>\n\n<p>The older CJS module style, still widely used in Node.js, is the <a href=\"https://nodejs.org/api/modules.html\" rel=\"noreferrer\"><code>module.exports</code>/<code>require</code></a> system.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// mymodule.js\nmodule.exports = {\n   hello: function() {\n      return \"Hello\";\n   }\n}\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// server.js\nconst myModule = require(\'./mymodule\');\nlet val = myModule.hello(); // val is \"Hello\"   \n</code></pre>\n\n<p>There are other ways for JavaScript to include external JavaScript contents in browsers that do not require preprocessing.</p>\n\n<h1>AJAX Loading</h1>\n\n<p>You could load an additional script with an AJAX call and then use <code>eval</code> to run it. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs, hacks and security issues.</p>\n\n<h1>Fetch Loading</h1>\n\n<p>Like Dynamic Imports you can load one or many scripts with a <code>fetch</code> call using promises to control order of execution for script dependencies using the <a href=\"https://git.habd.as/jhabdas/fetch-inject\" rel=\"noreferrer\">Fetch Inject</a> library:</p>\n\n<pre><code>fetchInject([\n  \'https://cdn.jsdelivr.net/momentjs/2.17.1/moment.min.js\'\n]).then(() =&gt; {\n  console.log(`Finish in less than ${moment().endOf(\'year\').fromNow(true)}`)\n})\n</code></pre>\n\n<h1>jQuery Loading</h1>\n\n<p>The <a href=\"http://jquery.com/\" rel=\"noreferrer\">jQuery</a> library provides loading functionality <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"noreferrer\">in one line</a>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>$.getScript(\"my_lovely_script.js\", function() {\n   alert(\"Script loaded but not necessarily executed.\");\n});\n</code></pre>\n\n<h1>Dynamic Script Loading</h1>\n\n<p>You could add a script tag with the script URL into the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>\n\n<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Here is an example of how this could work:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function dynamicallyLoadScript(url) {\n    var script = document.createElement(\"script\");  // create a script DOM node\n    script.src = url;  // set its src to the provided URL\n\n    document.head.appendChild(script);  // add it to the end of the head section of the page (could change \'head\' to \'body\' to add it to the end of the body section instead)\n}\n</code></pre>\n\n<p>This function will add a new <code>&lt;script&gt;</code> tag to the end of the head section of the page, where the <code>src</code> attribute is set to the URL which is given to the function as the first parameter.</p>\n\n<p>Both of these solutions are discussed and illustrated in <a href=\"http://unixpapa.com/js/dyna.html\" rel=\"noreferrer\">JavaScript Madness: Dynamic Script Loading</a>.</p>\n\n<h1>Detecting when the script has been executed</h1>\n\n<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>\n\n<p>It means that if you use these tricks directly, <em>you won\'t be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>\n\n<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n\nvar s = new MySuperObject();\n\nError : MySuperObject is undefined\n</code></pre>\n\n<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>\n\n<p><strong>So what to do about it ?</strong></p>\n\n<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function loadScript(url, callback)\n{\n    // Adding the script tag to the head as suggested before\n    var head = document.head;\n    var script = document.createElement(\'script\');\n    script.type = \'text/javascript\';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = callback;\n    script.onload = callback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Then you write the code you want to use AFTER the script is loaded in a <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"noreferrer\">lambda function</a>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var myPrettyCode = function() {\n   // Here, do whatever you want\n};\n</code></pre>\n\n<p>Then you run all that:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>loadScript(\"my_lovely_script.js\", myPrettyCode);\n</code></pre>\n\n<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There\'s a <a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\" rel=\"noreferrer\">great article on Javascript loading in general</a> which discusses this.</p>\n\n<h1>Source Code Merge/Preprocessing</h1>\n\n<p>As mentioned at the top of this answer, many developers use build/transpilation tool(s) like Parcel, Webpack, or Babel in their projects, allowing them to use upcoming JavaScript syntax, provide backward compatibility for older browsers, combine files, minify, perform code splitting etc.</p>\n',1244117608,4498,950146),('<h1>Native deep cloning</h1>\n\n<p>It\'s called \"structured cloning\", works experimentally in Node 11 and later, and hopefully will land in browsers. See <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838\">this answer</a> for more details.</p>\n\n<h1>Fast cloning with data loss - JSON.parse/stringify</h1>\n\n<p>If you do not use <code>Date</code>s, functions, <code>undefined</code>, <code>Infinity</code>, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, a very simple one liner to deep clone an object is:</p>\n\n<p><code>JSON.parse(JSON.stringify(object))</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = {\r\n  string: \'string\',\r\n  number: 123,\r\n  bool: false,\r\n  nul: null,\r\n  date: new Date(),  // stringified\r\n  undef: undefined,  // lost\r\n  inf: Infinity,  // forced to \'null\'\r\n  re: /.*/,  // lost\r\n}\r\nconsole.log(a);\r\nconsole.log(typeof a.date);  // Date object\r\nconst clone = JSON.parse(JSON.stringify(a));\r\nconsole.log(clone);\r\nconsole.log(typeof clone.date);  // result of .toISOString()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>See <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074\">Corban\'s answer</a> for benchmarks.</p>\n\n<h1>Reliable cloning using a library</h1>\n\n<p>Since cloning objects is not trivial (complex types, circular references, function etc.), most major libraries provide function to clone objects. <strong>Don\'t reinvent the wheel</strong> - if you\'re already using a library, check if it has an object cloning function. For example,</p>\n\n<ul>\n<li>lodash - <a href=\"https://lodash.com/docs#cloneDeep\" rel=\"noreferrer\"><code>cloneDeep</code></a>; can be imported separately via the <a href=\"https://www.npmjs.com/package/lodash.clonedeep\" rel=\"noreferrer\">lodash.clonedeep</a> module and is probably your best choice if you\'re not already using a library that provides a deep cloning function</li>\n<li>AngularJS - <a href=\"https://docs.angularjs.org/api/ng/function/angular.copy\" rel=\"noreferrer\"><code>angular.copy</code></a></li>\n<li>jQuery - <a href=\"https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN\" rel=\"noreferrer\"><code>jQuery.extend(true, { }, oldObject)</code></a>; <code>.clone()</code> only clones DOM elements</li>\n</ul>\n\n<h1>ES6</h1>\n\n<p>For completeness, note that ES6 offers two shallow copy mechanisms: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\"><code>Object.assign()</code></a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">spread syntax</a>.\nwhich copies values of all enumerable own properties from one object to another. For example:</p>\n\n<pre><code>var A1 = {a: \"2\"};\nvar A2 = Object.assign({}, A1);\nvar A3 = {...A1};  // Spread Syntax\n</code></pre>\n',1222193377,4754,122704),('<h2>Moving to an existing branch</h2>\n\n<p>If you want to move your commits to an <strong>existing branch</strong>, it will look like this:</p>\n\n\n\n<pre class=\"lang-sh prettyprint-override\"><code>git checkout existingbranch\ngit merge master         # Bring the commits here\ngit checkout master\ngit reset --keep HEAD~3  # Move master back by 3 commits.\ngit checkout existingbranch\n</code></pre>\n\n<p>The <code>--keep</code> option preserves any uncommitted changes that you might have in unrelated files, or aborts if those changes would have to be overwritten -- similarly to what <code>git checkout</code> does. If it aborts, <code>git stash</code> your changes and retry, or use <code>--hard</code> to lose the changes (even from files that didn\'t change between the commits!)</p>\n\n<h2>Moving to a new branch</h2>\n\n<p>This method works by creating a new branch with the first command (<code>git branch newbranch</code>) but not switching to it. Then we roll back the current branch (master) and switch to the new branch to continue working.</p>\n\n\n\n<pre class=\"lang-sh prettyprint-override\"><code>git branch newbranch      # Create a new branch, containing all current commits\ngit reset --keep HEAD~3   # Move master back by 3 commits (Make sure you know how many commits you need to go back)\ngit checkout newbranch    # Go to the new branch that still has the desired commits\n# Warning: after this it\'s not safe to do a rebase in newbranch without extra care.\n</code></pre>\n\n<p>But do make sure how many commits to go back. Alternatively, instead of <code>HEAD~3</code>, you can simply provide the hash of the commit (or the reference like <code>origin/master</code>) you want to revert back to, e.g:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git reset --keep a1b2c3d4\n</code></pre>\n\n<p><strong>WARNING:</strong> With Git version 2.0 and later, if you later <code>git rebase</code> the new branch upon the original (<code>master</code>) branch, you may need an explicit <code>--no-fork-point</code> option during the rebase to avoid losing the commits you moved from the master branch.  Having <code>branch.autosetuprebase always</code> set makes this more likely.  See <a href=\"https://stackoverflow.com/a/36463546/1256452\">John Mellor\'s answer</a> for details.</p>\n',1256613315,6511,1628584),('<pre><code>#!/bin/bash\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )\"\n</code></pre>\n\n<p>is a useful one-liner which will give you the full directory name of the script no matter where it is being called from.</p>\n\n<p>It will work as long as the last component of the path used to find the script is not a symlink (directory links are OK).  If you also want to resolve any links to the script itself, you need a multi-line solution:</p>\n\n<pre><code>#!/bin/bash\n\nSOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )\"\n  SOURCE=\"$(readlink \"$SOURCE\")\"\n  [[ $SOURCE != /* ]] &amp;&amp; SOURCE=\"$DIR/$SOURCE\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\ndone\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )\"\n</code></pre>\n\n<p>This last one will work with any combination of aliases, <code>source</code>, <code>bash -c</code>, symlinks, etc.</p>\n\n<p>Beware: if you <code>cd</code> to a different directory before running this snippet, the result may be incorrect! </p>\n\n<p>Also, watch out for <a href=\"http://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/\" rel=\"noreferrer\"><code>$CDPATH</code> gotchas</a>, and stderr output side effects if the user has smartly overridden cd to redirect output to stderr instead (including escape sequences, such as when calling <code>update_terminal_cwd &gt;&amp;2</code> on Mac). Adding <code>&gt;/dev/null 2&gt;&amp;1</code> at the end of your <code>cd</code> command will take care of both possibilities.</p>\n\n<p>To understand how it works, try running this more verbose form:</p>\n\n<pre><code>#!/bin/bash\n\nSOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  TARGET=\"$(readlink \"$SOURCE\")\"\n  if [[ $TARGET == /* ]]; then\n    echo \"SOURCE \'$SOURCE\' is an absolute symlink to \'$TARGET\'\"\n    SOURCE=\"$TARGET\"\n  else\n    DIR=\"$( dirname \"$SOURCE\" )\"\n    echo \"SOURCE \'$SOURCE\' is a relative symlink to \'$TARGET\' (relative to \'$DIR\')\"\n    SOURCE=\"$DIR/$TARGET\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\n  fi\ndone\necho \"SOURCE is \'$SOURCE\'\"\nRDIR=\"$( dirname \"$SOURCE\" )\"\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )\"\nif [ \"$DIR\" != \"$RDIR\" ]; then\n  echo \"DIR \'$RDIR\' resolves to \'$DIR\'\"\nfi\necho \"DIR is \'$DIR\'\"\n</code></pre>\n\n<p>And it will print something like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SOURCE \'./scriptdir.sh\' is a relative symlink to \'sym2/scriptdir.sh\' (relative to \'.\')\nSOURCE is \'./sym2/scriptdir.sh\'\nDIR \'./sym2\' resolves to \'/home/ubuntu/dotfiles/fo fo/real/real1/real2\'\nDIR is \'/home/ubuntu/dotfiles/fo fo/real/real1/real2\'\n</code></pre>\n',1225269405,6611,246128),('<p>Quick note, this is almost certainly confusing <a href=\"http://en.wikipedia.org/wiki/Big_O_notation\" rel=\"noreferrer\">Big O notation</a> (which is an upper bound) with Theta notation \"Θ\" (which is a two-side bound). In my experience, this is actually typical of discussions in non-academic settings. Apologies for any confusion caused.</p>\n\n<hr>\n\n<p>Big O complexity can be visualized with this graph:</p>\n\n<p><img src=\"https://i.stack.imgur.com/WcBRI.png\" alt=\"Big O Analysis\"></p>\n\n<p>The simplest definition I can give for Big-O notation is this:</p>\n\n<p><strong>Big-O notation is a relative representation of the complexity of an algorithm.</strong></p>\n\n<p>There are some important and deliberately chosen words in that sentence:</p>\n\n<blockquote>\n  <ul>\n  <li><strong>relative:</strong> you can only compare apples to apples.  You can\'t compare an algorithm to do arithmetic multiplication to an algorithm that sorts a list of integers.  But a comparison of two algorithms to do arithmetic operations (one multiplication, one addition) will tell you something meaningful;</li>\n  <li><strong>representation:</strong> Big-O (in its simplest form) reduces the comparison between algorithms to a single variable.  That variable is chosen based on observations or assumptions.  For example, sorting algorithms are typically compared based on comparison operations (comparing two nodes to determine their relative ordering).  This assumes that comparison is expensive.  But what if the comparison is cheap but swapping is expensive?  It changes the comparison; and</li>\n  <li><strong>complexity:</strong> if it takes me one second to sort 10,000 elements, how long will it take me to sort one million?  Complexity in this instance is a relative measure to something else.</li>\n  </ul>\n</blockquote>\n\n<p>Come back and reread the above when you\'ve read the rest.</p>\n\n<p>The best example of Big-O I can think of is doing arithmetic.  Take two numbers (123456 and 789012).  The basic arithmetic operations we learned in school were:</p>\n\n<blockquote>\n  <ul>\n  <li>addition;</li>\n  <li>subtraction;</li>\n  <li>multiplication; and</li>\n  <li>division.</li>\n  </ul>\n</blockquote>\n\n<p>Each of these is an operation or a problem.  A method of solving these is called an <strong>algorithm</strong>.</p>\n\n<p>The addition is the simplest.  You line the numbers up (to the right) and add the digits in a column writing the last number of that addition in the result.  The \'tens\' part of that number is carried over to the next column.</p>\n\n<p>Let\'s assume that the addition of these numbers is the most expensive operation in this algorithm. It stands to reason that to add these two numbers together we have to add together 6 digits (and possibly carry a 7th). If we add two 100 digit numbers together we have to do 100 additions.  If we add <strong>two</strong> 10,000 digit numbers we have to do 10,000 additions.</p>\n\n<p>See the pattern?  The <strong>complexity</strong> (being the number of operations) is directly proportional to the number of digits <em>n</em> in the larger number.  We call this <strong>O(n)</strong> or <strong>linear complexity</strong>.</p>\n\n<p>Subtraction is similar (except you may need to borrow instead of carry).</p>\n\n<p>Multiplication is different. You line the numbers up, take the first digit in the bottom number and multiply it in turn against each digit in the top number and so on through each digit. So to multiply our two 6 digit numbers we must do 36 multiplications. We may need to do as many as 10 or 11 column adds to get the end result too.</p>\n\n<p>If we have two 100-digit numbers we need to do 10,000 multiplications and 200 adds.  For two one million digit numbers we need to do one trillion (10<sup>12</sup>) multiplications and two million adds.</p>\n\n<p>As the algorithm scales with n-<em>squared</em>, this is <strong>O(n<sup>2</sup>)</strong> or <strong>quadratic complexity</strong>. This is a good time to introduce another important concept:</p>\n\n<p><strong>We only care about the most significant portion of complexity.</strong></p>\n\n<p>The astute may have realized that we could express the number of operations as: n<sup>2</sup> + 2n.  But as you saw from our example with two numbers of a million digits apiece, the second term (2n) becomes insignificant (accounting for 0.0002% of the total operations by that stage).</p>\n\n<p>One can notice that we\'ve assumed the worst case scenario here. While multiplying 6 digit numbers, if one of them has 4 digits and the other one has 6 digits, then we only have 24 multiplications. Still, we calculate the worst case scenario for that \'n\', i.e when both are 6 digit numbers. Hence Big-O notation is about the Worst-case scenario of an algorithm.</p>\n\n<h1>The Telephone Book</h1>\n\n<p>The next best example I can think of is the telephone book, normally called the White Pages or similar but it varies from country to country.  But I\'m talking about the one that lists people by surname and then initials or first name, possibly address and then telephone numbers.</p>\n\n<p>Now if you were instructing a computer to look up the phone number for \"John Smith\" in a telephone book that contains 1,000,000 names, what would you do?  Ignoring the fact that you could guess how far in the S\'s started (let\'s assume you can\'t), what would you do?</p>\n\n<p>A typical implementation might be to open up to the middle, take the 500,000<sup>th</sup> and compare it to \"Smith\". If it happens to be \"Smith, John\", we just got really lucky.  Far more likely is that \"John Smith\" will be before or after that name.  If it\'s after we then divide the last half of the phone book in half and repeat.  If it\'s before then we divide the first half of the phone book in half and repeat.  And so on.</p>\n\n<p>This is called a <strong>binary search</strong> and is used every day in programming whether you realize it or not.</p>\n\n<p>So if you want to find a name in a phone book of a million names you can actually find any name by doing this at most 20 times.  In comparing search algorithms we decide that this comparison is our \'n\'.</p>\n\n<blockquote>\n  <ul>\n  <li>For a phone book of 3 names it takes 2 comparisons (at most).</li>\n  <li>For 7 it takes at most 3.</li>\n  <li>For 15 it takes 4.</li>\n  <li>…</li>\n  <li>For 1,000,000 it takes 20.</li>\n  </ul>\n</blockquote>\n\n<p>That is staggeringly good, isn\'t it?</p>\n\n<p>In Big-O terms this is <strong>O(log n)</strong> or <strong>logarithmic complexity</strong>.  Now the logarithm in question could be ln (base e), log<sub>10</sub>, log<sub>2</sub> or some other base.  It doesn\'t matter it\'s still O(log n) just like O(2n<sup>2</sup>) and O(100n<sup>2</sup>) are still both O(n<sup>2</sup>).</p>\n\n<p>It\'s worthwhile at this point to explain that Big O can be used to determine three cases with an algorithm:</p>\n\n<blockquote>\n  <ul>\n  <li><strong>Best Case:</strong> In the telephone book search, the best case is that we find the name in one comparison.  This is <strong>O(1)</strong> or <strong>constant complexity</strong>;</li>\n  <li><strong>Expected Case:</strong> As discussed above this is O(log n); and</li>\n  <li><strong>Worst Case:</strong> This is also O(log n).</li>\n  </ul>\n</blockquote>\n\n<p>Normally we don\'t care about the best case.  We\'re interested in the expected and worst case.  Sometimes one or the other of these will be more important.</p>\n\n<p>Back to the telephone book.</p>\n\n<p>What if you have a phone number and want to find a name?  The police have a reverse phone book but such look-ups are denied to the general public.  Or are they?  Technically you can reverse look-up a number in an ordinary phone book.  How?</p>\n\n<p>You start at the first name and compare the number.  If it\'s a match, great, if not, you move on to the next.  You have to do it this way because the phone book is <strong>unordered</strong> (by phone number anyway).</p>\n\n<p>So to find a name given the phone number (reverse lookup):</p>\n\n<blockquote>\n  <ul>\n  <li><strong>Best Case:</strong> O(1);</li>\n  <li><strong>Expected Case:</strong> O(n) (for 500,000); and</li>\n  <li><strong>Worst Case:</strong> O(n) (for 1,000,000).</li>\n  </ul>\n</blockquote>\n\n<h1>The Traveling Salesman</h1>\n\n<p>This is quite a famous problem in computer science and deserves a mention.  In this problem, you have N towns. Each of those towns is linked to 1 or more other towns by a road of a certain distance. The Traveling Salesman problem is to find the shortest tour that visits every town.</p>\n\n<p>Sounds simple?  Think again.</p>\n\n<p>If you have 3 towns A, B, and C with roads between all pairs then you could go:</p>\n\n<blockquote>\n  <ul>\n  <li>A → B → C</li>\n  <li>A → C → B</li>\n  <li>B → C → A</li>\n  <li>B → A → C</li>\n  <li>C → A → B</li>\n  <li>C → B → A</li>\n  </ul>\n</blockquote>\n\n<p>Well, actually there\'s less than that because some of these are equivalent (A → B → C and C → B → A are equivalent, for example, because they use the same roads, just in reverse).</p>\n\n<p>In actuality, there are 3 possibilities.</p>\n\n<blockquote>\n  <ul>\n  <li>Take this to 4 towns and you have (iirc) 12 possibilities.</li>\n  <li>With 5 it\'s 60.</li>\n  <li>6 becomes 360.</li>\n  </ul>\n</blockquote>\n\n<p>This is a function of a mathematical operation called a <strong>factorial</strong>.  Basically:</p>\n\n<blockquote>\n  <ul>\n  <li>5! = 5 × 4 × 3 × 2 × 1 = 120</li>\n  <li>6! = 6 × 5 × 4 × 3 × 2 × 1 = 720</li>\n  <li>7! = 7 × 6 × 5 × 4 × 3 × 2 × 1 = 5040</li>\n  <li>…</li>\n  <li>25! = 25 × 24 × … × 2 × 1 = 15,511,210,043,330,985,984,000,000</li>\n  <li>…</li>\n  <li>50! = 50 × 49 × … × 2 × 1 = 3.04140932 × 10<sup>64</sup></li>\n  </ul>\n</blockquote>\n\n<p>So the Big-O of the Traveling Salesman problem is <strong>O(n!)</strong> or <strong>factorial or combinatorial complexity</strong>.</p>\n\n<p><strong>By the time you get to 200 towns there isn\'t enough time left in the universe to solve the problem with traditional computers.</strong></p>\n\n<p>Something to think about.</p>\n\n<h1>Polynomial Time</h1>\n\n<p>Another point I wanted to make a quick mention of is that any algorithm that has a complexity of <strong>O(n<sup>a</sup>)</strong> is said to have <strong>polynomial complexity</strong> or is solvable in <strong>polynomial time</strong>.</p>\n\n<p>O(n), O(n<sup>2</sup>) etc. are all polynomial time. Some problems cannot be solved in polynomial time. Certain things are used in the world because of this. <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" rel=\"noreferrer\">Public Key Cryptography</a> is a prime example. It is computationally hard to find two prime factors of a very large number. If it wasn\'t, we couldn\'t use the public key systems we use.</p>\n\n<p>Anyway, that\'s it for my (hopefully plain English) explanation of Big O (revised).</p>\n',1233141537,6643,487278),('<p>Look at the <a href=\"https://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess</a> module in the standard library:</p>\n\n<pre><code>import subprocess\nsubprocess.run([\"ls\", \"-l\"])\n</code></pre>\n\n<p>The advantage of <code>subprocess</code> vs. <code>system</code> is that it is more flexible (you can get the <code>stdout</code>, <code>stderr</code>, the \"real\" status code, better error handling, etc...).</p>\n\n<p>The <a href=\"https://docs.python.org/library/os.html#os.system\" rel=\"noreferrer\">official documentation</a> recommends the <code>subprocess</code> module over the alternative <code>os.system()</code>:</p>\n\n<blockquote>\n  <p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [<a href=\"https://docs.python.org/library/os.html#os.system\" rel=\"noreferrer\"><code>os.system()</code></a>].</p>\n</blockquote>\n\n<p>The <a href=\"https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module\" rel=\"noreferrer\">Replacing Older Functions with the subprocess Module</a> section in the <code>subprocess</code> documentation may have some helpful recipes.</p>\n\n<p>For versions of Python before 3.5, use <code>call</code>:</p>\n\n<pre><code>import subprocess\nsubprocess.call([\"ls\", \"-l\"])\n</code></pre>\n',1221701975,4723,89243),('<h2>Short answer - de facto limit of 2000 characters</h2>\n\n<p>If you keep URLs under 2000 characters, they\'ll work in virtually any combination of client and server software.</p>\n\n<p>If you are targeting particular browsers, see below for more details specific limits.</p>\n\n<h2>Longer answer - first, the standards...</h2>\n\n<p><a href=\"http://www.faqs.org/rfcs/rfc2616.html\" rel=\"noreferrer\">RFC 2616</a> (Hypertext Transfer Protocol HTTP/1.1) section 3.2.1 says</p>\n\n<blockquote>\n  <p>The HTTP protocol does not place\n  any a priori limit on the length of \n  a URI. Servers MUST be able to handle\n  the URI of any resource they    serve,\n  and SHOULD be able to handle URIs of\n  unbounded length if they    provide\n  GET-based forms that could generate\n  such URIs. A server    SHOULD return\n  414 (Request-URI Too Long) status if a\n  URI is longer    than the server can\n  handle (see section 10.4.15).</p>\n</blockquote>\n\n<p>That RFC has been obsoleted by <a href=\"http://tools.ietf.org/html/rfc7230#section-3.1.1\" rel=\"noreferrer\">RFC7230</a> which is a refresh of the HTTP/1.1 specification. It contains similar language, but also goes on to suggest this:</p>\n\n<blockquote>\n  <p>Various ad hoc limitations on request-line length are found in \n  practice. It is RECOMMENDED that all HTTP senders and recipients \n  support, at a minimum, request-line lengths of 8000 octets.</p>\n</blockquote>\n\n<h2>...and the reality</h2>\n\n<p>That\'s what the <em>standards</em> say. For the <em>reality</em>, there was an article on <a href=\"https://web.archive.org/web/20190902193246/https://boutell.com/newfaq/misc/urllength.html\" rel=\"noreferrer\">boutell.com</a> (link goes to Internet Archive backup) that discussed what individual browser and server implementations will support. The executive summary is:</p>\n\n<blockquote>\n  <p>Extremely long URLs are usually a\n  mistake. <strong>URLs over 2,000 characters\n  will not work in the most popular web\n  browsers.</strong> Don\'t use them if you intend\n  your site to work for the majority of\n  Internet users.</p>\n</blockquote>\n\n<p>(Note: this is a quote from an article written in <em>2006</em>, but in 2015 IE\'s declining usage means that longer URLs <em>do</em> work for the majority. However, IE still has the limitation...)</p>\n\n<h2>Internet Explorer\'s limitations...</h2>\n\n<p><a href=\"https://support.microsoft.com/en-us/kb/208427\" rel=\"noreferrer\">IE8\'s maximum URL length is 2083 chars</a>, and it seems <a href=\"https://stackoverflow.com/questions/3721034/how-long-an-url-can-internet-explorer-9-take\">IE9 has a similar limit</a>. </p>\n\n<p>I\'ve tested IE10 and the address bar will only accept 2083 chars. You can <em>click</em> a URL which is longer than this, but the address bar will still only show 2083 characters of this link.</p>\n\n<p>There\'s a <a href=\"https://blogs.msdn.microsoft.com/ieinternals/2014/08/13/url-length-limits/\" rel=\"noreferrer\">nice writeup on the IE Internals blog</a> which goes into some of the background to this. </p>\n\n<p>There are mixed reports IE11 supports longer URLS - see comments below. Given some people report issues, the general advice still stands.</p>\n\n<h2>Search engines like URLs &lt; 2048 chars...</h2>\n\n<p>Be aware that the <a href=\"http://www.sitemaps.org/protocol.html\" rel=\"noreferrer\">sitemaps protocol</a>, which allows a site to inform search engines about available pages, has a limit of 2048 characters in a URL. If you intend to use sitemaps, a limit has been decided for you! (see <a href=\"https://stackoverflow.com/a/7056886/6521\">Calin-Andrei Burloiu\'s answer</a> below) </p>\n\n<p>There\'s also some research from 2010 into the <a href=\"https://web.archive.org/web/20111110004006/http://www.seomofo.com/experiments/title-and-h1-of-this-post-but-for-the-sake-of-keyword-prominence-stuffing-im-going-to-mention-it-again-using-various-synonyms-stemmed-variations-and-of-coursea-big-fat-prominent-font-size-heres-the-stumper-that-stumped-me-what-is-the-max-number-of-chars-in-a-url-that-google-is-willing-to-crawl-and-index-for-whatever-reason-i-thought-i-had-read-somewhere-that-googles-limit-on-urls-was-255-characters-but-that-turned-out-to-be-wrong-so-maybe-i-just-made-that-number-up-the-best-answer-i-could-find-was-this-quote-from-googles-webmaster-trends-analyst-john-mueller-we-can-certainly-crawl-and-index-urls-over-1000-characters-long-but-that-doesnt-mean-that-its-a-good-practice-the-setup-for-this-experiment-is-going-to-be-pretty-simple-im-going-to-edit-the-permalink-of-this-post-to-be-really-really-long-then-im-going-to-see-if-google-indexes-it-i-might-even-see-if-yahoo-and-bing-index-iteven-though-no-one-really-cares-what-those-assholes-are-doing-url-character-limits-unrelated-to-google-the-question-now-is-how-many-characters-should-i-make-the-url-of-this-post-there-are-a-couple-of-sources-ill-reference-to-help-me-make-this-decision-the-first-is-this-quote-from-the-microsoft-support-pages-microsoft-internet-explorer-has-a-maximum-uniform-resource-locator-url-length-of-2083-characters-internet-explorer-also-has-a-maximum-path-length-of-2048-characters-this-limit-applies-to-both-post-request-and-get-request-urls-the-second-source-ill-cite-is-the-http-11-protocol-which-says-the-http-protocol-does-not-place-any-a-priori-limit-on-the-length-of-a-uri-servers-must-be-able-to-handle-the-uri-of-any-resource-they-serve-and-should-be-able-to-handle-uris-of-unbounded-length-if-they-provide-get-based-forms-that-could-generate-such-uris-a-server-should-return-414-request-uri-too-long-status-if-a-uri-is-longer.html\" rel=\"noreferrer\">maximum URL length that search engines will crawl and index</a>. They found the limit was 2047 chars, which appears allied to the sitemap protocol spec. However, they also found the Google <a href=\"http://en.wikipedia.org/wiki/Search_engine_results_page\" rel=\"noreferrer\">SERP</a> tool wouldn\'t cope with URLs longer than 1855 chars.</p>\n\n<h2>CDNs have limits</h2>\n\n<p>CDNs also impose limits on URI length, and will return a <code>414 Too long request</code> when these limits are reached, for example:</p>\n\n<ul>\n<li><a href=\"https://docs.fastly.com/en/guides/resource-limits#request-and-header-limits\" rel=\"noreferrer\">Fastly</a> 8Kb</li>\n<li><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-general\" rel=\"noreferrer\">CloudFront</a> 8Kb</li>\n<li><a href=\"https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error#code_414\" rel=\"noreferrer\">CloudFlare</a> 32Kb</li>\n</ul>\n\n<p>(credit to timrs2998 for providing that info in the comments)</p>\n\n<h2>Additional browser roundup</h2>\n\n<p>I tested the following against an Apache 2.4 server configured with a very large <a href=\"https://httpd.apache.org/docs/current/mod/core.html#limitrequestline\" rel=\"noreferrer\">LimitRequestLine</a> and <a href=\"https://httpd.apache.org/docs/current/mod/core.html#limitrequestfieldsize\" rel=\"noreferrer\">LimitRequestFieldSize</a>. </p>\n\n<pre><code>Browser     Address bar   document.location\n                          or anchor tag\n------------------------------------------\nChrome          32779           &gt;64k\nAndroid          8192           &gt;64k\nFirefox          &gt;64k           &gt;64k\nSafari           &gt;64k           &gt;64k\nIE11             2047           5120\nEdge 16          2047          10240\n</code></pre>\n\n<p>See also <a href=\"https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers/31250734#31250734\">this answer</a> from Matas Vaitkevicius below.</p>\n\n<h2>Is this information up to date?</h2>\n\n<p>This is a popular question, and as the original research is ~12 years old I\'ll try to keep it up to date: As of <strong>Jan 2020</strong>, the advice still stands. Even though IE11 may possibly accept longer URLs, the ubiquity of older IE installations plus the search engine limitations mean staying under 2000 chars is the best general policy.</p>\n',1231258938,4975,417184),('<p>Another quicker way is:</p>\n\n<pre><code>git stash save --keep-index --include-untracked\n</code></pre>\n\n<p>You don\'t need to include <code>--include-untracked</code> if you don\'t want to be thorough about it.</p>\n\n<p>After that, you can drop that stash with a <code>git stash drop</code> command if you like.</p>\n',1220989164,2704,52719),('<blockquote>\n<h2>How can I merge two Python dictionaries in a single expression?</h2>\n</blockquote>\n<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>\n<ul>\n<li><p>In Python 3.5 or greater:</p>\n<pre><code>  z = {**x, **y}\n</code></pre>\n</li>\n<li><p>In Python 2, (or 3.4 or lower) write a function:</p>\n<pre><code>  def merge_two_dicts(x, y):\n      z = x.copy()   # start with x\'s keys and values\n      z.update(y)    # modifies z with y\'s keys and values &amp; returns None\n      return z\n</code></pre>\n<p>and now:</p>\n<pre><code>  z = merge_two_dicts(x, y)\n</code></pre>\n</li>\n<li><p>In Python 3.9.0a4 or greater (final release date approx October 2020): <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"noreferrer\">PEP-584</a>, <a href=\"https://bugs.python.org/issue36144\" rel=\"noreferrer\">discussed here</a>, was implemented to further simplify this:</p>\n<pre><code>  z = x | y          # NOTE: 3.9+ ONLY\n</code></pre>\n</li>\n</ul>\n<h3>Explanation</h3>\n<p>Say you have two dictionaries and you want to merge them into a new dict without altering the original dictionaries:</p>\n<pre><code>x = {\'a\': 1, \'b\': 2}\ny = {\'b\': 3, \'c\': 4}\n</code></pre>\n<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dictionary\'s values overwriting those from the first.</p>\n<pre><code>&gt;&gt;&gt; z\n{\'a\': 1, \'b\': 3, \'c\': 4}\n</code></pre>\n<p>A new syntax for this, proposed in <a href=\"https://www.python.org/dev/peps/pep-0448\" rel=\"noreferrer\">PEP 448</a> and <a href=\"https://mail.python.org/pipermail/python-dev/2015-February/138564.html\" rel=\"noreferrer\">available as of Python 3.5</a>, is</p>\n<pre><code>z = {**x, **y}\n</code></pre>\n<p>And it is indeed a single expression.</p>\n<p>Note that we can merge in with literal notation as well:</p>\n<pre><code>z = {**x, \'foo\': 1, \'bar\': 2, **y}\n</code></pre>\n<p>and now:</p>\n<pre><code>&gt;&gt;&gt; z\n{\'a\': 1, \'b\': 3, \'foo\': 1, \'bar\': 2, \'c\': 4}\n</code></pre>\n<p>It is now showing as implemented in the <a href=\"https://www.python.org/dev/peps/pep-0478/#features-for-3-5\" rel=\"noreferrer\">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href=\"https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations\" rel=\"noreferrer\">What\'s New in Python 3.5</a> document.</p>\n<p>However, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\n<pre><code>z = x.copy()\nz.update(y) # which returns None since it mutates z\n</code></pre>\n<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>\'s values, thus <code>\'b\'</code> will point to <code>3</code> in our final result.</p>\n<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>\n<p>If you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while correct approach is to put it in a function:</p>\n<pre><code>def merge_two_dicts(x, y):\n    &quot;&quot;&quot;Given two dictionaries, merge them into a new dict as a shallow copy.&quot;&quot;&quot;\n    z = x.copy()\n    z.update(y)\n    return z\n</code></pre>\n<p>and then you have a single expression:</p>\n<pre><code>z = merge_two_dicts(x, y)\n</code></pre>\n<p>You can also make a function to merge an undefined number of dictionaries, from zero to a very large number:</p>\n<pre><code>def merge_dicts(*dict_args):\n    &quot;&quot;&quot;\n    Given any number of dictionaries, shallow copy and merge into a new dict,\n    precedence goes to key value pairs in latter dictionaries.\n    &quot;&quot;&quot;\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n</code></pre>\n<p>This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries <code>a</code> to <code>g</code>:</p>\n<pre><code>z = merge_dicts(a, b, c, d, e, f, g) \n</code></pre>\n<p>and key value pairs in <code>g</code> will take precedence over dictionaries <code>a</code> to <code>f</code>, and so on.</p>\n<h2>Critiques of Other Answers</h2>\n<p>Don\'t use what you see in the formerly accepted answer:</p>\n<pre><code>z = dict(x.items() + y.items())\n</code></pre>\n<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you\'re adding two <code>dict_items</code> objects together, not two lists -</p>\n<pre><code>&gt;&gt;&gt; c = dict(a.items() + b.items())\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: \'dict_items\' and \'dict_items\'\n</code></pre>\n<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>\n<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don\'t do this:</strong></p>\n<pre><code>&gt;&gt;&gt; c = dict(a.items() | b.items())\n</code></pre>\n<p>This example demonstrates what happens when values are unhashable:</p>\n<pre><code>&gt;&gt;&gt; x = {\'a\': []}\n&gt;&gt;&gt; y = {\'b\': []}\n&gt;&gt;&gt; dict(x.items() | y.items())\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unhashable type: \'list\'\n</code></pre>\n<p>Here\'s an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\n<pre><code>&gt;&gt;&gt; x = {\'a\': 2}\n&gt;&gt;&gt; y = {\'a\': 1}\n&gt;&gt;&gt; dict(x.items() | y.items())\n{\'a\': 2}\n</code></pre>\n<p>Another hack you should not use:</p>\n<pre><code>z = dict(x, **y)\n</code></pre>\n<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it\'s difficult to read, it\'s not the intended usage, and so it is not Pythonic.</p>\n<p>Here\'s an example of the usage being <a href=\"https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff\" rel=\"noreferrer\">remediated in django</a>.</p>\n<p>Dictionaries are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\n<pre><code>&gt;&gt;&gt; c = dict(a, **b)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: keyword arguments must be strings\n</code></pre>\n<p>From the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\n<blockquote>\n<p>I am fine with\ndeclaring dict({}, **{1:3}) illegal, since after all it is abuse of\nthe ** mechanism.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call\nx.update(y) and return x&quot;. Personally I find it more despicable than\ncool.</p>\n</blockquote>\n<p>It is my understanding (as well as the understanding of the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099485.html\" rel=\"noreferrer\">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dictionaries for readability purposes, e.g.:</p>\n<pre><code>dict(a=1, b=10, c=11)\n</code></pre>\n<p>instead of</p>\n<pre><code>{\'a\': 1, \'b\': 10, \'c\': 11}\n</code></pre>\n<h2>Response to comments</h2>\n<blockquote>\n<p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dictionaries as keywords.</p>\n</blockquote>\n<p>Again, it doesn\'t work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\n<pre><code>&gt;&gt;&gt; foo(**{(\'a\', \'b\'): None})\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: foo() keywords must be strings\n&gt;&gt;&gt; dict(**{(\'a\', \'b\'): None})\n{(\'a\', \'b\'): None}\n</code></pre>\n<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\n<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\n<p>More comments:</p>\n<blockquote>\n<p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts.</p>\n</blockquote>\n<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we\'re actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>\n<blockquote>\n<p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word &quot;merging&quot; these answers describe &quot;updating one dict with another&quot;, and not merging.</p>\n</blockquote>\n<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <em><strong>two</strong></em> dictionaries, with the first\'s values being overwritten by the second\'s - in a single expression.</p>\n<p>Assuming two dictionary of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>\n<pre><code>from copy import deepcopy\n\ndef dict_of_dicts_merge(x, y):\n    z = {}\n    overlapping_keys = x.keys() &amp; y.keys()\n    for key in overlapping_keys:\n        z[key] = dict_of_dicts_merge(x[key], y[key])\n    for key in x.keys() - overlapping_keys:\n        z[key] = deepcopy(x[key])\n    for key in y.keys() - overlapping_keys:\n        z[key] = deepcopy(y[key])\n    return z\n</code></pre>\n<p>Usage:</p>\n<pre><code>&gt;&gt;&gt; x = {\'a\':{1:{}}, \'b\': {2:{}}}\n&gt;&gt;&gt; y = {\'b\':{10:{}}, \'c\': {11:{}}}\n&gt;&gt;&gt; dict_of_dicts_merge(x, y)\n{\'b\': {2: {}, 10: {}}, \'a\': {1: {}}, \'c\': {11: {}}}\n</code></pre>\n<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=\"https://stackoverflow.com/a/24088493/541136\">my answer to the canonical question on a &quot;Dictionaries of dictionaries merge&quot;</a>.</p>\n<h2>Less Performant But Correct Ad-hocs</h2>\n<p>These approaches are less performant, but they will provide correct behavior.\nThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dictionaries have precedence)</p>\n<p>You can also chain the dictionaries manually inside a <a href=\"https://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dict comprehension</a>:</p>\n<pre><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n</code></pre>\n<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\n<pre><code>dict((k, v) for d in dicts for k, v in d.items())\n</code></pre>\n<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\n<pre><code>import itertools\nz = dict(itertools.chain(x.iteritems(), y.iteritems()))\n</code></pre>\n<h2>Performance Analysis</h2>\n<p>I\'m only going to do the performance analysis of the usages known to behave correctly.</p>\n<pre><code>import timeit\n</code></pre>\n<p>The following is done on Ubuntu 14.04</p>\n<p>In Python 2.7 (system Python):</p>\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.5726828575134277\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.163769006729126\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\n1.1614501476287842\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n2.2345519065856934\n</code></pre>\n<p>In Python 3.5 (deadsnakes PPA):</p>\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))\n0.4094954460160807\n&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.7881555100320838\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.4525277839857154\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\n2.3143140770262107\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n3.2069112799945287\n</code></pre>\n<h2>Resources on Dictionaries</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302\">My explanation of Python\'s <strong>dictionary implementation</strong>, updated for 3.6.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535\">Answer on how to add new keys to a dictionary</a></li>\n<li><a href=\"https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067\">Mapping two lists into a dictionary</a></li>\n<li>The official Python <a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">docs on dictionaries</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\" rel=\"noreferrer\">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>\n<li><a href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" rel=\"noreferrer\">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>\n</ul>\n',1415657508,5803,26853961),('<p>Try: <code>git mergetool</code></p>\n\n<p>It opens a GUI that steps you through each conflict, and you get to choose how to merge.  Sometimes it requires a bit of hand editing afterwards, but usually it\'s enough by itself.  It is much better than doing the whole thing by hand certainly.</p>\n\n<p>As per @JoshGlover comment:</p>\n\n<p>The command </p>\n\n<blockquote>\n  <p>doesn\'t necessarily open a GUI unless you install one. Running <code>git\n  mergetool</code> for me resulted in <code>vimdiff</code> being used. You can install\n  one of the following tools to use it instead: <code>meld</code>, <code>opendiff</code>,\n  <code>kdiff3</code>, <code>tkdiff</code>, <code>xxdiff</code>, <code>tortoisemerge</code>, <code>gvimdiff</code>, <code>diffuse</code>,\n  <code>ecmerge</code>, <code>p4merge</code>, <code>araxis</code>, <code>vimdiff</code>, <code>emerge</code>.</p>\n</blockquote>\n\n<p>Below is the sample procedure to use <code>vimdiff</code> for resolve merge conflicts. Based on <a href=\"http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor\" rel=\"noreferrer\">this link</a></p>\n\n<p><strong>Step 1</strong>: Run following commands in your terminal</p>\n\n<pre><code>git config merge.tool vimdiff\ngit config merge.conflictstyle diff3\ngit config mergetool.prompt false\n</code></pre>\n\n<p>This will set vimdiff as the default merge tool.</p>\n\n<p><strong>Step 2</strong>: Run following command in terminal</p>\n\n<pre><code>git mergetool\n</code></pre>\n\n<p><strong>Step 3</strong>: You will see a vimdiff display in following format </p>\n\n<pre><code>  ╔═══════╦══════╦════════╗\n  ║       ║      ║        ║\n  ║ LOCAL ║ BASE ║ REMOTE ║\n  ║       ║      ║        ║\n  ╠═══════╩══════╩════════╣\n  ║                       ║\n  ║        MERGED         ║\n  ║                       ║\n  ╚═══════════════════════╝\n</code></pre>\n\n<p>These 4 views are </p>\n\n<blockquote>\n  <p>LOCAL – this is file from the current branch  </p>\n  \n  <p>BASE – common ancestor, how file looked before both changes </p>\n  \n  <p>REMOTE – file you are merging into your branch </p>\n  \n  <p>MERGED – merge result, this is what gets saved in the repo</p>\n</blockquote>\n\n<p>You can navigate among these views using <kbd>ctrl</kbd>+<kbd>w</kbd>. You can directly reach MERGED view using <kbd>ctrl</kbd>+<kbd>w</kbd> followed by <kbd>j</kbd>.</p>\n\n<p>More info about vimdiff navigation <a href=\"https://stackoverflow.com/questions/4556184/vim-move-window-left-right\">here</a> and <a href=\"https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool\">here</a></p>\n\n<p><strong>Step 4</strong>. You could edit the MERGED view the following way </p>\n\n<p>If you want to get changes from REMOTE</p>\n\n<pre><code>:diffg RE  \n</code></pre>\n\n<p>If you want to get changes from BASE</p>\n\n<pre><code>:diffg BA  \n</code></pre>\n\n<p>If you want to get changes from LOCAL</p>\n\n<pre><code>:diffg LO \n</code></pre>\n\n<p><strong>Step 5</strong>. Save, Exit, Commit and Clean up</p>\n\n<p><code>:wqa</code> save and exit from vi</p>\n\n<p><code>git commit -m \"message\"</code></p>\n\n<p><code>git clean</code> Remove extra files (e.g. *.orig) created by diff tool.</p>\n',1222969825,2925,163659),('\n\n<p><strong>TL;DR</strong></p>\n\n<ul>\n<li>Don\'t use <code>for-in</code> unless you use it with safeguards or are at least aware of why it might bite you.</li>\n<li><p>Your best bets are usually</p>\n\n<ul>\n<li>a <code>for-of</code> loop (ES2015+ only),</li>\n<li><code>Array#forEach</code> (<a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>MDN</code></a>) (or its relatives <code>some</code> and such) (ES5+ only),</li>\n<li>a simple old-fashioned <code>for</code> loop,</li>\n<li>or <code>for-in</code> with safeguards.</li>\n</ul></li>\n</ul>\n\n<p>But there\'s <strong>lots</strong> more to explore, read on...</p>\n\n<hr>\n\n<p>JavaScript has powerful semantics for looping through arrays and array-like objects. I\'ve split the answer into two parts: Options for genuine arrays, and options for things that are just array-<em>like</em>, such as the <code>arguments</code> object, other iterable objects (ES2015+), DOM collections, and so on.</p>\n\n<p>I\'ll quickly note that you can use the ES2015 options <em>now</em>, even on ES5 engines, by <em>transpiling</em> ES2015 to ES5. Search for \"ES2015 transpiling\" / \"ES6 transpiling\" for more...</p>\n\n<p>Okay, let\'s look at our options:</p>\n\n<h2>For Actual Arrays</h2>\n\n<p>You have three options in <a href=\"http://ecma-international.org/ecma-262/5.1/\" rel=\"noreferrer\">ECMAScript&nbsp;5</a> (\"ES5\"), the version most broadly supported at the moment, and two more added in <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ECMAScript&nbsp;2015</a> (\"ES2015\", \"ES6\"):</p>\n\n<ol>\n<li>Use <code>forEach</code> and related (ES5+)</li>\n<li>Use a simple <code>for</code> loop</li>\n<li>Use <code>for-in</code> <em>correctly</em></li>\n<li>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</li>\n<li>Use an iterator explicitly (ES2015+)</li>\n</ol>\n\n<p>Details:</p>\n\n<h3>1. Use <code>forEach</code> and related</h3>\n\n<p>In any vaguely-modern environment (so, not IE8) where you have access to the <code>Array</code> features added by ES5 (directly or using polyfills), you can use <code>forEach</code> (<a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>MDN</code></a>):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [\"a\", \"b\", \"c\"];\r\na.forEach(function(entry) {\r\n    console.log(entry);\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>forEach</code> accepts a callback function and, optionally, a value to use as <code>this</code> when calling that callback (not used above). The callback is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the callback is called with three: The value of each entry, the index of that entry, and a reference to the array you\'re iterating over (in case your function doesn\'t already have it handy).</p>\n\n<p>Unless you\'re supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September&nbsp;2016), you can happily use <code>forEach</code> in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling <code>forEach</code> is easily done (search for \"es5 shim\" for several options).</p>\n\n<p><code>forEach</code> has the benefit that you don\'t have to declare indexing and value variables in the containing scope, as they\'re supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>\n\n<p>If you\'re worried about the runtime cost of making a function call for each array entry, don\'t be; <a href=\"http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html\" rel=\"noreferrer\">details</a>.</p>\n\n<p>Additionally, <code>forEach</code> is the \"loop through them all\" function, but ES5 defined several other useful \"work your way through the array and do things\" functions, including:</p>\n\n<ul>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.every\" rel=\"noreferrer\"><code>every</code></a> (stops looping the first time the callback returns <code>false</code> or something falsey)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.some\" rel=\"noreferrer\"><code>some</code></a> (stops looping the first time the callback returns <code>true</code> or something truthy)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.filter\" rel=\"noreferrer\"><code>filter</code></a> (creates a new array including elements where the filter function returns <code>true</code> and omitting the ones where it returns <code>false</code>)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.map\" rel=\"noreferrer\"><code>map</code></a> (creates a new array from the values returned by the callback)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.reduce\" rel=\"noreferrer\"><code>reduce</code></a> (builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\" rel=\"noreferrer\"><code>reduceRight</code></a> (like <code>reduce</code>, but works in descending rather than ascending order)</li>\n</ul>\n\n<h3>2. Use a simple <code>for</code> loop</h3>\n\n<p>Sometimes the old ways are the best:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var index;\r\nvar a = [\"a\", \"b\", \"c\"];\r\nfor (index = 0; index &lt; a.length; ++index) {\r\n    console.log(a[index]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If the length of the array won\'t change during the loop, and it\'s in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a <strong><em>tiny</em></strong> bit faster:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var index, len;\r\nvar a = [\"a\", \"b\", \"c\"];\r\nfor (index = 0, len = a.length; index &lt; len; ++index) {\r\n    console.log(a[index]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And/or counting backward:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var index;\r\nvar a = [\"a\", \"b\", \"c\"];\r\nfor (index = a.length - 1; index &gt;= 0; --index) {\r\n    console.log(a[index]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>But with modern JavaScript engines, it\'s rare you need to eke out that last bit of juice.</p>\n\n<p>In ES2015 and higher, you can make your index and value variables local to the <code>for</code> loop:</p>\n\n<pre><code>let a = [\"a\", \"b\", \"c\"];\nfor (let index = 0; index &lt; a.length; ++index) {\n    let value = a[index];\n    console.log(index, value);\n}\n//console.log(index);   // would cause \"ReferenceError: index is not defined\"\n//console.log(value);   // would cause \"ReferenceError: value is not defined\"\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let a = [\"a\", \"b\", \"c\"];\r\nfor (let index = 0; index &lt; a.length; ++index) {\r\n    let value = a[index];\r\n    console.log(index, value);\r\n}\r\ntry {\r\n    console.log(index);\r\n} catch (e) {\r\n    console.error(e);   // \"ReferenceError: index is not defined\"\r\n}\r\ntry {\r\n    console.log(value);\r\n} catch (e) {\r\n    console.error(e);   // \"ReferenceError: value is not defined\"\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And when you do that, not just <code>value</code> but also <code>index</code> is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the <code>index</code> (and <code>value</code>) created for that specific iteration:</p>\n\n<pre><code>let divs = document.querySelectorAll(\"div\");\nfor (let index = 0; index &lt; divs.length; ++index) {\n    divs[index].addEventListener(\'click\', e =&gt; {\n        console.log(\"Index is: \" + index);\n    });\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let divs = document.querySelectorAll(\"div\");\r\nfor (let index = 0; index &lt; divs.length; ++index) {\r\n    divs[index].addEventListener(\'click\', e =&gt; {\r\n        console.log(\"Index is: \" + index);\r\n    });\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div&gt;zero&lt;/div&gt;\r\n&lt;div&gt;one&lt;/div&gt;\r\n&lt;div&gt;two&lt;/div&gt;\r\n&lt;div&gt;three&lt;/div&gt;\r\n&lt;div&gt;four&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If you had five divs, you\'d get \"Index is: 0\" if you clicked the first and \"Index is: 4\" if you clicked the last. This does <strong>not</strong> work if you use <code>var</code> instead of <code>let</code>.</p>\n\n<h3>3. Use <code>for-in</code> <em>correctly</em></h3>\n\n<p>You\'ll get people telling you to use <code>for-in</code>, but <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\" rel=\"noreferrer\">that\'s not what <code>for-in</code> is for</a>. <code>for-in</code> loops through the <em>enumerable properties of an object</em>, not the indexes of an array. <strong>The order is not guaranteed</strong>, not even in ES2015 (ES6). ES2015+ does define an order to object properties (via <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\" rel=\"noreferrer\"><code>[[OwnPropertyKeys]]</code></a>, <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\" rel=\"noreferrer\"><code>[[Enumerate]]</code></a>, and things that use them like <a href=\"https://tc39.github.io/ecma262/#sec-object.getownpropertynames\" rel=\"noreferrer\"><code>Object.getOwnPropertyKeys</code></a>), but it didn\'t define that <code>for-in</code> would follow that order; ES2020 did, though. (Details in <a href=\"https://stackoverflow.com/a/30919039/157247\">this other answer</a>.)</p>\n\n<p>The only real use cases for <code>for-in</code> on an array are:</p>\n\n<ul>\n<li>It\'s a <a href=\"http://en.wikipedia.org/wiki/Sparse_array\" rel=\"noreferrer\"><em>sparse</em> arrays</a> with <strong>massive</strong> gaps in it, or</li>\n<li>You\'re using non-element properties and you want to include them in the loop</li>\n</ul>\n\n<p>Looking only at that first example: You can use <code>for-in</code> to visit those sparse array elements if you use appropriate safeguards:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// `a` is a sparse array\r\nvar key;\r\nvar a = [];\r\na[0] = \"a\";\r\na[10] = \"b\";\r\na[10000] = \"c\";\r\nfor (key in a) {\r\n    if (a.hasOwnProperty(key)  &amp;&amp;        // These checks are\r\n        /^0$|^[1-9]\\d*$/.test(key) &amp;&amp;    // explained\r\n        key &lt;= 4294967294                // below\r\n        ) {\r\n        console.log(a[key]);\r\n    }\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Note the three checks:</p>\n\n<ol>\n<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype), and</p></li>\n<li><p>That the key is all decimal digits (e.g., normal string form, not scientific notation), and</p></li>\n<li><p>That the key\'s value when coerced to a number is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It\'s part of the definition of an array index <a href=\"https://tc39.github.io/ecma262/#array-index\" rel=\"noreferrer\">in the specification</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it\'s 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array\'s <code>length</code> can have. (E.g., an array\'s length fits in a 32-bit unsigned integer.) <em>(Props to RobG for pointing out in a comment <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\" rel=\"noreferrer\">on my blog post</a> that my previous test wasn\'t quite right.)</em></p></li>\n</ol>\n\n<p>You wouldn\'t do that in inline code, of course. You\'d write a utility function. Perhaps:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Utility function for antiquated environments without `forEach`\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar rexNum = /^0$|^[1-9]\\d*$/;\r\nfunction sparseEach(array, callback, thisArg) {\r\n    var index;\r\n    for (var key in array) {\r\n        index = +key;\r\n        if (hasOwn.call(a, key) &amp;&amp;\r\n            rexNum.test(key) &amp;&amp;\r\n            index &lt;= 4294967294\r\n            ) {\r\n            callback.call(thisArg, array[key], index, array);\r\n        }\r\n    }\r\n}\r\n\r\nvar a = [];\r\na[5] = \"five\";\r\na[10] = \"ten\";\r\na[100000] = \"one hundred thousand\";\r\na.b = \"bee\";\r\n\r\nsparseEach(a, function(value, index) {\r\n    console.log(\"Value at \" + index + \" is \" + value);\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>4. Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</h3>\n\n<p>ES2015 added <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\"><em>iterators</em></a> to JavaScript. The easiest way to use iterators is the new <code>for-of</code> statement. It looks like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = [\"a\", \"b\", \"c\"];\r\nfor (const val of a) {\r\n    console.log(val);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Under the covers, that gets an <em>iterator</em> from the array and loops through it, getting the values from it. This doesn\'t have the issue that using <code>for-in</code> has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their <em>entries</em> (not their properties). Unlike <code>for-in</code> in ES5, the order in which the entries are visited is the numeric order of their indexes.</p>\n\n<h3>5. Use an iterator explicitly (ES2015+)</h3>\n\n<p>Sometimes, you might want to use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">iterator</a> <em>explicitly</em>. You can do that, too, although it\'s a lot clunkier than <code>for-of</code>. It looks like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = [\"a\", \"b\", \"c\"];\r\nconst it = a.values();\r\nlet entry;\r\nwhile (!(entry = it.next()).done) {\r\n    console.log(entry.value);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The iterator is an object matching the Iterator definition in the specification. Its <code>next</code> method returns a new <em>result object</em> each time you call it. The result object has a property, <code>done</code>, telling us whether it\'s done, and a property <code>value</code> with the value for that iteration. (<code>done</code> is optional if it would be <code>false</code>, <code>value</code> is optional if it would be <code>undefined</code>.)</p>\n\n<p>The meaning of <code>value</code> varies depending on the iterator; arrays support (at least) three functions that return iterators:</p>\n\n<ul>\n<li><code>values()</code>: This is the one I used above. It returns an iterator where each <code>value</code> is the array entry for that iteration (<code>\"a\"</code>, <code>\"b\"</code>, and <code>\"c\"</code> in the example earlier).</li>\n<li><code>keys()</code>: Returns an iterator where each <code>value</code> is the key for that iteration (so for our <code>a</code> above, that would be <code>\"0\"</code>, then <code>\"1\"</code>, then <code>\"2\"</code>).</li>\n<li><code>entries()</code>: Returns an iterator where each <code>value</code> is an array in the form <code>[key, value]</code> for that iteration.</li>\n</ul>\n\n<h2>For Array-Like Objects</h2>\n\n<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with numeric names: <code>NodeList</code> instances, the <code>arguments</code> object, etc. How do we loop through their contents?</p>\n\n<h3>Use any of the options above for arrays</h3>\n\n<p>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</p>\n\n<ol>\n<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>\n\n<p>The various functions on <code>Array.prototype</code> are \"intentionally generic\" and can usually be used on array-like objects via <a href=\"https://tc39.github.io/ecma262/#sec-function.prototype.call\" rel=\"noreferrer\"><code>Function#call</code></a> or <a href=\"https://tc39.github.io/ecma262/#sec-function.prototype.apply\" rel=\"noreferrer\"><code>Function#apply</code></a>. (See the <em>Caveat for host-provided objects</em> at the end of this answer, but it\'s a rare issue.)</p>\n\n<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>\'s <code>childNodes</code> property. You\'d do this:</p>\n\n<pre><code>Array.prototype.forEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre>\n\n<p>If you\'re going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>\n\n<pre><code>// (This is all presumably in some scoping function)\nvar forEach = Array.prototype.forEach;\n\n// Then later...\nforEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre></li>\n<li><p><strong>Use a simple <code>for</code> loop</strong></p>\n\n<p>Obviously, a simple <code>for</code> loop applies to array-like objects.</p></li>\n<li><p><strong>Use <code>for-in</code> <em>correctly</em></strong></p>\n\n<p><code>for-in</code> with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</p></li>\n<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</strong></p>\n\n<p><code>for-of</code> uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">iterator</a> provided by the object (if any). That includes host-provided objects. For instance, the specification for the <code>NodeList</code> from <code>querySelectorAll</code> was updated to support iteration. The spec for the <code>HTMLCollection</code> from <code>getElementsByTagName</code> was not.</p></li>\n<li><p><strong>Use an iterator explicitly (ES2015+)</strong></p>\n\n<p>See #4.</p></li>\n</ol>\n\n<h3>Create a true array</h3>\n\n<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</p>\n\n<ol>\n<li><p><strong>Use the <code>slice</code> method of arrays</strong></p>\n\n<p>We can use the <a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.slice\" rel=\"noreferrer\"><code>slice</code></a> method of arrays, which like the other methods mentioned above is \"intentionally generic\" and so can be used with array-like objects, like this:</p>\n\n<pre><code>var trueArray = Array.prototype.slice.call(arrayLikeObject);\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>\n\n<pre><code>var divs = Array.prototype.slice.call(document.querySelectorAll(\"div\"));\n</code></pre>\n\n<p>See the <em>Caveat for host-provided objects</em> below. In particular, note that this will fail in IE8 and earlier, which don\'t let you use host-provided objects as <code>this</code> like that.</p></li>\n<li><p><strong>Use spread syntax (<code>...</code>)</strong></p>\n\n<p>It\'s also possible to use ES2015\'s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">spread syntax</a> with JavaScript engines that support this feature. Like <code>for-of</code>, this uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">iterator</a> provided by the object (see #4 in the previous section):</p>\n\n<pre><code>var trueArray = [...iterableObject];\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, with spread syntax this becomes quite succinct:</p>\n\n<pre><code>var divs = [...document.querySelectorAll(\"div\")];\n</code></pre></li>\n<li><p><strong>Use <code>Array.from</code></strong></p>\n\n<p><code>Array.from</code> <a href=\"https://tc39.github.io/ecma262/#sec-array.from\" rel=\"noreferrer\">(spec)</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"noreferrer\">(MDN)</a> (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</p>\n\n<pre><code>var divs = Array.from(document.querySelectorAll(\"div\"));\n</code></pre>\n\n<p>Or if you wanted to get an array of the tag names of the elements with a given class, you\'d use the mapping function:</p>\n\n<pre><code>// Arrow function (ES2015):\nvar divs = Array.from(document.querySelectorAll(\".some-class\"), element =&gt; element.tagName);\n\n// Standard function (since `Array.from` can be shimmed):\nvar divs = Array.from(document.querySelectorAll(\".some-class\"), function(element) {\n    return element.tagName;\n});\n</code></pre></li>\n</ol>\n\n<h3>Caveat for host-provided objects</h3>\n\n<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. <strong>Most do behave properly</strong> (now), but it\'s important to test. The reason is that most of the <code>Array.prototype</code> methods you\'re likely to want to use rely on the host-provided object giving an honest answer to the abstract <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p\" rel=\"noreferrer\"><code>[[HasProperty]]</code></a> operation. As of this writing, browsers do a very good job of this, but the 5.1 spec did allow for the possibility a host-provided object may not be honest. It\'s in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\" rel=\"noreferrer\">§8.6.2</a>, several paragraphs below the big table near the beginning of that section), where it says:</p>\n\n<blockquote>\n  <p>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that <code>[[Get]]</code> and <code>[[Put]]</code> for a particular host object indeed fetch and store property values but <code>[[HasProperty]]</code> always generates <strong>false</strong>.</p>\n</blockquote>\n\n<p>(I couldn\'t find the equivalent verbiage in the ES2015 spec, but it\'s bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers [<code>NodeList</code> instances, for instance] <strong>do</strong> handle <code>[[HasProperty]]</code> correctly, but it\'s important to test.)</p>\n',1329486824,7047,9329476),('<p>Assuming you\'re joining on columns with no duplicates, which is a very common case:</p>\n\n<ul>\n<li><p>An inner join of A and B gives the result of A intersect B, i.e. the inner part of a <a href=\"http://en.wikipedia.org/wiki/Venn_diagram\" rel=\"noreferrer\">Venn diagram</a> intersection.</p></li>\n<li><p>An outer join of A and B gives the results of A union B, i.e. the outer parts of a Venn diagram union.</p></li>\n</ul>\n\n<p><strong>Examples</strong></p>\n\n<p>Suppose you have two tables, with a single column each, and data as follows:</p>\n\n<pre><code>A    B\n-    -\n1    3\n2    4\n3    5\n4    6\n</code></pre>\n\n<p>Note that (1,2) are unique to A, (3,4) are common, and (5,6) are unique to B.</p>\n\n<p><strong>Inner join</strong></p>\n\n<p>An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common.</p>\n\n<pre><code>select * from a INNER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a = b.b;\n\na | b\n--+--\n3 | 3\n4 | 4\n</code></pre>\n\n<p><strong>Left outer join</strong></p>\n\n<p>A left outer join will give all rows in A, plus any common rows in B.</p>\n\n<pre><code>select * from a LEFT OUTER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a = b.b(+);\n\na |  b\n--+-----\n1 | null\n2 | null\n3 |    3\n4 |    4\n</code></pre>\n\n<p><strong>Right outer join</strong></p>\n\n<p>A right outer join will give all rows in B, plus any common rows in A.</p>\n\n<pre><code>select * from a RIGHT OUTER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a(+) = b.b;\n\na    |  b\n-----+----\n3    |  3\n4    |  4\nnull |  5\nnull |  6\n</code></pre>\n\n<p><strong>Full outer join</strong></p>\n\n<p>A full outer join will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn\'t have a corresponding datum in B, then the B portion is null, and vice versa.</p>\n\n<pre><code>select * from a FULL OUTER JOIN b on a.a = b.b;\n\n a   |  b\n-----+-----\n   1 | null\n   2 | null\n   3 |    3\n   4 |    4\nnull |    6\nnull |    5\n</code></pre>\n',1220309974,6131,38578),('<h1> Tracking it down </h1>\n\n<p>At first I thought this was a coercion bug where <code>null</code> was getting coerced to <code>\"null\"</code> and a test of <code>\"null\" == null</code> was passing. It\'s not. <strong>I was close, but so very, very wrong. Sorry about that!</strong></p>\n\n<p>I\'ve since done lots of <a href=\"http://wonderfl.net/c/dd23/read\" rel=\"noreferrer\">fiddling on wonderfl.net</a> and tracing through the code in <code>mx.rpc.xml.*</code>. At line 1795 of <code>XMLEncoder</code> (in the 3.5 source), in <code>setValue</code>, all of the XMLEncoding boils down to </p>\n\n<pre><code>currentChild.appendChild(xmlSpecialCharsFilter(Object(value)));\n</code></pre>\n\n<p>which is essentially the same as:</p>\n\n<pre><code>currentChild.appendChild(\"null\");\n</code></pre>\n\n<p>This code, according to my original fiddle, returns an empty XML element. But why?</p>\n\n<p><H1> Cause </H1></p>\n\n<p>According to commenter Justin Mclean on bug report <a href=\"https://issues.apache.org/jira/browse/FLEX-33644\" rel=\"noreferrer\">FLEX-33664</a>, the following is the culprit (see last two tests in my <a href=\"http://wonderfl.net/c/dd23/read\" rel=\"noreferrer\">fiddle</a> which verify this):</p>\n\n<pre><code>var thisIsNotNull:XML = &lt;root&gt;null&lt;/root&gt;;\nif(thisIsNotNull == null){\n    // always branches here, as (thisIsNotNull == null) strangely returns true\n    // despite the fact that thisIsNotNull is a valid instance of type XML\n}\n</code></pre>\n\n<p>When <code>currentChild.appendChild</code> is passed the string <code>\"null\"</code>, it first converts it to a root XML element with text <code>null</code>, and then tests that element against the null literal. This is a weak equality test, so either the XML containing null is coerced to the null type, or the null type is coerced to a root xml element containing the string \"null\", and the test passes where it arguably should fail. One fix might be to always use <a href=\"http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/operators.html#strict_equality\" rel=\"noreferrer\">strict equality</a> tests when checking XML (or anything, really) for \"nullness.\"</p>\n\n<p><H1>Solution</H1>\nThe only reasonable workaround I can think of, short of fixing this bug in every damn version of ActionScript, is to test fields for \"null\" and <strong>escape them as <a href=\"https://stackoverflow.com/q/1239466/203705\">CDATA values</a>.</strong> </p>\n\n<p><strong>CDATA values are the most appropriate way to mutate an entire text value that would otherwise cause encoding/decoding problems.</strong> Hex encoding, for instance, is meant for individual characters. CDATA values are preferred when you\'re escaping the entire text of an element. The biggest reason for this is that it maintains human readability.</p>\n',1375378306,1111,18000768),('<h1>Scoping rules</h1>\n\n<p>Main difference is scoping rules. Variables declared by <code>var</code> keyword are scoped to the immediate function body (hence the function scope) while <code>let</code> variables are scoped to the immediate <em>enclosing</em> block denoted by <code>{ }</code> (hence the block scope).</p>\n\n<pre><code>function run() {\n  var foo = \"Foo\";\n  let bar = \"Bar\";\n\n  console.log(foo, bar);\n\n  {\n    let baz = \"Bazz\";\n    console.log(baz);\n  }\n\n  console.log(baz); // ReferenceError\n}\n\nrun();\n</code></pre>\n\n<p>The reason why <code>let</code> keyword was introduced to the language was function scope is confusing and was one of the main sources of bugs in JavaScript.</p>\n\n<p>Take a look at this example from <a href=\"https://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example\">another stackoverflow question</a>:</p>\n\n<pre><code>var funcs = [];\n// let\'s create 3 functions\nfor (var i = 0; i &lt; 3; i++) {\n  // and store them in funcs\n  funcs[i] = function() {\n    // each should log its value.\n    console.log(\"My value: \" + i);\n  };\n}\nfor (var j = 0; j &lt; 3; j++) {\n  // and now let\'s run each one to see\n  funcs[j]();\n}\n</code></pre>\n\n<p><code>My value: 3</code> was output to console each time <code>funcs[j]();</code> was invoked since anonymous functions were bound to the same variable.</p>\n\n<p>People had to create immediately invoked functions to capture correct value from the loops but that was also hairy.</p>\n\n<h1>Hoisting</h1>\n\n<p>While variables declared with <code>var</code> keyword are <a href=\"https://dev.to/godcrampy/the-secret-of-hoisting-in-javascript-egi\" rel=\"noreferrer\">hoisted</a> (initialized with <code>undefined</code> before the code is run) which means they are accessible in their enclosing scope even before they are declared:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function run() {\n  console.log(foo); // undefined\n  var foo = \"Foo\";\n  console.log(foo); // Foo\n}\n\nrun();\n</code></pre>\n\n<p><code>let</code> variables are not initialized until their definition is evaluated. Accessing them before the initialization results in a <code>ReferenceError</code>. Variable said to be in \"temporal dead zone\" from the start of the block until the initialization is processed.</p>\n\n<pre><code>function checkHoisting() {\n  console.log(foo); // ReferenceError\n  let foo = \"Foo\";\n  console.log(foo); // Foo\n}\n\ncheckHoisting();\n</code></pre>\n\n<h1>Creating global object property</h1>\n\n<p>At the top level, <code>let</code>, unlike <code>var</code>, does not create a property on the global object:</p>\n\n<pre><code>var foo = \"Foo\";  // globally scoped\nlet bar = \"Bar\"; // globally scoped\n\nconsole.log(window.foo); // Foo\nconsole.log(window.bar); // undefined\n</code></pre>\n\n<h1>Redeclaration</h1>\n\n<p>In strict mode, <code>var</code> will let you re-declare the same variable in the same scope while <code>let</code> raises a SyntaxError.</p>\n\n<pre><code>\'use strict\';\nvar foo = \"foo1\";\nvar foo = \"foo2\"; // No problem, \'foo\' is replaced.\n\nlet bar = \"bar1\";\nlet bar = \"bar2\"; // SyntaxError: Identifier \'bar\' has already been declared\n</code></pre>\n',1342061614,6140,11444416),('<p>This worked for me:</p>\n\n<pre><code>$get(\"isAgeSelected \").checked == true\n</code></pre>\n\n<p>Where <code>isAgeSelected</code> is the id of the control.</p>\n\n<p>Also, @karim79\'s <a href=\"https://stackoverflow.com/questions/901712/check-checkbox-checked-property-using-jquery/901727#901727\">answer</a> works fine. I am not sure what I missed at the time I tested it.</p>\n\n<p><strong>Note, this is answer uses Microsoft Ajax, not jQuery</strong></p>\n',1243143025,101,903152),('<p>Assuming the hash of the commit you want is <code>c5f567</code>:</p>\n\n<pre><code>git checkout c5f567 -- file1/to/restore file2/to/restore\n</code></pre>\n\n<p>The <a href=\"https://git-scm.com/docs/git-checkout\" rel=\"noreferrer\">git checkout</a> man page gives more information.</p>\n\n<p>If you want to revert to the commit before <code>c5f567</code>, append <code>~1</code> (where 1 is the number of commits you want to go back, it can be anything):</p>\n\n<pre><code>git checkout c5f567~1 -- file1/to/restore file2/to/restore\n</code></pre>\n\n<p>As a side note, I\'ve always been uncomfortable with this command because it\'s used for both ordinary things (changing between branches) and unusual, destructive things (discarding changes in the working directory).</p>\n',1224373175,6172,215731),('<h1>1. Don\'t design your page, and then change it with <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a> manipulations</h1>\n\n<p>In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.</p>\n\n<p>But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking \"I have this piece of the DOM and I want to make it do X\", you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.</p>\n\n<h1>2. Don\'t augment jQuery with AngularJS</h1>\n\n<p>Similarly, don\'t start with the idea that jQuery does X, Y, and Z, so I\'ll just add AngularJS on top of that for models and controllers. This is <em>really</em> tempting when you\'re just starting out, which is why I always recommend that new AngularJS developers don\'t use jQuery at all, at least until they get used to doing things the \"Angular Way\".</p>\n\n<p>I\'ve seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and <code>$apply</code>s that are confusing and convoluted; but they eventually get it working! The problem is that in <strong>most</strong> cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.</p>\n\n<p>The bottom line is this: when solutioning, first \"think in AngularJS\"; if you can\'t think of a solution, ask the community; if after all of that there is no easy solution, <em>then</em> feel free to reach for the jQuery. But don\'t let jQuery become a crutch or you\'ll never master AngularJS.</p>\n\n<h1>3. Always think in terms of architecture</h1>\n\n<p>First know that <a href=\"http://en.wikipedia.org/wiki/Single-page_application\" rel=\"noreferrer\">single-page applications</a> are <em>applications</em>. They\'re <em>not</em> webpages. So we need to think like a server-side developer <em>in addition</em> to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.</p>\n\n<p>So then <em>how</em> do you do that? How do you \"think in AngularJS\"? Here are some general principles, contrasted with jQuery.</p>\n\n<h2>The view is the \"official record\"</h2>\n\n<p>In jQuery, we programmatically change the view. We could have a dropdown menu defined as a <code>ul</code> like so:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"main-menu\"&gt;\n    &lt;li class=\"active\"&gt;\n        &lt;a href=\"#/home\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href=\"#/menu1\"&gt;Menu 1&lt;/a&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#/sm1\"&gt;Submenu 1&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/sm2\"&gt;Submenu 2&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/sm3\"&gt;Submenu 3&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href=\"#/home\"&gt;Menu 2&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>In jQuery, in our application logic, we would activate it with something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(\'.main-menu\').dropdownMenu();\n</code></pre>\n\n<p>When we just look at the view, it\'s not immediately obvious that there is any functionality here. For small applications, that\'s fine. But for non-trivial applications, things quickly get confusing and hard to maintain.</p>\n\n<p>In AngularJS, though, the view is the official record of view-based functionality. Our <code>ul</code> declaration would look like this instead:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"main-menu\" dropdown-menu&gt;\n    ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>These two do the same thing, but in the AngularJS version anyone looking at the template knows what\'s supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then <em>know</em> that there is a directive called <code>dropdownMenu</code> operating on it; she doesn\'t need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.</p>\n\n<p>Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don\'t. But the reason you don\'t do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to \"do jQuery\" in the context of AngularJS. That\'s never going to work well. The view <em>is</em> the official record. Outside of a directive (more on this below), you never, ever, <em>never</em> change the DOM. And directives are applied <em>in the view</em>, so intent is clear.</p>\n\n<p>Remember: don\'t design, and then mark up. You must architect, and then design.</p>\n\n<h2>Data binding</h2>\n\n<p>This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don\'t have to! In jQuery, we respond to events and then update content. Something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$.ajax({\n  url: \'/myEndpoint.json\',\n  success: function ( data, status ) {\n    $(\'ul#log\').append(\'&lt;li&gt;Data Received!&lt;/li&gt;\');\n  }\n});\n</code></pre>\n\n<p>For a view that looks like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"messages\" id=\"log\"&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?</p>\n\n<p>This a little messy and a trifle frail. But in AngularJS, we can do this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$http( \'/myEndpoint.json\' ).then( function ( response ) {\n    $scope.log.push( { msg: \'Data Received!\' } );\n});\n</code></pre>\n\n<p>And our view can look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"messages\"&gt;\n    &lt;li ng-repeat=\"entry in log\"&gt;{{ entry.msg }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But for that matter, our view could look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"messages\"&gt;\n    &lt;div class=\"alert\" ng-repeat=\"entry in log\"&gt;\n        {{ entry.msg }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And now instead of using an unordered list, we\'re using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter <em>where</em> or <em>how</em> the log gets updated, the view will change too. Automatically. Neat!</p>\n\n<p>Though I didn\'t show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this: <code>&lt;input ng-model=\"entry.msg\" /&gt;</code>. And there was much rejoicing.</p>\n\n<h2>Distinct model layer</h2>\n\n<p>In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\" rel=\"noreferrer\">separation of concerns</a>, and introduces far greater testability. Other answers mentioned this point, so I\'ll just leave it at that.</p>\n\n<h2>Separation of concerns</h2>\n\n<p>And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part); your model represents your data; you have a service layer to perform reusable tasks; you do DOM manipulation and augment your view with directives; and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.</p>\n\n<h2>Dependency injection</h2>\n\n<p>To help us out with separation of concerns is <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" rel=\"noreferrer\">dependency injection</a> (DI). If you come from a server-side language (from <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\" rel=\"noreferrer\">Java</a> to <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"noreferrer\">PHP</a>) you\'re probably familiar with this concept already, but if you\'re a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it\'s not. :-)</p>\n\n<p>From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don\'t have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I\'ll provide just one (common) example: testing.</p>\n\n<p>Let\'s say in our application, we require a service that implements server-side storage through a <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\" rel=\"noreferrer\">REST</a> API and, depending on application state, local storage as well. When running tests on our controllers, we don\'t want to have to communicate with the server - we\'re testing the <em>controller</em>, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn\'t and needn\'t know the difference.</p>\n\n<p>Speaking of testing...</p>\n\n<h1>4. Test-driven development - <em>always</em></h1>\n\n<p>This is really part of section 3 on architecture, but it\'s so important that I\'m putting it as its own top-level section.</p>\n\n<p>Out of all of the many jQuery plugins you\'ve seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn\'t very amenable to that. But AngularJS is.</p>\n\n<p>In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and <em>then</em> integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?</p>\n\n<p>But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let\'s say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"/hello\" when-active&gt;Hello&lt;/a&gt;\n</code></pre>\n\n<p>Okay, now we can write a test for the non-existent <code>when-active</code> directive:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>it( \'should add \"active\" when the route changes\', inject(function() {\n    var elm = $compile( \'&lt;a href=\"/hello\" when-active&gt;Hello&lt;/a&gt;\' )( $scope );\n\n    $location.path(\'/not-matching\');\n    expect( elm.hasClass(\'active\') ).toBeFalsey();\n\n    $location.path( \'/hello\' );\n    expect( elm.hasClass(\'active\') ).toBeTruthy();\n}));\n</code></pre>\n\n<p>And when we run our test, we can confirm that it fails. Only now should we create our directive:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( \'whenActive\', function ( $location ) {\n    return {\n        scope: true,\n        link: function ( scope, element, attrs ) {\n            scope.$on( \'$routeChangeSuccess\', function () {\n                if ( $location.path() == element.attr( \'href\' ) ) {\n                    element.addClass( \'active\' );\n                }\n                else {\n                    element.removeClass( \'active\' );\n                }\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>Our test now passes <em>and</em> our menu performs as requested. Our development is <em>both</em> iterative <em>and</em> test-driven. Wicked-cool.</p>\n\n<h1>5. Conceptually, directives are <em>not</em> packaged jQuery</h1>\n\n<p>You\'ll often hear \"only do DOM manipulation in a directive\". <strong>This is a necessity.</strong> Treat it with due deference!</p>\n\n<p>But let\'s dive a little deeper...</p>\n\n<p>Some directives just decorate what\'s already in the view (think <code>ngClass</code>) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a \"widget\" and has a template, it should <em>also</em> respect separation of concerns. That is, the template <em>too</em> should remain largely independent from its implementation in the link and controller functions.</p>\n\n<p>AngularJS comes with an entire set of tools to make this very easy; with <code>ngClass</code> we can dynamically update the class; <code>ngModel</code> allows two-way data binding; <code>ngShow</code> and <code>ngHide</code> programmatically show or hide an element; and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness <em>without</em> DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.</p>\n\n<p>I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think \"since I can\'t do DOM manipulation in the controller, I\'ll take that code put it in a directive\". While that certainly is much better, it\'s often <em>still wrong</em>.</p>\n\n<p>Think of the logger we programmed in section 3. Even if we put that in a directive, we <em>still</em> want to do it the \"Angular Way\". It <em>still</em> doesn\'t take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it\'s a <em>lot</em> rarer than you think! Before doing DOM manipulation <em>anywhere</em> in your application, ask yourself if you really need to. There might be a better way.</p>\n\n<p>Here\'s a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.)</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( \'myDirective\', function () {\n    return {\n        template: \'&lt;a class=\"btn\"&gt;Toggle me!&lt;/a&gt;\',\n        link: function ( scope, element, attrs ) {\n            var on = false;\n\n            $(element).click( function () {\n                on = !on;\n                $(element).toggleClass(\'active\', on);\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>There are a few things wrong with this:</p>\n\n<ol>\n<li>First, jQuery was never necessary. There\'s nothing we did here that needed jQuery at all!</li>\n<li>Second, even if we already have jQuery on our page, there\'s no reason to use it here; we can simply use <code>angular.element</code> and our component will still work when dropped into a project that doesn\'t have jQuery.</li>\n<li>Third, even assuming jQuery <em>was</em> required for this directive to work, jqLite (<code>angular.element</code>) will <em>always</em> use jQuery if it was loaded! So we needn\'t use the <code>$</code> - we can just use <code>angular.element</code>.</li>\n<li>Fourth, closely related to the third, is that jqLite elements needn\'t be wrapped in <code>$</code> - the <code>element</code> that is passed to the <code>link</code> function would <em>already be</em> a jQuery element! </li>\n<li>And fifth, which we\'ve mentioned in previous sections, why are we mixing template stuff into our logic?</li>\n</ol>\n\n<p>This directive can be rewritten (even for very complicated cases!) much more simply like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( \'myDirective\', function () {\n    return {\n        scope: true,\n        template: \'&lt;a class=\"btn\" ng-class=\"{active: on}\" ng-click=\"toggle()\"&gt;Toggle me!&lt;/a&gt;\',\n        link: function ( scope, element, attrs ) {\n            scope.on = false;\n\n            scope.toggle = function () {\n                scope.on = !scope.on;\n            };\n        }\n    };\n});\n</code></pre>\n\n<p>Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the <strong>logic</strong> never had to be touched. Reusability - boom!</p>\n\n<p>And there are still all those other benefits, like testing - it\'s easy! No matter what\'s in the template, the directive\'s internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.</p>\n\n<p>w00t!</p>\n\n<p>So if directives aren\'t just collections of jQuery-like functions, what are they? Directives are actually <strong>extensions of HTML</strong>. If HTML doesn\'t do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.</p>\n\n<p>Put another way, if AngularJS doesn\'t do something out of the box, think how the team would accomplish it to fit right in with <code>ngClick</code>, <code>ngClass</code>, et al.</p>\n\n<h1>Summary</h1>\n\n<p>Don\'t even use jQuery. Don\'t even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the <code>$</code>, try to think about how to do it within the confines the AngularJS. If you don\'t know, ask! 19 times out of 20, the best way to do it doesn\'t need jQuery and to try to solve it with jQuery results in more work for you.</p>\n',1361482002,7178,15012542),('<p><strong><a href=\"http://php.net/manual/en/language.operators.increment.php\" rel=\"noreferrer\">Incrementing / Decrementing Operators</a></strong></p>\n\n<p><code>++</code> increment operator</p>\n\n<p><code>--</code> decrement operator</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Example    Name              Effect\n---------------------------------------------------------------------\n++$a       Pre-increment     Increments $a by one, then returns $a.\n$a++       Post-increment    Returns $a, then increments $a by one.\n--$a       Pre-decrement     Decrements $a by one, then returns $a.\n$a--       Post-decrement    Returns $a, then decrements $a by one.\n</code></pre>\n\n<p>These can go before or after the variable.</p>\n\n<p>If put before the variable, the increment/decrement operation is done to the variable <strong>first</strong> then the result is returned. If put after the variable, the variable is <strong>first</strong> returned, then the increment/decrement operation is done.</p>\n\n<p>For example:</p>\n\n<pre><code>$apples = 10;\nfor ($i = 0; $i &lt; 10; ++$i) {\n    echo \'I have \' . $apples-- . \" apples. I just ate one.\\n\";\n}\n</code></pre>\n\n<p><strong><a href=\"http://codepad.org/5ZD3j0xb\" rel=\"noreferrer\">Live example</a></strong></p>\n\n<p>In the case above <code>++$i</code> is used, since it is faster. <code>$i++</code> would have the same results.</p>\n\n<p>Pre-increment is a little bit faster because it really increments the variable and after that \'returns\' the result. Post-increment creates a special variable, copies there the value of the first variable and only after the first variable is used, replaces its value with second\'s.</p>\n\n<p>However, you must use <code>$apples--</code>, since first, you want to display the current number of apples, and <strong>then</strong> you want to subtract one from it.</p>\n\n<p>You can also increment letters in PHP:</p>\n\n<pre><code>$i = \"a\";\nwhile ($i &lt; \"c\") {\n    echo $i++;\n}\n</code></pre>\n\n<p>Once <code>z</code> is reached <code>aa</code> is next, and so on.</p>\n\n<blockquote>\n  <p>Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Stack Overflow Posts:</strong></p>\n\n<ul>\n<li><strong><a href=\"https://stackoverflow.com/questions/1968371/understanding-incrementing\">Understanding Incrementing</a></strong>  </li>\n</ul>\n',1284741003,1175,3737177),('<p><strong>Note: Don\'t use this in performance critical code.</strong></p>\n\n<p>As an alternative to regular expressions for a simple literal string, you could use</p>\n\n<pre><code>str = \"Test abc test test abc test...\".split(\"abc\").join(\"\");\n</code></pre>\n\n<p>The general pattern is</p>\n\n<pre><code>str.split(search).join(replacement)\n</code></pre>\n\n<p>This used to be faster in some cases than using <code>replaceAll</code> and a regular expression, but that doesn\'t seem to be the case anymore in modern browsers. </p>\n\n<p>Benchmark: <a href=\"https://jsperf.com/replace-all-vs-split-join\" rel=\"noreferrer\">https://jsperf.com/replace-all-vs-split-join</a></p>\n\n<p>Conclusion: If you have a performance critical use case (e.g processing hundreds of strings), use the Regexp method. But for most typical use cases, this is well worth not having to worry about special characters.</p>\n',1247862552,1643,1145525),('<p>Using <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"noreferrer\">regular expressions</a> is probably the best way. You can see a bunch of tests <a href=\"http://jsfiddle.net/ghvj4gy9/embedded/result,js/\" rel=\"noreferrer\">here</a> (taken from <a href=\"https://cs.chromium.org/chromium/src/third_party/blink/web_tests/fast/forms/resources/ValidityState-typeMismatch-email.js?q=ValidityState-typeMismatch-email.js&amp;sq=package:chromium&amp;dr\" rel=\"noreferrer\">chromium</a>)</p>\n\n<pre><code>function validateEmail(email) {\n    const re = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n</code></pre>\n\n<p>Here\'s the example of regular expresion that accepts unicode:</p>\n\n<pre><code>const re = /^(([^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+\\.)+[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n</code></pre>\n\n<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can easily be disabled. This should be validated on the server side as well.</p>\n\n<p>Here\'s an example of the above in action:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function validateEmail(email) {\r\n  const re = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(email);\r\n}\r\n\r\nfunction validate() {\r\n  const $result = $(\"#result\");\r\n  const email = $(\"#email\").val();\r\n  $result.text(\"\");\r\n\r\n  if (validateEmail(email)) {\r\n    $result.text(email + \" is valid :)\");\r\n    $result.css(\"color\", \"green\");\r\n  } else {\r\n    $result.text(email + \" is not valid :(\");\r\n    $result.css(\"color\", \"red\");\r\n  }\r\n  return false;\r\n}\r\n\r\n$(\"#validate\").on(\"click\", validate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;form&gt;\r\n  &lt;p&gt;Enter an email address:&lt;/p&gt;\r\n  &lt;input id=\'email\'&gt;\r\n  &lt;button type=\'submit\' id=\'validate\'&gt;Validate!&lt;/button&gt;\r\n&lt;/form&gt;\r\n\r\n&lt;h2 id=\'result\'&gt;&lt;/h2&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1220631334,4981,46181),('<p>From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\" rel=\"noreferrer\">RFC 3986</a>:</p>\n\n<blockquote>\n  <p>A URI can be further classified as a locator, a name, or both.  The\n     term \"Uniform Resource Locator\" (URL) refers to the subset of URIs\n     that, in addition to identifying a resource, provide a means of\n     locating the resource by describing its primary access mechanism\n     (e.g., its network \"location\").  The term \"Uniform Resource Name\"\n     (URN) has been used historically to refer to both URIs under the\n     \"urn\" scheme <a href=\"https://www.ietf.org/rfc/rfc2141.txt\" rel=\"noreferrer\">[RFC2141]</a>, which are required to remain globally unique\n     and persistent even when the resource ceases to exist or becomes\n     unavailable, and to any other URI with the properties of a name.</p>\n</blockquote>\n\n<p>So all URLs are URIs (actually not quite - see below), and all URNs are URIs - but URNs and URLs are different, so you can\'t say that all URIs are URLs.</p>\n\n<p>EDIT: I had previously thought that all URLs are valid URIs, but as per comments:</p>\n\n<blockquote>\n  <p><strong>Not</strong> \"all URLs are URIs\". It depends on the interpretation of the RFC. For example in Java the URI parser does not like <code>[</code> or <code>]</code> and that\'s because the spec says \"should not\" and not \"shall not\".</p>\n</blockquote>\n\n<p>So that muddies the waters further, unfortunately.</p>\n\n<p>If you haven\'t already read <a href=\"https://stackoverflow.com/a/1984225/22656\">Roger Pate\'s answer</a>, I\'d advise doing so as well.</p>\n',1223328588,1756,176274),('<p>In Git 1.7.0 and later, you can checkout a new branch:</p>\n\n<pre><code>git checkout -b &lt;branch&gt;\n</code></pre>\n\n<p>Edit files, add and commit. Then <a href=\"https://git-scm.com/docs/git-push\" rel=\"noreferrer\">push with the <code>-u</code> (short for <code>--set-upstream</code>)</a> option:</p>\n\n<pre><code>git push -u origin &lt;branch&gt;\n</code></pre>\n\n<p>Git will set up the tracking information during the push.</p>\n',1307134229,6654,6232535),('<p>The notion that regex doesn\'t support inverse matching is not entirely true. You can mimic this behavior by using negative look-arounds:</p>\n\n<pre><code>^((?!hede).)*$\n</code></pre>\n\n<p>The regex above will match any string, or line without a line break, <strong>not</strong> containing the (sub)string \'hede\'. As mentioned, this is not something regex is \"good\" at (or should do), but still, it <em>is</em> possible. </p>\n\n<p>And if you need to match line break chars as well, use the <a href=\"http://perldoc.perl.org/perlre.html#Modifiers\" rel=\"noreferrer\">DOT-ALL modifier</a> (the trailing <code>s</code> in the following pattern):</p>\n\n<pre><code>/^((?!hede).)*$/s\n</code></pre>\n\n<p>or use it inline:</p>\n\n<pre><code>/(?s)^((?!hede).)*$/\n</code></pre>\n\n<p><em>(where the <code>/.../</code> are the regex delimiters, i.e., not part of the pattern)</em></p>\n\n<p>If the DOT-ALL modifier is not available, you can mimic the same behavior with the character class <code>[\\s\\S]</code>:</p>\n\n<pre><code>/^((?!hede)[\\s\\S])*$/\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>A string is just a list of <code>n</code> characters. Before, and after each character, there\'s an empty string. So a list of <code>n</code> characters will have <code>n+1</code> empty strings. Consider the string <code>\"ABhedeCD\"</code>:</p>\n\n<pre><code>    ┌──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┐\nS = │e1│ A │e2│ B │e3│ h │e4│ e │e5│ d │e6│ e │e7│ C │e8│ D │e9│\n    └──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┘\n\nindex    0      1      2      3      4      5      6      7\n</code></pre>\n\n<p>where the <code>e</code>\'s are the empty strings. The regex <code>(?!hede).</code> looks ahead to see if there\'s no substring <code>\"hede\"</code> to be seen, and if that is the case (so something else is seen), then the <code>.</code> (dot) will match any character except a line break. Look-arounds are also called <em>zero-width-assertions</em> because they don\'t <em>consume</em> any characters. They only assert/validate something. </p>\n\n<p>So, in my example, every empty string is first validated to see if there\'s no <code>\"hede\"</code> up ahead, before a character is consumed by the <code>.</code> (dot). The regex <code>(?!hede).</code> will do that only once, so it is wrapped in a group, and repeated zero or more times: <code>((?!hede).)*</code>. Finally, the start- and end-of-input are anchored to make sure the entire input is consumed: <code>^((?!hede).)*$</code></p>\n\n<p>As you can see, the input <code>\"ABhedeCD\"</code> will fail because on <code>e3</code>, the regex <code>(?!hede)</code> fails (there <em>is</em> <code>\"hede\"</code> up ahead!).</p>\n',1230890105,5930,406408),('<p>You can apply this CSS to the inner <code>&lt;div&gt;</code>:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#inner {\n  width: 50%;\n  margin: 0 auto;\n}\n</code></pre>\n\n<p>Of course, you don\'t have to set the <code>width</code> to <code>50%</code>. Any width less than the containing <code>&lt;div&gt;</code> will work. The <code>margin: 0 auto</code> is what does the actual centering.</p>\n\n<p>If you are targeting <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;8</a> (and later), it might be better to have this instead:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#inner {\n  display: table;\n  margin: 0 auto;\n}\n</code></pre>\n\n<p>It will make the inner element center horizontally and it works without setting a specific <code>width</code>.</p>\n\n<p>Working example here:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#inner {\r\n  display: table;\r\n  margin: 0 auto;\r\n  border: 1px solid black;\r\n}\r\n\r\n#outer {\r\n  border: 1px solid red;\r\n  width:100%\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"outer\"&gt;\r\n  &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1222086547,4749,114549),('<p>Another way to make a directory stay (almost) empty (in the repository) is to create a <code>.gitignore</code> file inside that directory that contains these four lines:</p>\n\n<pre><code># Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n</code></pre>\n\n<p>Then you don\'t have to get the order right the way that you have to do in m104\'s <a href=\"https://stackoverflow.com/a/180917/32453\">solution</a>.</p>\n\n<p>This also gives the benefit that files in that directory won\'t show up as \"untracked\" when you do a git status.</p>\n\n<p>Making <a href=\"https://stackoverflow.com/users/554807/greenasjade\">@GreenAsJade</a>\'s comment persistent:</p>\n\n<blockquote>\n  <p>I think it\'s worth noting that this solution does precisely what the question asked for, but is not perhaps what many people looking at this question will have been looking for. This solution guarantees that the directory remains empty. It says \"I truly never want files checked in here\". As opposed to \"I don\'t have any files to check in here, yet, but I need the directory here, files may be coming later\".</p>\n</blockquote>\n',1243807840,4152,932982),('<p>On Python ≥ 3.5, use <a href=\"https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir\" rel=\"noreferrer\"><code>pathlib.Path.mkdir</code></a>:</p>\n\n<pre><code>from pathlib import Path\nPath(\"/my/directory\").mkdir(parents=True, exist_ok=True)\n</code></pre>\n\n<p>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>\n\n<p>Try <a href=\"https://docs.python.org/library/os.path.html#os.path.exists\" rel=\"noreferrer\"><code>os.path.exists</code></a>, and consider <a href=\"https://docs.python.org/library/os.html#os.makedirs\" rel=\"noreferrer\"><code>os.makedirs</code></a> for the creation.</p>\n\n<pre><code>import os\nif not os.path.exists(directory):\n    os.makedirs(directory)\n</code></pre>\n\n<p>As noted in comments and elsewhere, there\'s a race condition &ndash; if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>\n\n<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href=\"https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror\">Is there a cross-platform way of getting information from Python’s OSError</a>):</p>\n\n<pre><code>import os, errno\n\ntry:\n    os.makedirs(directory)\nexcept OSError as e:\n    if e.errno != errno.EEXIST:\n        raise\n</code></pre>\n\n<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one &ndash; we could still be fooled. </p>\n\n<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>\n\n<p>Modern versions of Python improve this code quite a bit, both by exposing <a href=\"https://docs.python.org/3.3/library/exceptions.html?#FileExistsError\" rel=\"noreferrer\"><code>FileExistsError</code></a> (in 3.3+)...</p>\n\n<pre><code>try:\n    os.makedirs(\"path/to/directory\")\nexcept FileExistsError:\n    # directory already exists\n    pass\n</code></pre>\n\n<p>...and by allowing <a href=\"https://docs.python.org/3.2/library/os.html#os.makedirs\" rel=\"noreferrer\">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>\n\n<pre><code>os.makedirs(\"path/to/directory\", exist_ok=True)  # succeeds even if directory exists.\n</code></pre>\n',1226084767,5235,273227),('<p>UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier), according to <a href=\"https://www.ietf.org/rfc/rfc4122.txt\" rel=\"noreferrer\">RFC 4122</a>, are identifiers designed to provide certain uniqueness guarantees.</p>\n\n<p>While it is possible to implement an RFC-compliant UUIDs in a few lines of JS (E.g. see <a href=\"https://stackoverflow.com/a/2117523/109538\">@broofa\'s answer</a>, below) there are several common pitfalls:</p>\n\n<ul>\n<li>Invalid id format (UUIDs must be of the form \"<code>xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx</code>\", where x is one of [0-9, a-f] <em>M</em> is one of [1-5], and <em>N</em> is [8, 9, a, or b]</li>\n<li>Use of a low-quality source of randomness (such as <code>Math.random</code>)</li>\n</ul>\n\n<p>Thus, developers writing code for production environments are encouraged to use a rigorous, well-maintained implementation such as the <a href=\"https://github.com/uuidjs/uuid\" rel=\"noreferrer\">uuid</a> module.</p>\n',1221854725,2350,105074),('<p>First, clone a remote <a href=\"http://en.wikipedia.org/wiki/Git_%28software%29\" rel=\"noreferrer\">Git</a> repository and <a href=\"http://en.wikipedia.org/wiki/Cd_%28command%29\" rel=\"noreferrer\">cd</a> into it:</p>\n\n<pre><code>$ git clone git://example.com/myproject\n$ cd myproject\n</code></pre>\n\n<p>Next, look at the local branches in your repository:</p>\n\n<pre><code>$ git branch\n* master\n</code></pre>\n\n<p>But there are other branches hiding in your repository! You can see these using the <code>-a</code> flag:</p>\n\n<pre><code>$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n</code></pre>\n\n<p>If you just want to take a quick peek at an upstream branch, you can check it out directly:</p>\n\n<pre><code>$ git checkout origin/experimental\n</code></pre>\n\n<p>But if you want to work on that branch, you\'ll need to create a local tracking branch which is done automatically by:</p>\n\n<pre><code>$ git checkout experimental\n</code></pre>\n\n<p>and you will see</p>\n\n<pre><code>Branch experimental set up to track remote branch experimental from origin.\nSwitched to a new branch \'experimental\'\n</code></pre>\n\n<p>That last line throws some people: \"New branch\" - huh?\nWhat it really means is that the branch is taken from the index and created locally for you.  The <em>previous</em> line is actually more informative as it tells you that the branch is being set up to track the remote branch, which usually means the origin/branch_name branch </p>\n\n<p>Now, if you look at your local branches, this is what you\'ll see:</p>\n\n<pre><code>$ git branch\n* experimental\n  master\n</code></pre>\n\n<p>You can actually track more than one remote repository using <code>git remote</code>.</p>\n\n<pre><code>$ git remote add win32 git://example.com/users/joe/myproject-win32-port\n$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n  remotes/win32/master\n  remotes/win32/new-widgets\n</code></pre>\n\n<p>At this point, things are getting pretty crazy, so run <code>gitk</code> to see what\'s going on:</p>\n\n<pre><code>$ gitk --all &amp;\n</code></pre>\n',1221571702,4571,72156),('<h2>Modern jQuery</h2>\n\n<p>Use <a href=\"https://api.jquery.com/prop\" rel=\"noreferrer\"><code>.prop()</code></a>:</p>\n\n<pre><code>$(\'.myCheckbox\').prop(\'checked\', true);\n$(\'.myCheckbox\').prop(\'checked\', false);\n</code></pre>\n\n<h2>DOM API</h2>\n\n<p>If you\'re working with just one element, you can always just access the underlying <a href=\"https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement\" rel=\"noreferrer\"><code>HTMLInputElement</code></a> and modify its <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#Properties_checkbox_radio\" rel=\"noreferrer\"><code>.checked</code></a> property:</p>\n\n<pre><code>$(\'.myCheckbox\')[0].checked = true;\n$(\'.myCheckbox\')[0].checked = false;\n</code></pre>\n\n<p>The benefit to using the <code>.prop()</code> and <code>.attr()</code> methods instead of this is that they will operate on all matched elements.</p>\n\n<h2>jQuery 1.5.x and below</h2>\n\n<p>The <code>.prop()</code> method is not available, so you need to use <a href=\"https://api.jquery.com/attr\" rel=\"noreferrer\"><code>.attr()</code></a>.</p>\n\n<pre><code>$(\'.myCheckbox\').attr(\'checked\', true);\n$(\'.myCheckbox\').attr(\'checked\', false);\n</code></pre>\n\n<p>Note that this is <a href=\"https://github.com/jquery/jquery/blob/1.5.2/test/unit/attributes.js#L157\" rel=\"noreferrer\">the approach used by jQuery\'s unit tests prior to version 1.6</a> and is preferable to using <code>$(\'.myCheckbox\').removeAttr(\'checked\');</code> since the latter will, if the box was initially checked, change the behaviour of a call to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.reset\" rel=\"noreferrer\"><code>.reset()</code></a> on any form that contains it – a subtle but probably unwelcome behaviour change.</p>\n\n<p>For more context, some incomplete discussion of the changes to the handling of the <code>checked</code> attribute/property in the transition from 1.5.x to 1.6 can be found in the <a href=\"https://blog.jquery.com/2011/05/03/jquery-16-released/\" rel=\"noreferrer\">version 1.6 release notes</a> and the <strong>Attributes vs. Properties</strong> section of the <a href=\"https://api.jquery.com/prop\" rel=\"noreferrer\"><code>.prop()</code> documentation</a>.</p>\n',1231453508,5978,426276),('<p>If you want only the remote URL, or if your are not connected to a network that can reach the remote repo:</p>\n\n<pre><code>git config --get remote.origin.url\n</code></pre>\n\n<p>If you require full output and you <em>are</em> on a network that can reach the remote repo where the origin resides :</p>\n\n<pre><code>git remote show origin\n</code></pre>\n\n<p>When using <code>git clone</code> (from GitHub, or any source repository for that matter) the default name for the source of the clone is \"origin\". Using <code>git remote show</code> will display the information about this remote name. The first few lines should show:</p>\n\n<pre><code>C:\\Users\\jaredpar\\VsVim&gt; git remote show origin\n* remote origin\n  Fetch URL: git@github.com:jaredpar/VsVim.git\n  Push  URL: git@github.com:jaredpar/VsVim.git\n  HEAD branch: master\n  Remote branches:\n</code></pre>\n\n<p>If you want to use the value in the script, you would use the first command listed in this answer.</p>\n',1288803016,5793,4089452),('<p>It prevents <a href=\"http://haacked.com/archive/2009/06/25/json-hijacking.aspx\" rel=\"noreferrer\">JSON hijacking</a>, a major JSON security issue that is formally <a href=\"https://security.stackexchange.com/questions/155518/why-json-hijacking-attack-doesnt-work-in-modern-browsers-how-was-it-fixed\">fixed</a> in all major browsers <a href=\"https://caniuse.com/#feat=es5\" rel=\"noreferrer\">since 2011</a> with ECMAScript 5.</p>\n\n<p>Contrived example: say Google has a URL like <code>mail.google.com/json?action=inbox</code> which returns the first 50 messages of your inbox in JSON format. Evil websites on other domains can\'t make AJAX requests to get this data due to the same-origin policy, but they can include the URL via a <code>&lt;script&gt;</code> tag. The URL is visited with <em>your</em> cookies, and by <a href=\"http://ejohn.org/blog/re-securing-json/\" rel=\"noreferrer\">overriding the global array constructor or accessor methods</a> they can have a method called whenever an object (array or hash) attribute is set, allowing them to read the JSON content.</p>\n\n<p>The <code>while(1);</code> or <code>&amp;&amp;&amp;BLAH&amp;&amp;&amp;</code> prevents this: an AJAX request at <code>mail.google.com</code> will have full access to the text content, and can strip it away. But a <code>&lt;script&gt;</code> tag insertion blindly executes the JavaScript without any processing, resulting in either an infinite loop or a syntax error.</p>\n\n<p>This does not address the issue of <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" rel=\"noreferrer\">cross-site request forgery</a>.</p>\n',1271700701,4301,2669766),('<p>A nice way to do this is using <a href=\"http://commons.apache.org/\" rel=\"noreferrer\">Apache commons</a> <code><a href=\"https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html\" rel=\"noreferrer\">IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>... something like</p>\n\n<pre><code>StringWriter writer = new StringWriter();\nIOUtils.copy(inputStream, writer, encoding);\nString theString = writer.toString();\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>// NB: does not close inputStream, you\'ll have to use try-with-resources for that\nString theString = IOUtils.toString(inputStream, encoding); \n</code></pre>\n\n<p>Alternatively, you could use <code>ByteArrayOutputStream</code> if you don\'t want to mix your Streams and Writers</p>\n',1227286460,2538,309448),('<h1>Short &amp; Snazzy:</h1>\n\n<pre><code>+ new Date()\n</code></pre>\n\n<p>A unary operator like <code>plus</code> triggers the <code>valueOf</code> method in the <code>Date</code> object and it returns the timestamp (without any alteration).</p>\n\n<p><strong>Details:</strong></p>\n\n<p>On almost all current browsers you can use <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\" rel=\"noreferrer\"><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=\"http://kangax.github.io/compat-table/es5/#Date.now\" rel=\"noreferrer\">compatibility table</a>).</p>\n\n<p>You can easily make a shim for this, though:</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n</code></pre>\n\n<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>\n\n<pre><code>Math.floor(Date.now() / 1000)\n</code></pre>\n\n<p>Or alternatively you could use:</p>\n\n<pre><code>Date.now() / 1000 | 0\n</code></pre>\n\n<p>Which should be slightly faster, but also less readable (also <a href=\"https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">see this answer</a>).</p>\n\n<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It\'s slightly better because it\'s shorter &amp; doesn\'t create a new <code>Date</code> object. However, if you don\'t want a shim &amp; maximum compatibility, you could use the \"old\" method to get the timestamp in <strong>milliseconds</strong>:</p>\n\n<pre><code>new Date().getTime()\n</code></pre>\n\n<p>Which you can then convert to seconds like this:</p>\n\n<pre><code>Math.round(new Date().getTime()/1000)\n</code></pre>\n\n<p>And you can also use the <code>valueOf</code> method which we showed above:</p>\n\n<pre><code>new Date().valueOf()\n</code></pre>\n\n<p><strong>Timestamp in Milliseconds</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var timeStampInMs = window.performance &amp;&amp; window.performance.now &amp;&amp; window.performance.timing &amp;&amp; window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();\r\n\r\nconsole.log(timeStampInMs, Date.now());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1224581552,4943,221297),('<p>This to me sounds like a reasonably common problem that junior to intermediate developers tend to face at some point: they either don\'t know or don\'t trust the contracts they are participating in and defensively overcheck for nulls.  Additionally, when writing their own code, they tend to rely on returning nulls to indicate something thus requiring the caller to check for nulls.</p>\n\n<p>To put this another way, there are two instances where null checking comes up:</p>\n\n<ol>\n<li><p>Where null is a valid response in terms of the contract; and</p></li>\n<li><p>Where it isn\'t a valid response.</p></li>\n</ol>\n\n<p>(2) is easy.  Either use <code>assert</code> statements (assertions) or allow failure (for example,  <a href=\"http://docs.oracle.com/javase/6/docs/api/index.html?java/lang/NullPointerException.html\" rel=\"noreferrer\">NullPointerException</a>).  Assertions are a highly-underused Java feature that was added in 1.4.  The syntax is:</p>\n\n<pre><code>assert &lt;condition&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>assert &lt;condition&gt; : &lt;object&gt;\n</code></pre>\n\n<p>where <code>&lt;condition&gt;</code> is a boolean expression and <code>&lt;object&gt;</code> is an object whose <code>toString()</code> method\'s output will be included in the error.</p>\n\n<p>An <code>assert</code> statement throws an <code>Error</code> (<code>AssertionError</code>) if the condition is not true.  By default, Java ignores assertions.  You can enable assertions by passing the option <code>-ea</code> to the JVM.  You can enable and disable assertions for individual classes and packages.  This means that you can validate code with the assertions while developing and testing, and disable them in a production environment, although my testing has shown next to no performance impact from assertions.</p>\n\n<p>Not using assertions in this case is OK because the code will just fail, which is what will happen if you use assertions.  The only difference is that with assertions it might happen sooner, in a more-meaningful way and possibly with extra information, which may help you to figure out why it happened if you weren\'t expecting it.</p>\n\n<p>(1) is a little harder.  If you have no control over the code you\'re calling then you\'re stuck.  If null is a valid response, you have to check for it.</p>\n\n<p>If it\'s code that you do control, however (and this is often the case), then it\'s a different story.  Avoid using nulls as a response.  With methods that return collections, it\'s easy: return empty collections (or arrays) instead of nulls pretty much all the time.</p>\n\n<p>With non-collections it might be harder.  Consider this as an example: if you have these interfaces:</p>\n\n<pre><code>public interface Action {\n  void doSomething();\n}\n\npublic interface Parser {\n  Action findAction(String userInput);\n}\n</code></pre>\n\n<p>where Parser takes raw user input and finds something to do, perhaps if you\'re implementing a command line interface for something.  Now you might make the contract that it returns null if there\'s no appropriate action.  That leads the null checking you\'re talking about.</p>\n\n<p>An alternative solution is to never return null and instead use the <a href=\"https://en.wikipedia.org/wiki/Null_Object_pattern\" rel=\"noreferrer\">Null Object pattern</a>:</p>\n\n<pre><code>public class MyParser implements Parser {\n  private static Action DO_NOTHING = new Action() {\n    public void doSomething() { /* do nothing */ }\n  };\n\n  public Action findAction(String userInput) {\n    // ...\n    if ( /* we can\'t find any actions */ ) {\n      return DO_NOTHING;\n    }\n  }\n}\n</code></pre>\n\n<p>Compare:</p>\n\n<pre><code>Parser parser = ParserFactory.getParser();\nif (parser == null) {\n  // now what?\n  // this would be an example of where null isn\'t (or shouldn\'t be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n  // do nothing\n} else {\n  action.doSomething();\n}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>ParserFactory.getParser().findAction(someInput).doSomething();\n</code></pre>\n\n<p>which is a much better design because it leads to more concise code.</p>\n\n<p>That said, perhaps it is entirely appropriate for the findAction() method to throw an Exception with a meaningful error message -- especially in this case where you are relying on user input.  It would be much better for the findAction method to throw an Exception than for the calling method to blow up with a simple NullPointerException with no explanation.</p>\n\n<pre><code>try {\n    ParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\n    userConsole.err(anfe.getMessage());\n}\n</code></pre>\n\n<p>Or if you think the try/catch mechanism is too ugly, rather than Do Nothing your default action should provide feedback to the user.</p>\n\n<pre><code>public Action findAction(final String userInput) {\n    /* Code to return requested Action if found */\n    return new Action() {\n        public void doSomething() {\n            userConsole.err(\"Action not found: \" + userInput);\n        }\n    }\n}\n</code></pre>\n',1226059600,2649,271874),('<p>Modern browsers have <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Browser_compatibility\" rel=\"noreferrer\"><code>Array#includes</code></a>, which does <em>exactly</em> that and <a href=\"https://kangax.github.io/compat-table/es2016plus/#test-Array.prototype.includes\" rel=\"noreferrer\">is widely supported</a> by everyone except IE:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log([\'joe\', \'jane\', \'mary\'].includes(\'jane\')); //true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>You can also use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"noreferrer\"><code>Array#indexOf</code></a>, which is less direct, but doesn\'t require polyfills for outdated browsers.</p>\n<hr />\n<p>Many frameworks also offer similar methods:</p>\n<ul>\n<li>jQuery: <a href=\"http://api.jquery.com/jquery.inarray/\" rel=\"noreferrer\"><code>$.inArray(value, array, [fromIndex])</code></a></li>\n<li>Underscore.js: <a href=\"http://underscorejs.org/#contains\" rel=\"noreferrer\"><code>_.contains(array, value)</code></a> (also aliased as <code>_.include</code> and <code>_.includes</code>)</li>\n<li>Dojo Toolkit: <a href=\"http://dojotoolkit.org/reference-guide/dojo/indexOf.html\" rel=\"noreferrer\"><code>dojo.indexOf(array, value, [fromIndex, findLast])</code></a></li>\n<li>Prototype: <a href=\"http://api.prototypejs.org/language/Array/prototype/indexOf/\" rel=\"noreferrer\"><code>array.indexOf(value)</code></a></li>\n<li>MooTools: <a href=\"https://mootools.net/core/docs/1.6.0/Types/Array#Array:indexOf\" rel=\"noreferrer\"><code>array.indexOf(value)</code></a></li>\n<li>MochiKit: <a href=\"http://mochi.github.io/mochikit/doc/html/MochiKit/Base.html#fn-findvalue\" rel=\"noreferrer\"><code>findValue(array, value)</code></a></li>\n<li>MS Ajax: <a href=\"http://www.asp.net/ajaxlibrary/Reference.Array-indexOf-Function.ashx\" rel=\"noreferrer\"><code>array.indexOf(value)</code></a></li>\n<li>Ext: <a href=\"http://docs.sencha.com/extjs/4.0.0/#/api/Ext.Array-method-contains\" rel=\"noreferrer\"><code>Ext.Array.contains(array, value)</code></a></li>\n<li>Lodash: <a href=\"https://lodash.com/docs#includes\" rel=\"noreferrer\"><code>_.includes(array, value, [from])</code></a> (is <code>_.contains</code> prior 4.0.0)</li>\n<li>Ramda: <a href=\"https://ramdajs.com/docs/#includes\" rel=\"noreferrer\"><code>R.includes(value, array)</code></a></li>\n</ul>\n<p>Notice that some frameworks implement this as a function, while others add the function to the array prototype.</p>\n',1253820924,4402,1473742),('<h2>Implementation</h2>\n\n<p>There are three different implementations: pseudo-elements, pseudo-classes, and nothing.</p>\n\n<ul>\n<li>WebKit, Blink (Safari, Google Chrome, Opera 15+) and Microsoft Edge are using a pseudo-element: <code>::-webkit-input-placeholder</code>. <sup>[<a href=\"https://bugs.webkit.org/show_bug.cgi?id=21227\" rel=\"noreferrer\">Ref</a>]</sup></li>\n<li>Mozilla Firefox 4 to 18 is using a pseudo-class: <code>:-moz-placeholder</code> (<em>one</em> colon). <sup>[<a href=\"https://developer.mozilla.org/en/CSS/:-moz-placeholder\" rel=\"noreferrer\">Ref</a>]</sup></li>\n<li>Mozilla Firefox 19+ is using a pseudo-element: <code>::-moz-placeholder</code>, but the old selector will still work for a while. <sup>[<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3A-moz-placeholder\" rel=\"noreferrer\">Ref</a>]</sup></li>\n<li>Internet Explorer 10 and 11 are using a pseudo-class: <code>:-ms-input-placeholder</code>. <sup>[<a href=\"http://msdn.microsoft.com/en-us/library/ie/hh772745(v=vs.85).aspx\" rel=\"noreferrer\">Ref</a>]</sup></li>\n<li>April 2017: <strong>Most modern browsers support the simple pseudo-element <code>::placeholder</code> <sup>[<a href=\"https://caniuse.com/#feat=css-placeholder\" rel=\"noreferrer\">Ref</a>]</sup></strong></li>\n</ul>\n\n<p>Internet Explorer 9 and lower does not support the <code>placeholder</code> attribute at all, while <a href=\"http://web.archive.org/web/20131206060908/http://my.opera.com/community/forums/topic.dml?id=841252&amp;t=1296553904&amp;page=1#comment8072202\" rel=\"noreferrer\">Opera 12 and lower do not support</a> any CSS selector for placeholders.</p>\n\n<p>The discussion about the best implementation is still going on. Note the pseudo-elements act like real elements in the <a href=\"http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/\" rel=\"noreferrer\">Shadow DOM</a>. A <code>padding</code> on an <code>input</code> will not get the same background color as the pseudo-element.</p>\n\n<h2>CSS selectors</h2>\n\n<p>User agents are required to ignore a rule with an unknown selector. See <a href=\"http://www.w3.org/TR/selectors/#Conformance\" rel=\"noreferrer\">Selectors Level 3</a>:</p>\n\n<blockquote>\n  <p>a <a href=\"http://www.w3.org/TR/selectors/#grouping\" rel=\"noreferrer\">group</a> of selectors containing an invalid selector is invalid.</p>\n</blockquote>\n\n<p>So we need separate rules for each browser. Otherwise the whole group would be ignored by all browsers.\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>::-webkit-input-placeholder { /* WebKit, Blink, Edge */\r\n    color:    #909;\r\n}\r\n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n:-ms-input-placeholder { /* Internet Explorer 10-11 */\r\n   color:    #909;\r\n}\r\n::-ms-input-placeholder { /* Microsoft Edge */\r\n   color:    #909;\r\n}\r\n\r\n::placeholder { /* Most modern browsers support this now. */\r\n   color:    #909;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input placeholder=\"Stack Snippets are awesome!\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Usage notes</h2>\n\n<ul>\n<li>Be careful to avoid bad contrasts. Firefox\'s placeholder appears to be defaulting with a reduced opacity, so needs to use <code>opacity: 1</code> here.</li>\n<li>Note that placeholder text is just cut off if it doesn’t fit – size your input elements in <code>em</code> and test them with big minimum font size settings. Don’t forget translations: some languages <a href=\"http://www.w3.org/International/articles/article-text-size.en\" rel=\"noreferrer\">need more room</a> for the same word. </li>\n<li>Browsers with HTML support for <code>placeholder</code> but without CSS support for that (like Opera) should be tested too.</li>\n<li>Some browsers use additional default CSS for some <code>input</code> types (<code>email</code>, <code>search</code>). These might affect the rendering in unexpected ways. Use the <a href=\"https://developer.mozilla.org/en-US/docs/CSS/-moz-appearance\" rel=\"noreferrer\">properties</a> <code>-webkit-appearance</code> and <code>-moz-appearance</code> to change that. Example:</li>\n</ul>\n\n<pre class=\"lang-css prettyprint-override\"><code>    [type=\"search\"] {\n        -moz-appearance:    textfield;\n        -webkit-appearance: textfield;\n        appearance: textfield;\n    }\n</code></pre>\n',1270845416,4817,2610741),('<p>An <strong>architectural style</strong> called <a href=\"https://en.m.wikipedia.org/wiki/Representational_state_transfer\" rel=\"noreferrer\"><strong>REST (Representational State Transfer)</strong></a> advocates that web applications should use HTTP as it was <strong>originally envisioned</strong>. Lookups should use <a href=\"https://en.m.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" rel=\"noreferrer\"><code>GET</code></a> requests. <a href=\"https://en.m.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" rel=\"noreferrer\"><code>PUT</code>, <code>POST</code>, and <code>DELETE</code> requests</a> should be used for <strong>mutation, creation, and deletion respectively</strong>.</p>\n\n<p>REST proponents tend to favor URLs, such as</p>\n\n<pre><code>http://myserver.com/catalog/item/1729\n</code></pre>\n\n<p>but the REST architecture does not require these \"pretty URLs\". A GET request with a parameter</p>\n\n<pre><code>http://myserver.com/catalog?item=1729\n</code></pre>\n\n<p>is every bit as RESTful.</p>\n\n<p>Keep in mind that GET requests should never be used for updating information. For example, a GET request for adding an item to a cart</p>\n\n<pre><code>http://myserver.com/addToCart?cart=314159&amp;item=1729\n</code></pre>\n\n<p>would not be appropriate. GET requests should be <a href=\"https://en.m.wikipedia.org/wiki/Idempotence\" rel=\"noreferrer\">idempotent</a>. That is, issuing a request twice should be no different from issuing it once. That\'s what makes the requests cacheable. An \"add to cart\" request is not idempotent—issuing it twice adds two copies of the item to the cart. A POST request is clearly appropriate in this context. Thus, even a <strong>RESTful web application</strong> needs its share of POST requests.</p>\n\n<p>This is taken from the excellent book <em>Core JavaServer faces</em> book by David M. Geary.</p>\n',1429097177,748,29648972),('<p>With <code>git reflog</code> check which commit is one prior the merge (<code>git reflog</code> will be a better option than <code>git log</code>). Then you can reset it using:</p>\n\n<pre><code>git reset --hard commit_sha\n</code></pre>\n\n<p>There\'s also another way:</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p>It will get you back 1 commit.</p>\n\n<p><strong>Be aware that any modified and uncommitted/unstashed files will be reset to their unmodified state</strong>. To keep them either stash changes away or see <code>--merge</code> option below.  </p>\n\n<hr>\n\n<p>As @Velmont suggested below in his answer, in this direct case using:</p>\n\n<pre><code>git reset --hard ORIG_HEAD\n</code></pre>\n\n<p>might yield better results, as it should preserve your changes. <code>ORIG_HEAD</code> will point to a commit directly before merge has occurred, so you don\'t have to hunt for it yourself.</p>\n\n<hr>\n\n<p>A further tip is to use the <code>--merge</code> switch instead of <code>--hard</code> since it doesn\'t reset files unnecessarily:</p>\n\n<pre><code>git reset --merge ORIG_HEAD\n</code></pre>\n\n<blockquote>\n  <p>--merge</p>\n  \n  <p>Resets the index and updates the files in the working tree that are different between &lt;commit&gt; and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added). </p>\n</blockquote>\n',1267817641,4496,2389423),('<p>You can</p>\n\n<pre><code>git remote set-url origin new.git.url/here\n</code></pre>\n\n<p>(see <code>git help remote</code>) or you can just edit <code>.git/config</code> and change the URLs there. You\'re not in any danger of losing history unless you do something very silly (and if you\'re worried, just make a copy of your repo, since your repo <em>is</em> your history.)</p>\n',1268398550,6385,2432799),('<p>Sorting solutions have been proposed, but <strong>sorting is a little too much</strong>: We don\'t need order; <strong>we just need equality groups</strong>.</p>\n\n<p>So <strong>hashing</strong> would be enough (and faster).</p>\n\n<ol>\n<li>For each color of socks, <strong>form a pile</strong>. Iterate over all socks in your input basket <strong>and distribute them onto the color piles</strong>.</li>\n<li>Iterate over each pile and <strong>distribute it by some other metric</strong> (e.g. pattern) into the second set of piles</li>\n<li><strong>Recursively apply this scheme</strong> until you have distributed all socks onto <strong>very small piles that you can visually process immediately</strong></li>\n</ol>\n\n<p>This kind of recursive hash partitioning is actually being done by <a href=\"http://en.wikipedia.org/wiki/Microsoft_SQL_Server\" rel=\"noreferrer\">SQL Server</a> when it needs to hash join or hash aggregate over huge data sets. It distributes its build input stream into many partitions which are independent. This scheme scales to arbitrary amounts of data and multiple CPUs linearly.</p>\n\n<p>You don\'t need recursive partitioning if you can find a distribution key (hash key) that <strong>provides enough buckets</strong> that each bucket is small enough to be processed very quickly. Unfortunately, I don\'t think socks have such a property.</p>\n\n<p>If each sock had an integer called \"PairID\" one could easily distribute them into 10 buckets according to <code>PairID % 10</code> (the last digit).</p>\n\n<p>The best real-world partitioning I can think of is creating a <strong>rectangle of piles</strong>: one dimension is color, the other is the pattern. Why a rectangle? Because we need O(1) random-access to piles. (A 3D <a href=\"http://en.wikipedia.org/wiki/Cuboid\" rel=\"noreferrer\">cuboid</a> would also work, but that is not very practical.)</p>\n\n<hr/>\n\n<p>Update:</p>\n\n<p>What about <strong>parallelism</strong>? Can multiple humans match the socks faster?</p>\n\n<ol>\n<li>The simplest parallelization strategy is to have multiple workers take from the input basket and put the socks onto the piles. This only scales up so much - imagine 100 people fighting over 10 piles. <strong>The synchronization costs</strong> (manifesting themselves as hand-collisions and human communication) <strong>destroy efficiency and speed-up</strong> (see the <a href=\"http://www.perfdynamics.com/Manifesto/USLscalability.html\" rel=\"noreferrer\">Universal Scalability Law</a>!). Is this prone to <strong>deadlocks</strong>? No, because each worker only needs to access one pile at a time. With just one \"lock\" there cannot be a deadlock. <strong>Livelocks</strong> might be possible depending on how the humans coordinate access to piles. They might just use <a href=\"http://en.wikipedia.org/wiki/Exponential_backoff\" rel=\"noreferrer\">random backoff</a> like network cards do that on a physical level to determine what card can exclusively access the network wire. If it works for <a href=\"http://en.wikipedia.org/wiki/Network_interface_controller\" rel=\"noreferrer\">NICs</a>, it should work for humans as well.</li>\n<li>It scales nearly indefinitely if <strong>each worker has its own set of piles</strong>. Workers can then take big chunks of socks from the input basket (very little contention as they are doing it rarely) and they do not need to synchronise when distributing the socks at all (because they have thread-local piles). At the end, all workers need to union their pile-sets. I believe that can be done in O(log (worker count * piles per worker)) if the workers form an <strong>aggregation tree</strong>.</li>\n</ol>\n\n<p>What about the <a href=\"http://en.wikipedia.org/wiki/Element_distinctness_problem\" rel=\"noreferrer\">element distinctness problem</a>? As the article states, the element distinctness problem can be solved in <code>O(N)</code>. This is the same for the socks problem (also <code>O(N)</code>, if you need only one distribution step (I proposed multiple steps only because humans are bad at calculations - one step is enough if you distribute on <code>md5(color, length, pattern, ...)</code>, i.e. a <strong>perfect hash</strong> of all attributes)).</p>\n\n<p>Clearly, one cannot go faster than <code>O(N)</code>, so we have reached the <strong>optimal lower bound</strong>.</p>\n\n<p>Although the outputs are not exactly the same (in one case, just a boolean. In the other case, the pairs of socks), the asymptotic complexities are the same.</p>\n',1358634477,2455,14419556),('<p>Setting your branch to exactly match the remote branch can be done in two steps:</p>\n\n<pre><code>git fetch origin\ngit reset --hard origin/master\n</code></pre>\n\n<p>If you want to save your current branch\'s state before doing this (just in case), you can do:</p>\n\n<pre><code>git commit -a -m \"Saving my work, just in case\"\ngit branch my-saved-work\n</code></pre>\n\n<p>Now your work is saved on the branch \"my-saved-work\" in case you decide you want it back (or want to look at it later or diff it against your updated branch).</p>\n\n<p>Note that the first example assumes that the remote repo\'s name is \"origin\" and that the branch named \"master\" in the remote repo matches the currently checked-out branch in your local repo.</p>\n\n<p>BTW, this situation that you\'re in looks an awful lot like a common case where a push has been done into the currently checked out branch of a non-bare repository. Did you recently push into your local repo? If not, then no worries -- something else must have caused these files to unexpectedly end up modified. Otherwise, you should be aware that it\'s not recommended to push into a non-bare repository (and not into the currently checked-out branch, in particular).</p>\n',1256607870,6761,1628334),('<p>To help clarify this madness, I\'d like to begin by apologizing on behalf of all Android users for Google\'s downright ridiculous treatment of the soft keyboard. The reason there are so many answers, each different, for the same simple question is because this API, like many others in Android, is horribly designed. I can think of no polite way to state it.</p>\n\n<p>I want to hide the keyboard.  I expect to provide Android with the following statement: <code>Keyboard.hide()</code>. The end. Thank you very much.  But Android has a problem.  You must use the <code>InputMethodManager</code> to hide the keyboard. OK, fine, this is Android\'s API to the keyboard. BUT! You are required to have a <code>Context</code> in order to get access to the IMM. Now we have a problem.  I may want to hide the keyboard from a static or utility class that has no use or need for any <code>Context</code>. or And FAR worse, the IMM requires that you specify what <code>View</code> (or even worse, what <code>Window</code>) you want to hide the keyboard FROM.</p>\n\n<p>This is what makes hiding the keyboard so challenging. Dear Google: When I\'m looking up the recipe for a cake, there is no <code>RecipeProvider</code> on Earth that would refuse to provide me with the recipe unless I first answer WHO the cake will be eaten by AND where it will be eaten!! </p>\n\n<p>This sad story ends with the ugly truth: to hide the Android keyboard, you will be required to provide 2 forms of identification: a <code>Context</code> and either a <code>View</code> or a <code>Window</code>.</p>\n\n<p>I have created a static utility method which can do the job VERY solidly, provided you call it from an <code>Activity</code>.</p>\n\n<pre><code>public static void hideKeyboard(Activity activity) {\n    InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);\n    //Find the currently focused view, so we can grab the correct window token from it.\n    View view = activity.getCurrentFocus();\n    //If no view currently has focus, create a new one, just so we can grab a window token from it\n    if (view == null) {\n        view = new View(activity);\n    }\n    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}\n</code></pre>\n\n<p>Be aware that this utility method ONLY works when called from an <code>Activity</code>! The above method calls <code>getCurrentFocus</code> of the target <code>Activity</code> to fetch the proper window token. </p>\n\n<p>But suppose you want to hide the keyboard from an <code>EditText</code> hosted in a <code>DialogFragment</code>? You can\'t use the method above for that:</p>\n\n<pre><code>hideKeyboard(getActivity()); //won\'t work\n</code></pre>\n\n<p>This won\'t work because you\'ll be passing a reference to the <code>Fragment</code>\'s host <code>Activity</code>, which will have no focused control while the <code>Fragment</code> is shown! Wow! So, for hiding the keyboard from fragments, I resort to the lower-level, more common, and uglier:</p>\n\n<pre><code>public static void hideKeyboardFrom(Context context, View view) {\n    InputMethodManager imm = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);\n    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}\n</code></pre>\n\n<p>Below is some additional information gleaned from more time wasted chasing this solution:</p>\n\n<p><strong>About windowSoftInputMode</strong></p>\n\n<p>There\'s yet another point of contention to be aware of. By default, Android will automatically assign initial focus to the first <code>EditText</code> or focusable control in your <code>Activity</code>.  It naturally follows that the InputMethod (typically the soft keyboard) will respond to the focus event by showing itself. The <code>windowSoftInputMode</code> attribute in <code>AndroidManifest.xml</code>, when set to <code>stateAlwaysHidden</code>, instructs the keyboard to ignore this automatically-assigned initial focus. </p>\n\n<pre><code>&lt;activity\n    android:name=\".MyActivity\"\n    android:windowSoftInputMode=\"stateAlwaysHidden\"/&gt;\n</code></pre>\n\n<p>Almost unbelievably, it appears to do nothing to prevent the keyboard from opening when you touch the control (unless <code>focusable=\"false\"</code> and/or <code>focusableInTouchMode=\"false\"</code> are assigned to the control). Apparently, the windowSoftInputMode setting applies only to automatic focus events, not to focus events triggered by touch events.</p>\n\n<p>Therefore, <code>stateAlwaysHidden</code> is VERY poorly named indeed. It should perhaps be called <code>ignoreInitialFocus</code> instead. </p>\n\n<p>Hope this helps.</p>\n\n<hr>\n\n<p><strong>UPDATE: More ways to get a window token</strong></p>\n\n<p>If there is no focused view (e.g. can happen if you just changed fragments), there are other views that will supply a useful window token.</p>\n\n<p>These are alternatives for the above code <code>if (view == null)   view = new View(activity);</code>  These don\'t refer explicitly to your activity.</p>\n\n<p>Inside a fragment class:</p>\n\n<pre><code>view = getView().getRootView().getWindowToken();\n</code></pre>\n\n<p>Given a fragment <code>fragment</code> as a parameter:</p>\n\n<pre><code>view = fragment.getView().getRootView().getWindowToken();\n</code></pre>\n\n<p>Starting from your content body:</p>\n\n<pre><code>view = findViewById(android.R.id.content).getRootView().getWindowToken();\n</code></pre>\n\n<hr>\n\n<p><strong>UPDATE 2: Clear focus to avoid showing keyboard again if you open the app from the background</strong></p>\n\n<p>Add this line to the end of the method:</p>\n\n<p><code>view.clearFocus();</code></p>\n',1374500669,2067,17789187),('<p>Hit the <kbd>Esc</kbd> key to enter \"Normal mode\". Then you can type <code>:</code> to enter \"Command-line mode\". A colon (<code>:</code>) will appear at the bottom of the screen and you can type in one of the following commands. To execute a command, press the <kbd>Enter</kbd> key.</p>\n\n<ul>\n<li><code>:q</code>  to quit (short for <code>:quit</code>)</li>\n<li><code>:q!</code> to quit without saving (short for <code>:quit!</code>)</li>\n<li><code>:wq</code> to write and quit</li>\n<li><code>:wq!</code> to write and quit even if file has only read permission (if file does not have write permission: force write)</li>\n<li><code>:x</code>  to write and quit (similar to <code>:wq</code>, but only write if there are changes)</li>\n<li><code>:exit</code> to write and exit (same as <code>:x</code>)</li>\n<li><code>:qa</code> to quit all (short for <code>:quitall</code>)</li>\n<li><code>:cq</code> to quit without saving and make Vim return non-zero error (i.e. exit with error)</li>\n</ul>\n\n<p>You can also exit Vim directly from \"Normal mode\" by typing <code>ZZ</code> to save and quit (same as <code>:x</code>) or <code>ZQ</code> to just quit (same as <code>:q!</code>). (Note that case is important here. <code>ZZ</code> and <code>zz</code> do not mean the same thing.)</p>\n\n<p>Vim has extensive help - that you can access with the <code>:help</code> command - where you can find answers to all your questions and a tutorial for beginners.</p>\n',1344257176,4957,11828573),('<pre><code>foreach (Suit suit in (Suit[]) Enum.GetValues(typeof(Suit)))\n{\n}\n</code></pre>\n\n<p><strong>Note</strong>: The cast to <code>(Suit[])</code> is not strictly necessary, <a href=\"https://gist.github.com/bartoszkp/9e059c3edccc07a5e588#gistcomment-2625454\" rel=\"noreferrer\">but it does make the code 0.5 ns faster</a>.</p>\n',1221856638,4634,105402),('<p>There are several differences between <a href=\"http://java.sun.com/javase/7/docs/api/java/util/HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a> and <a href=\"http://java.sun.com/javase/7/docs/api/java/util/Hashtable.html\" rel=\"noreferrer\"><code>Hashtable</code></a> in Java:</p>\n\n<ol>\n<li><p><code>Hashtable</code> is <a href=\"https://stackoverflow.com/questions/1085709/what-does-synchronized-mean\">synchronized</a>, whereas <code>HashMap</code> is not. This makes <code>HashMap</code> better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.</p></li>\n<li><p><code>Hashtable</code> does not allow <code>null</code> keys or values.  <code>HashMap</code> allows one <code>null</code> key and any number of <code>null</code> values.</p></li>\n<li><p>One of HashMap\'s subclasses is <a href=\"http://java.sun.com/javase/7/docs/api/java/util/LinkedHashMap.html\" rel=\"noreferrer\"><code>LinkedHashMap</code></a>, so in the event that you\'d want predictable iteration order (which is insertion order by default), you could easily swap out the <code>HashMap</code> for a <code>LinkedHashMap</code>.  This wouldn\'t be as easy if you were using <code>Hashtable</code>.</p></li>\n</ol>\n\n<p>Since synchronization is not an issue for you, I\'d recommend <code>HashMap</code>. If synchronization becomes an issue, you may also look at <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html\" rel=\"noreferrer\"><code>ConcurrentHashMap</code></a>.</p>\n',1220396557,3780,40878),('<p>To check if a directory exists in a shell script, you can use the following:</p>\n\n<pre><code>if [ -d \"$DIRECTORY\" ]; then\n  # Control will enter here if $DIRECTORY exists.\nfi\n</code></pre>\n\n<p>Or to check if a directory doesn\'t exist:</p>\n\n<pre><code>if [ ! -d \"$DIRECTORY\" ]; then\n  # Control will enter here if $DIRECTORY doesn\'t exist.\nfi\n</code></pre>\n\n<hr>\n\n<p>However, as <a href=\"https://stackoverflow.com/users/1438/jon-ericson\">Jon Ericson</a> points out, subsequent commands may not work as intended if you do not take into account that a symbolic link to a directory will also pass this check.\nE.g. running this:</p>\n\n<pre><code>ln -s \"$ACTUAL_DIR\" \"$SYMLINK\"\nif [ -d \"$SYMLINK\" ]; then \n  rmdir \"$SYMLINK\" \nfi\n</code></pre>\n\n<p>Will produce the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rmdir: failed to remove `symlink\': Not a directory\n</code></pre>\n\n<p>So symbolic links may have to be treated differently, if subsequent commands expect directories:</p>\n\n<pre><code>if [ -d \"$LINK_OR_DIR\" ]; then \n  if [ -L \"$LINK_OR_DIR\" ]; then\n    # It is a symlink!\n    # Symbolic link specific commands go here.\n    rm \"$LINK_OR_DIR\"\n  else\n    # It\'s a directory!\n    # Directory command goes here.\n    rmdir \"$LINK_OR_DIR\"\n  fi\nfi\n</code></pre>\n\n<hr>\n\n<p>Take particular note of the double-quotes used to wrap the variables. The reason for this is explained by 8jean <a href=\"https://stackoverflow.com/a/67458/102401\">in another answer</a>.</p>\n\n<p>If the variables contain spaces or other unusual characters it will probably cause the script to fail.</p>\n',1221250026,5171,59839),('<pre><code>UPDATE\n    Table_A\nSET\n    Table_A.col1 = Table_B.col1,\n    Table_A.col2 = Table_B.col2\nFROM\n    Some_Table AS Table_A\n    INNER JOIN Other_Table AS Table_B\n        ON Table_A.id = Table_B.id\nWHERE\n    Table_A.col3 = \'cool\'\n</code></pre>\n',1267108795,5391,2334741),('<p>Docker originally used <a href=\"https://linuxcontainers.org/lxc/\" rel=\"noreferrer\">LinuX Containers</a> (LXC), but later switched to <a href=\"https://github.com/opencontainers/runc\" rel=\"noreferrer\">runC</a> (formerly known as <strong>libcontainer</strong>), which runs in the same operating system as its host. This allows it to share a lot of the host operating system resources. Also, it uses a layered filesystem (<a href=\"http://aufs.sourceforge.net/\" rel=\"noreferrer\">AuFS</a>) and manages networking.</p>\n\n<p>AuFS is a layered file system, so you can have a read only part and a write part which are merged together. One could have the common parts of the operating system as read only (and shared amongst all of your containers) and then give each container its own mount for writing.</p>\n\n<p>So, let\'s say you have a 1&nbsp;GB container image; if you wanted to use a full VM, you would need to have 1&nbsp;GB x number of VMs you want. With Docker and AuFS you can share the bulk of the 1&nbsp;GB between all the containers and if you have 1000 containers you still might only have a little over 1&nbsp;GB of space for the containers OS (assuming they are all running the same OS image).</p>\n\n<p>A full virtualized system gets its own set of resources allocated to it, and does minimal sharing. You get more isolation, but it is much heavier (requires more resources). With Docker you get less isolation, but the containers are lightweight (require fewer resources). So you could easily run thousands of containers on a host, and it won\'t even blink. Try doing that with Xen, and unless you have a really big host, I don\'t think it is possible.</p>\n\n<p>A full virtualized system usually takes minutes to start, whereas Docker/LXC/runC containers take seconds, and often even less than a second.</p>\n\n<p>There are pros and cons for each type of virtualized system. If you want full isolation with guaranteed resources, a full VM is the way to go. If you just want to isolate processes from each other and want to run a ton of them on a reasonably sized host, then Docker/LXC/runC seems to be the way to go.</p>\n\n<p>For more information, check out <a href=\"http://web.archive.org/web/20150326185901/http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part\" rel=\"noreferrer\">this set of blog posts</a> which do a good job of explaining how LXC works.</p>\n\n<blockquote>\n  <p>Why is deploying software to a docker image (if that\'s the right term) easier than simply deploying to a consistent production environment?</p>\n</blockquote>\n\n<p>Deploying a consistent production environment is easier said than done. Even if you use tools like <a href=\"https://en.wikipedia.org/wiki/Chef_%28software%29\" rel=\"noreferrer\">Chef</a> and <a href=\"https://en.wikipedia.org/wiki/Puppet_%28software%29\" rel=\"noreferrer\">Puppet</a>, there are always OS updates and other things that change between hosts and environments.</p>\n\n<p>Docker gives you the ability to snapshot the OS into a shared image, and makes it easy to deploy on other Docker hosts. Locally, dev, qa, prod, etc.: all the same image. Sure you can do this with other tools, but not nearly as easily or fast.</p>\n\n<p>This is great for testing; let\'s say you have thousands of tests that need to connect to a database, and each test needs a pristine copy of the database and will make changes to the data. The classic approach to this is to reset the database after every test either with custom code or with tools like <a href=\"https://flywaydb.org/\" rel=\"noreferrer\">Flyway</a> - this can be very time-consuming and means that tests must be run serially. However, with Docker you could create an image of your database and run up one instance per test, and then run all the tests in parallel since you know they will all be running against the same snapshot of the database. Since the tests are running in parallel and in Docker containers they could run all on the same box at the same time and should finish much faster. Try doing that with a full VM.</p>\n\n<p>From comments...</p>\n\n<blockquote>\n  <p>Interesting! I suppose I\'m still confused by the notion of \"snapshot[ting] the OS\". How does one do that without, well, making an image of the OS?</p>\n</blockquote>\n\n<p>Well, let\'s see if I can explain. You start with a base image, and then make your changes, and commit those changes using docker, and it creates an image. This image contains only the differences from the base. When you want to run your image, you also need the base, and it layers your image on top of the base using a layered file system: as mentioned above, Docker uses AuFS. AuFS merges the different layers together and you get what you want; you just need to run it. You can keep adding more and more images (layers) and it will continue to only save the diffs. Since Docker typically builds on top of ready-made images from a <a href=\"https://registry.hub.docker.com/\" rel=\"noreferrer\">registry</a>, you rarely have to \"snapshot\" the whole OS yourself.</p>\n',1366151727,3449,16048358),('<p>As always with these questions, the JLS holds the answer. In this case <a href=\"http://docs.oracle.com/javase/specs/jls/se14/html/jls-15.html#jls-15.26.2\" rel=\"noreferrer\">§15.26.2 Compound Assignment Operators</a>. An extract:</p>\n\n<blockquote>\n  <p>A compound assignment expression of the form <code>E1&nbsp;op=&nbsp;E2</code> is equivalent to <code>E1&nbsp;=&nbsp;(T)((E1)&nbsp;op&nbsp;(E2))</code>, where <code>T</code> is the type of <code>E1</code>, except that <code>E1</code> is evaluated only once.</p>\n</blockquote>\n\n<p>An example cited from <a href=\"http://docs.oracle.com/javase/specs/jls/se14/html/jls-15.html#jls-15.26.2\" rel=\"noreferrer\">§15.26.2</a></p>\n\n<blockquote>\n  <p>[...] the following code is correct:</p>\n\n<pre><code>short x = 3;\nx += 4.6;\n</code></pre>\n  \n  <p>and results in x having the value 7 because it is equivalent to:</p>\n\n<pre><code>short x = 3;\nx = (short)(x + 4.6);\n</code></pre>\n</blockquote>\n\n<p>In other words, your assumption is correct.</p>\n',1325585723,2447,8710685),('<p>From their <strong><a href=\"https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java#433\" rel=\"noreferrer\">source</a></strong>, the method used to return <code>false</code> until it was changed in API 21.</p>\n\n<pre><code>/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n * @return whether the user making this call is a goat \n */\npublic boolean isUserAGoat() {\n    return false;\n}\n</code></pre>\n\n<p>It looks like the method has no real use for us as developers. Someone has previously stated that it might be an <strong><a href=\"http://en.wikipedia.org/wiki/Easter_egg_(media)\" rel=\"noreferrer\">Easter egg</a></strong>.</p>\n\n<p>In API 21 the implementation was changed to check if there is an installed app with the package <code>com.coffeestainstudios.goatsimulator</code></p>\n\n<pre><code>/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n *\n * &lt;p&gt;As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method can\n * now automatically identify goats using advanced goat recognition technology.&lt;/p&gt;\n *\n * @return Returns true if the user making this call is a goat.\n */\npublic boolean isUserAGoat() {\n    return mContext.getPackageManager()\n            .isPackageAvailable(\"com.coffeestainstudios.goatsimulator\");\n}\n</code></pre>\n\n<p>Here is the <a href=\"https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java#442\" rel=\"noreferrer\">source</a> and the <a href=\"https://android.googlesource.com/platform/frameworks/base/+/e4ab16ad98b183afbf7a21ad7314372de41a8b57%5E%21/#F1\" rel=\"noreferrer\">change</a>.</p>\n',1352882430,1799,13375461),('<p>In your local clone of your forked repository, you can add the original GitHub repository as a \"remote\".  (\"Remotes\" are like nicknames for the URLs of repositories - <code>origin</code> is one, for example.)  Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version.  In terms of commands that might look like:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># Add the remote, call it \"upstream\":\n\ngit remote add upstream https://github.com/whoever/whatever.git\n\n# Fetch all the branches of that remote into remote-tracking branches,\n# such as upstream/master:\n\ngit fetch upstream\n\n# Make sure that you\'re on your master branch:\n\ngit checkout master\n\n# Rewrite your master branch so that any commits of yours that\n# aren\'t already in upstream/master are replayed on top of that\n# other branch:\n\ngit rebase upstream/master\n</code></pre>\n\n<p>If you don\'t want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should replace the last command with <code>git merge upstream/master</code>.  However, for making further pull requests that are as clean as possible, it\'s probably better to rebase.</p>\n\n<hr>\n\n<p>If you\'ve rebased your branch onto <code>upstream/master</code> you may need to force the push in order to push it to your own forked repository on GitHub.  You\'d do that with:</p>\n\n<pre><code>git push -f origin master\n</code></pre>\n\n<p>You only need to use the <code>-f</code> the first time after you\'ve rebased.</p>\n',1314712886,4016,7244456),('<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>\n\n<p>The better option is to use the built-in function <a href=\"https://docs.python.org/3/library/functions.html#enumerate\" rel=\"noreferrer\" title=\"enumerate\"><code>enumerate()</code></a>, available in both Python 2 and 3:</p>\n\n<pre><code>for idx, val in enumerate(ints):\n    print(idx, val)\n</code></pre>\n\n<p>Check out <a href=\"https://www.python.org/dev/peps/pep-0279/\" rel=\"noreferrer\" title=\"PEP 279\">PEP 279</a> for more.</p>\n',1233960756,6168,522578),('<p>Use <code>git rebase -i &lt;after-this-commit&gt;</code> and replace \"pick\" on the second and subsequent commits with \"squash\" or \"fixup\", as described in <a href=\"http://git-scm.com/docs/git-rebase#_interactive_mode\">the manual</a>.</p>\n\n<p>In this example, <code>&lt;after-this-commit&gt;</code> is either the SHA1 hash or the relative location from the HEAD of the current branch from which commits are analyzed for the rebase command. For example, if the user wishes to view 5 commits from the current HEAD in the past the command is <code>git rebase -i HEAD~5</code>. </p>\n',1299212329,2118,5189600),('<pre><code>new ArrayList&lt;&gt;(Arrays.asList(array));\n</code></pre>\n',1222871952,4620,157950),('<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>\n\n<pre><code>class A(object):\n    def foo(self, x):\n        print \"executing foo(%s, %s)\" % (self, x)\n\n    @classmethod\n    def class_foo(cls, x):\n        print \"executing class_foo(%s, %s)\" % (cls, x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\" % x    \n\na = A()\n</code></pre>\n\n<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>\n\n<pre><code>a.foo(1)\n# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\n</code></pre>\n\n<hr>\n\n<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>\n\n<pre><code>a.class_foo(1)\n# executing class_foo(&lt;class \'__main__.A\'&gt;,1)\n</code></pre>\n\n<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be\na classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>\n\n<pre><code>A.class_foo(1)\n# executing class_foo(&lt;class \'__main__.A\'&gt;,1)\n</code></pre>\n\n<p>One use people have found for class methods is to create <a href=\"https://stackoverflow.com/a/1950927/190597\">inheritable alternative constructors</a>.</p>\n\n<hr>\n\n<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>\n\n<pre><code>a.static_foo(1)\n# executing static_foo(1)\n\nA.static_foo(\'hi\')\n# executing static_foo(hi)\n</code></pre>\n\n<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>\n\n<hr>\n\n<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don\'t just get the function,\nyou get a \"partially applied\" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>\n\n<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term \"bound\" below:</p>\n\n<pre><code>print(a.foo)\n# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;\n</code></pre>\n\n<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>\n\n<pre><code>print(a.class_foo)\n# &lt;bound method type.class_foo of &lt;class \'__main__.A\'&gt;&gt;\n</code></pre>\n\n<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns\na good \'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and\n<code>a.static_foo</code> expects 1 argument too.</p>\n\n<pre><code>print(a.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n\n<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>\n\n<pre><code>print(A.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n',1257275628,3162,1669524),('<p>You can use the <a href=\"https://docs.python.org/reference/expressions.html#membership-test-details\" rel=\"noreferrer\"><code>in</code> operator</a>:</p>\n\n<pre><code>if \"blah\" not in somestring: \n    continue\n</code></pre>\n',1281322581,6318,3437070),('<p>Since <a href=\"https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137\" rel=\"noreferrer\">git1.8.3 (April 22d, 2013)</a>:</p>\n\n<blockquote>\n  <p>There was no Porcelain way to say \"I no longer am interested in this submodule\", once you express your interest in a submodule with \"<code>submodule init</code>\".<br>\n  \"<strong><code>submodule deinit</code></strong>\" is the way to do so. </p>\n</blockquote>\n\n<p>The deletion process also uses <code>git rm</code> (since git1.8.5 October 2013).  </p>\n\n<h2>Summary</h2>\n\n<p>The 3-steps removal process would then be:</p>\n\n<pre><code>0. mv a/submodule a/submodule_tmp\n\n1. git submodule deinit -f -- a/submodule    \n2. rm -rf .git/modules/a/submodule\n3. git rm -f a/submodule\n# Note: a/submodule (no trailing slash)\n\n# or, if you want to leave it in your working tree and have done step 0\n3.   git rm --cached a/submodule\n3bis mv a/submodule_tmp a/submodule\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p><code>rm -rf</code>: This is mentioned in <a href=\"https://stackoverflow.com/users/2753241/daniel-schroeder\">Daniel Schroeder</a>\'s <a href=\"https://stackoverflow.com/a/26505847/6309\">answer</a>, and summarized by <a href=\"https://stackoverflow.com/users/246776/eonil\">Eonil</a> in <a href=\"https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000\">the comments</a>:</p>\n\n<blockquote>\n  <p>This leaves <code>.git/modules/&lt;path-to-submodule&gt;/</code> unchanged.<br>\n  So if you once delete a submodule with this method and re-add them again, it will not be possible because repository already been corrupted.</p>\n</blockquote>\n\n<hr>\n\n<p><code>git rm</code>: See <a href=\"https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef\" rel=\"noreferrer\">commit 95c16418</a>:</p>\n\n<blockquote>\n  <p>Currently using \"<code>git rm</code>\" on a submodule removes the submodule\'s work tree from that of the superproject and the gitlink from the index.<br>\n  But the submodule\'s section in <code>.gitmodules</code> is left untouched, which is a leftover of the now removed submodule and might irritate users (as opposed to the setting in <code>.git/config</code>, this must stay as a reminder that the user showed interest in this submodule so it will be repopulated later when an older commit is checked out).</p>\n  \n  <p>Let \"<code>git rm</code>\" help the user by not only removing the submodule from the work tree but by also removing the \"<code>submodule.&lt;submodule name&gt;</code>\" section from the <code>.gitmodules</code> file and stage both.</p>\n</blockquote>\n\n<hr>\n\n<p><code>git submodule deinit</code>: It stems from <a href=\"http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html\" rel=\"noreferrer\">this patch</a>:</p>\n\n<blockquote>\n  <p>With \"<code>git submodule init</code>\" the user is able to tell git they care about one or more submodules and wants to have it populated on the next call to \"<code>git submodule update</code>\".<br>\n  But currently there is no easy way they can tell git they do not care about a submodule anymore and wants to get rid of the local work tree (unless the user knows a lot about submodule internals and removes the \"<code>submodule.$name.url</code>\" setting from <code>.git/config</code> together with the work tree himself).</p>\n  \n  <p>Help those users by providing a \'<strong><code>deinit</code></strong>\' command.<br>\n  This <strong>removes the whole <code>submodule.&lt;name&gt;</code> section from <code>.git/config</code> either for the given\n  submodule(s)</strong> (or for all those which have been initialized if \'<code>.</code>\' is given).<br>\n  Fail if the current work tree contains modifications unless forced.<br>\n  Complain when for a submodule given on the command line the url setting can\'t be found in <code>.git/config</code>, but nonetheless don\'t fail. </p>\n</blockquote>\n\n<p>This takes care if the (de)initialization steps (<code>.git/config</code> and <code>.git/modules/xxx</code>)</p>\n\n<p>Since git1.8.5, the <code>git rm</code> takes <em>also</em> care of the:</p>\n\n<ul>\n<li>\'<code>add</code>\' step which records the url of a submodule in the <code>.gitmodules</code> file: it is need to removed for you.</li>\n<li>the submodule <strong><a href=\"https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598\">special entry</a></strong> (as illustrated by <a href=\"https://stackoverflow.com/q/16574625/6309\">this question</a>): the git rm removes it from the index:<br>\n<code>git rm --cached path_to_submodule</code> (no trailing slash)<br>\nThat will remove that directory stored in the index with a special mode \"160000\", marking it as a submodule root directory.</li>\n</ul>\n\n<p>If you forget that last step, and try to add what was a submodule as a regular directory, you would get error message like:</p>\n\n<pre><code>git add mysubmodule/file.txt \nPath \'mysubmodule/file.txt\' is in submodule \'mysubmodule\'\n</code></pre>\n\n<hr>\n\n<p>Note: since Git 2.17 (Q2 2018), git submodule deinit is no longer a shell script.<br>\nIt is a call to a C function.</p>\n\n<p>See <a href=\"https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2\" rel=\"noreferrer\">commit 2e61273</a>, <a href=\"https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c\" rel=\"noreferrer\">commit 1342476</a> (14 Jan 2018) by <a href=\"https://github.com/pratham-pc\" rel=\"noreferrer\">Prathamesh Chavan (<code>pratham-pc</code>)</a>.<br>\n<sup>(Merged by <a href=\"https://github.com/gitster\" rel=\"noreferrer\">Junio C Hamano -- <code>gitster</code> --</a> in <a href=\"https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54\" rel=\"noreferrer\">commit ead8dbe</a>, 13 Feb 2018)</sup>  </p>\n\n<pre><code>git ${wt_prefix:+-C \"$wt_prefix\"} submodule--helper deinit \\\n  ${GIT_QUIET:+--quiet} \\\n  ${prefix:+--prefix \"$prefix\"} \\\n  ${force:+--force} \\\n  ${deinit_all:+--all} \"$@\"\n</code></pre>\n',1366696669,2230,16162000),('<p>Given a branch <code>foo</code> and a remote <code>upstream</code>:</p>\n\n<p><strong>As of Git 1.8.0:</strong></p>\n\n<pre><code>git branch -u upstream/foo\n</code></pre>\n\n<p>Or, if local branch <code>foo</code> is not the current branch:</p>\n\n<pre><code>git branch -u upstream/foo foo\n</code></pre>\n\n<p>Or, if you like to type longer commands, these are equivalent to the above two:</p>\n\n<pre><code>git branch --set-upstream-to=upstream/foo\n\ngit branch --set-upstream-to=upstream/foo foo\n</code></pre>\n\n<p><strong>As of Git 1.7.0:</strong></p>\n\n<pre><code>git branch --set-upstream foo upstream/foo\n</code></pre>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n<li>All of the above commands will cause local branch <code>foo</code> to track remote branch <code>foo</code> from remote <code>upstream</code>.  </li>\n<li>The old (1.7.x) syntax is deprecated in favor of the new (1.8+) syntax.  The new syntax is intended to be more intuitive and easier to remember.</li>\n<li>Defining an upstream branch will fail when run against newly-created remotes that have not already been fetched. In that case, run <code>git fetch upstream</code> beforehand.</li>\n</ul>\n\n<hr>\n\n<p>See also: <a href=\"https://stackoverflow.com/q/6089294/95706\">Why do I need to do `--set-upstream` all the time?</a></p>\n',1266462412,4280,2286030),('<p>You just need to push an \'empty\' reference to the remote tag name:</p>\n<pre><code>git push origin :tagname\n</code></pre>\n<p>Or, more expressively, use the <code>--delete</code> option (or <code>-d</code> if your git version is older than 1.8.0):</p>\n<pre><code>git push --delete origin tagname\n</code></pre>\n<p>Note that git has tag namespace and branch namespace so you may use the same name for a branch and for a tag. If you want to make sure that you cannot accidentally remove the branch instead of the tag, you can specify full ref which will never delete a branch:</p>\n<pre><code>git push origin :refs/tags/tagname\n</code></pre>\n<p>If you also need to delete the local tag, use:</p>\n<pre><code>git tag --delete tagname\n</code></pre>\n<hr />\n<h3>Background</h3>\n<p>Pushing a branch, tag, or other ref to a remote repository involves specifying &quot;which repo, what source, what destination?&quot;</p>\n<pre><code>git push remote-repo source-ref:destination-ref\n</code></pre>\n<p>A real world example where you push your master branch to the origin\'s master branch is:</p>\n<pre><code>git push origin refs/heads/master:refs/heads/master\n</code></pre>\n<p>Which because of default paths, can be shortened to:</p>\n<pre><code>git push origin master:master\n</code></pre>\n<p>Tags work the same way:</p>\n<pre><code>git push origin refs/tags/release-1.0:refs/tags/release-1.0\n</code></pre>\n<p>Which can also be shortened to:</p>\n<pre><code>git push origin release-1.0:release-1.0\n</code></pre>\n<p>By omitting the source ref (the part before the colon), you push \'nothing\' to the destination, deleting the ref on the remote end.</p>\n',1301442358,5806,5480292),('<p>For <strong>BSD</strong> or <strong>GNU</strong> <code>grep</code> you can use <code>-B num</code> to set how many lines before the match and <code>-A num</code> for the number of lines after the match.</p>\n\n<pre><code>grep -B 3 -A 2 foo README.txt\n</code></pre>\n\n<p>If you want the same number of lines before and after you can use <code>-C num</code>.</p>\n\n<pre><code>grep -C 3 foo README.txt\n</code></pre>\n\n<p>This will show 3 lines before and 3 lines after.</p>\n',1218563863,4557,9083),('<p><strong>Strings are immutable</strong>. That means once you\'ve created the <code>String</code>, if another process can dump memory, there\'s no way (aside from <a href=\"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\" rel=\"noreferrer\">reflection</a>) you can get rid of the data before <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29\" rel=\"noreferrer\">garbage collection</a> kicks in.</p>\n\n<p>With an array, you can explicitly wipe the data after you\'re done with it. You can overwrite the array with anything you like, and the password won\'t be present anywhere in the system, even before garbage collection.</p>\n\n<p>So yes, this <em>is</em> a security concern - but even using <code>char[]</code> only reduces the window of opportunity for an attacker, and it\'s only for this specific type of attack.</p>\n\n<p>As noted in the comments, it\'s possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector <em>may</em> clear all memory as it goes, to avoid this sort of thing. Even if it does, there\'s still the time during which the <code>char[]</code> contains the actual characters as an attack window.</p>\n',1326723976,4303,8881376),('<p>See the <a href=\"https://docs.npmjs.com/files/package.json\" rel=\"noreferrer\">NPM docs</a> and <a href=\"https://docs.npmjs.com/misc/semver\" rel=\"noreferrer\">semver docs</a>:</p>\n\n<ul>\n<li><p>~version “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the minor version. <code>~1.2.3</code> will use releases from 1.2.3 to &lt;1.3.0.</p></li>\n<li><p>^version “Compatible with version”, will update you to all future minor/patch versions, without incrementing the major version. <code>^2.3.4</code> will use releases from 2.3.4 to &lt;3.0.0.</p></li>\n</ul>\n\n<p>See Comments below for exceptions, in particular <a href=\"https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json#comment53973834_22345808\">for pre-one versions, such as ^0.2.3</a></p>\n',1394612887,3886,22345808),('<p>Given a list of lists <code>l</code>,</p>\n\n<p><code>flat_list = [item for sublist in l for item in sublist]</code></p>\n\n<p>which means:</p>\n\n<pre><code>flat_list = []\nfor sublist in l:\n    for item in sublist:\n        flat_list.append(item)\n</code></pre>\n\n<p>is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>\n\n<p>Here is the corresponding function:</p>\n\n<pre><code>flatten = lambda l: [item for sublist in l for item in sublist]\n</code></pre>\n\n<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>\n\n<pre><code>$ python -mtimeit -s\'l=[[1,2,3],[4,5,6], [7], [8,9]]*99\' \'[item for sublist in l for item in sublist]\'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s\'l=[[1,2,3],[4,5,6], [7], [8,9]]*99\' \'sum(l, [])\'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s\'l=[[1,2,3],[4,5,6], [7], [8,9]]*99\' \'reduce(lambda x,y: x+y,l)\'\n1000 loops, best of 3: 1.1 msec per loop\n</code></pre>\n\n<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>\n\n<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\n',1244147821,4851,952952),('<h3>Python 3.6+</h3>\n\n<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}\n{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\n</code></pre>\n\n<h3>Older Python</h3>\n\n<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a list—probably a list of tuples.</p>\n\n<p>For instance,</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n</code></pre>\n\n<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\n\n<p>And for those wishing to sort on keys instead of values:</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n</code></pre>\n\n<p>In Python3 since unpacking is not allowed <a href=\"https://stackoverflow.com/a/15712231/4293057\">[1]</a> we can use </p>\n\n<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=lambda kv: kv[1])\n</code></pre>\n\n<p>If you want the output as a dict, you can use <a href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>:</p>\n\n<pre><code>import collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n</code></pre>\n',1236214774,5010,613218),('<p>Iterate through the <a href=\"http://www.java2s.com/Code/JavaAPI/java.util/HashtableentrySet.htm\" rel=\"noreferrer\"><code>entrySet()</code></a> like so:</p>\n\n<pre><code>public static void printMap(Map mp) {\n    Iterator it = mp.entrySet().iterator();\n    while (it.hasNext()) {\n        Map.Entry pair = (Map.Entry)it.next();\n        System.out.println(pair.getKey() + \" = \" + pair.getValue());\n        it.remove(); // avoids a ConcurrentModificationException\n    }\n}\n</code></pre>\n\n<p>Read more about <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Map.html\" rel=\"noreferrer\"><code>Map</code></a>.</p>\n',1246404445,3258,1066603),('<p><strong>Basics</strong></p>\n<p>For controlling &quot;cellpadding&quot; in CSS, you can simply use <code>padding</code> on table cells. E.g. for 10px of &quot;cellpadding&quot;:</p>\n<pre class=\"lang-css prettyprint-override\"><code>td { \n    padding: 10px;\n}\n</code></pre>\n<p>For &quot;cellspacing&quot;, you can apply the <code>border-spacing</code> CSS property to your table. E.g. for 10px of &quot;cellspacing&quot;:</p>\n<pre class=\"lang-css prettyprint-override\"><code>table { \n    border-spacing: 10px;\n    border-collapse: separate;\n}\n</code></pre>\n<p>This property will even allow separate horizontal and vertical spacing, something you couldn\'t do with old-school &quot;cellspacing&quot;.</p>\n<p><strong>Issues in IE ≤  7</strong></p>\n<p>This will work in almost all popular browsers except for Internet Explorer up through Internet Explorer 7, where you\'re almost out of luck. I say &quot;almost&quot; because these browsers still support the <code>border-collapse</code> property, which merges the borders of adjoining table cells. If you\'re trying to eliminate cellspacing (that is, <code>cellspacing=&quot;0&quot;</code>) then <code>border-collapse:collapse</code> should have the same effect: no space between table cells. This support is buggy, though, as it does not override an existing <code>cellspacing</code> HTML attribute on the table element.</p>\n<p>In short: for non-Internet Explorer 5-7 browsers, <code>border-spacing</code> handles you. For Internet Explorer, if your situation is just right (you want 0 cellspacing and your table doesn\'t have it defined already), you can use <code>border-collapse:collapse</code>.</p>\n<pre class=\"lang-css prettyprint-override\"><code>table { \n    border-spacing: 0;\n    border-collapse: collapse;\n}\n</code></pre>\n<p>Note: For a great overview of CSS properties that one can apply to tables and for which browsers, see this <a href=\"http://www.quirksmode.org/css/tables.html\" rel=\"nofollow noreferrer\">fantastic Quirksmode page</a>.</p>\n',1278642842,3573,3209434),('<p>The <a href=\"http://ex-parrot.com/~pdw/Mail-RFC822-Address.html\" rel=\"noreferrer\">fully RFC 822 compliant regex</a> is inefficient and obscure because of its length.  Fortunately, RFC 822 was superseded twice and the current specification for email addresses is <a href=\"http://www.ietf.org/rfc/rfc5322.txt\" rel=\"noreferrer\">RFC 5322</a>.  RFC 5322 leads to a regex that can be understood if studied for a few minutes and is efficient enough for actual use.</p>\n\n<p>One RFC 5322 compliant regex can be found at the top of the page at <a href=\"http://emailregex.com/\" rel=\"noreferrer\">http://emailregex.com/</a> but uses the IP address pattern that is floating around the internet with a bug that allows <code>00</code> for any of the unsigned byte decimal values in a dot-delimited address, which is illegal.  The rest of it appears to be consistent with the RFC 5322 grammar and passes several tests using <code>grep -Po</code>, including cases domain names, IP addresses, bad ones, and account names with and without quotes.</p>\n\n<p>Correcting the <code>00</code> bug in the IP pattern, we obtain a working and fairly fast regex.  (Scrape the rendered version, not the markdown, for actual code.)</p>\n\n<blockquote>\n  <p>(?:[a-z0-9!#$%&amp;\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;\'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])</p>\n</blockquote>\n\n<p>or:</p>\n\n<pre><code>(?:[a-z0-9!#$%&amp;\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;\'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n</code></pre>\n\n<p>Here is <a href=\"https://regexper.com/#(%3F%3A%5Ba-z0-9!%23%24%25%26&#39;*%2B%2F%3D%3F%5E_%60%7B%7C%7D~-%5D%2B(%3F%3A%5C.%5Ba-z0-9!%23%24%25%26&#39;*%2B%2F%3D%3F%5E_%60%7B%7C%7D~-%5D%2B)*%7C%22(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21%5Cx23-%5Cx5b%5Cx5d-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)*%22)%40(%3F%3A(%3F%3A%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%5C.)%2B%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%7C%5C%5B(%3F%3A(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D))%5C.)%7B3%7D(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D)%7C%5Ba-z0-9-%5D*%5Ba-z0-9%5D%3A(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21-%5Cx5a%5Cx53-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)%2B)%5C%5D)\" rel=\"noreferrer\">diagram</a> of <a href=\"https://en.wikipedia.org/wiki/Finite-state_machine\" rel=\"noreferrer\">finite state machine</a> for above regexp which is more clear than regexp itself\n<a href=\"https://i.stack.imgur.com/YI6KR.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/YI6KR.png\" alt=\"enter image description here\"></a></p>\n\n<p>The more sophisticated patterns in Perl and PCRE (regex library used e.g. in PHP) can <a href=\"https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">correctly parse RFC 5322 without a hitch</a>. Python and C# can do that too, but they use a different syntax from those first two. However, if you are forced to use one of the many less powerful pattern-matching languages, then it’s best to use a real parser.</p>\n\n<p>It\'s also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered on the same web page as was the address. </p>\n\n<p>Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down <code>president@whitehouse.gov</code>, and that will even parse as legal, but it isn\'t likely to be the person at the other end.</p>\n\n<p>For PHP, you should <em>not</em> use the pattern given in <a href=\"http://www.linuxjournal.com/article/9585\" rel=\"noreferrer\">Validate an E-Mail Address with PHP, the Right Way</a> from which I quote:</p>\n\n<blockquote>\n  <p>There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.</p>\n</blockquote>\n\n<p>That is no better than all the other non-RFC patterns. It isn’t even smart enough to handle even <a href=\"http://www.ietf.org/rfc/rfc0822.txt\" rel=\"noreferrer\">RFC 822</a>, let alone RFC 5322. <a href=\"https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">This one</a>, however, is.</p>\n\n<p>If you want to get fancy and pedantic, <a href=\"http://cubicspot.blogspot.com/2012/06/correct-way-to-validate-e-mail-address.html\" rel=\"noreferrer\">implement a complete state engine</a>. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can\'t handle it is just rude and impolite from the user\'s perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like</p>\n\n<blockquote>\n  <p>The specified e-mail address \'myemail@address,com\' is invalid. Did you mean \'myemail@address.com\'?</p>\n</blockquote>\n\n<p>See also <a href=\"http://worsethanfailure.com/Articles/Validating_Email_Addresses.aspx\" rel=\"noreferrer\">Validating Email Addresses</a>, including the comments. Or <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\" rel=\"noreferrer\">Comparing E-mail Address Validating Regular Expressions</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/SrUwP.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SrUwP.png\" alt=\"Regular expression visualization\"></a></p>\n\n<p><a href=\"https://www.debuggex.com/r/aH_x42NflV8G-GS7\" rel=\"noreferrer\">Debuggex Demo</a></p>\n',1223994403,2453,201378),('<p>From the AngularJS mailing list I got <a href=\"https://groups.google.com/forum/#!msg/angular/56sdORWEoqg/HuZsOsMvKv4J\" rel=\"noreferrer\">an amazing thread</a> that explains service vs factory vs provider and their injection usage. Compiling the answers:</p>\n<h1>Services</h1>\n<p>Syntax: <code>module.service( \'serviceName\', function );</code> <br/>\nResult: When declaring serviceName as an injectable argument <strong>you will be provided with an instance of the function. In other words</strong> <code>new FunctionYouPassedToService()</code>.</p>\n<h1>Factories</h1>\n<p>Syntax: <code>module.factory( \'factoryName\', function );</code> <br/>\nResult: When declaring factoryName as an injectable argument you will be provided with <strong>the value that is returned by invoking the function reference passed to module.factory</strong>.</p>\n<h1>Providers</h1>\n<p>Syntax: <code>module.provider( \'providerName\', function );</code> <br/>\nResult: When declaring providerName as an injectable argument <strong>you will be provided with</strong> <code>(new ProviderFunction()).$get()</code>. The constructor function is instantiated before the $get method is called - <code>ProviderFunction</code> is  the function reference passed to module.provider.</p>\n<p>Providers have the advantage that they can be configured during the module configuration phase.</p>\n<p>See <a href=\"http://jsbin.com/ohamub/1/edit\" rel=\"noreferrer\">here</a> for the provided code.</p>\n<p>Here\'s a great further explanation by Misko:</p>\n<pre><code>provide.value(\'a\', 123);\n\nfunction Controller(a) {\n  expect(a).toEqual(123);\n}\n</code></pre>\n<p>In this case the injector simply returns the value as is. But what if you want to compute the value? Then use a factory</p>\n<pre><code>provide.factory(\'b\', function(a) {\n  return a*2;\n});\n\nfunction Controller(b) {\n  expect(b).toEqual(246);\n}\n</code></pre>\n<p>So <code>factory</code> is a function which is responsible for creating the value. Notice that the factory function can ask for other dependencies.</p>\n<p>But what if you want to be more OO and have a class called Greeter?</p>\n<pre><code>function Greeter(a) {\n  this.greet = function() {\n    return \'Hello \' + a;\n  }\n}\n</code></pre>\n<p>Then to instantiate you would have to write</p>\n<pre><code>provide.factory(\'greeter\', function(a) {\n  return new Greeter(a);\n});\n</code></pre>\n<p>Then we could ask for \'greeter\' in controller like this</p>\n<pre><code>function Controller(greeter) {\n  expect(greeter instanceof Greeter).toBe(true);\n  expect(greeter.greet()).toEqual(\'Hello 123\');\n}\n</code></pre>\n<p>But that is way too wordy. A shorter way to write this would be <code>provider.service(\'greeter\', Greeter);</code></p>\n<p>But what if we wanted to configure the <code>Greeter</code> class before the injection? Then we could write</p>\n<pre><code>provide.provider(\'greeter2\', function() {\n  var salutation = \'Hello\';\n  this.setSalutation = function(s) {\n    salutation = s;\n  }\n\n  function Greeter(a) {\n    this.greet = function() {\n      return salutation + \' \' + a;\n    }\n  }\n\n  this.$get = function(a) {\n    return new Greeter(a);\n  };\n});\n</code></pre>\n<p>Then we can do this:</p>\n<pre><code>angular.module(\'abc\', []).config(function(greeter2Provider) {\n  greeter2Provider.setSalutation(\'Halo\');\n});\n\nfunction Controller(greeter2) {\n  expect(greeter2.greet()).toEqual(\'Halo 123\');\n}\n</code></pre>\n<p>As a side note, <code>service</code>, <code>factory</code>, and <code>value</code> are all derived from provider.</p>\n<pre><code>provider.service = function(name, Class) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.instantiate(Class);\n    };\n  });\n}\n\nprovider.factory = function(name, factory) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.invoke(factory);\n    };\n  });\n}\n\nprovider.value = function(name, value) {\n  provider.factory(name, function() {\n    return value;\n  });\n};\n</code></pre>\n',1364407186,2869,15666049),('<pre><code>Map&lt;String, String&gt; map = ...\nfor (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \"/\" + entry.getValue());\n}\n</code></pre>\n',1220649352,5054,46908),('<p>It\'s pretty simple really:</p>\n\n<pre><code>a[start:stop]  # items start through stop-1\na[start:]      # items start through the rest of the array\na[:stop]       # items from the beginning through stop-1\na[:]           # a copy of the whole array\n</code></pre>\n\n<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\n\n<pre><code>a[start:stop:step] # start through not past stop, by step\n</code></pre>\n\n<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\n\n<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\n\n<pre><code>a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n</code></pre>\n\n<p>Similarly, <code>step</code> may be a negative number:</p>\n\n<pre><code>a[::-1]    # all items in the array, reversed\na[1::-1]   # the first two items, reversed\na[:-3:-1]  # the last two items, reversed\na[-3::-1]  # everything except the last two items, reversed\n</code></pre>\n\n<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\n\n<h3>Relation to <code>slice()</code> object</h3>\n\n<p>The slicing operator <code>[]</code> is actually being used in the above code with a <code>slice()</code> object using the <code>:</code> notation (which is only valid within <code>[]</code>), i.e.:</p>\n\n<pre><code>a[start:stop:step]\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>a[slice(start, stop, step)]\n</code></pre>\n\n<p>Slice objects also behave slightly differently depending on the number of arguments, similarly to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.\nTo skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>\n\n<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>\n',1233701304,4560,509295),('<p>The <a href=\"http://man7.org/linux/man-pages/man1/test.1.html\" rel=\"noreferrer\">test</a> command (<code>[</code> here) has a \"not\" logical operator which is the exclamation point (similar to many other languages). Try this:</p>\n\n<pre><code>if [ ! -f /tmp/foo.txt ]; then\n    echo \"File not found!\"\nfi\n</code></pre>\n',1236869401,4542,638980),('<p><strong>Careful:</strong> <code>git reset --hard</code> <em>WILL DELETE YOUR WORKING DIRECTORY CHANGES</em>. Be sure to <strong>stash any local changes you want to keep</strong> before running this command.</p>\n\n<p>Assuming you are sitting on that commit, then this command will wack it...</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p>The <code>HEAD~1</code> means the commit before head.</p>\n\n<p>Or, you could look at the output of <code>git log</code>, find the commit id of the commit you want to back up to, and then do this:</p>\n\n<pre><code>git reset --hard &lt;sha1-commit-id&gt;\n</code></pre>\n\n<hr/>\n\n<p>If you already pushed it, you will need to do a force push to get rid of it...</p>\n\n<pre><code>git push origin HEAD --force\n</code></pre>\n\n<p><strong>However</strong>, if others may have pulled it, then you would be better off starting a new branch.  Because when they pull, it will just merge it into their work, and you will get it pushed back up again.</p>\n\n<p>If you already pushed, it may be better to use <code>git revert</code>, to create a \"mirror image\" commit that will undo the changes.  However, both commits will be in the log.</p>\n\n<hr />\n\n<p>FYI -- <code>git reset --hard HEAD</code> is great if you want to get rid of WORK IN PROGRESS.  It will reset you back to the most recent commit, and erase all the changes in your working tree and index.</p>\n\n<hr />\n\n<p>Lastly, if you need to find a commit that you \"deleted\", it is typically present in <code>git reflog</code> unless you have garbage collected your repository.</p>\n',1251344644,4153,1338744),('<p>Here\'s a good way to create a true memory leak (objects inaccessible by running code but still stored in memory) in pure Java:</p>\n\n<ol>\n<li>The application creates a long-running thread (or use a thread pool to leak even faster).</li>\n<li>The thread loads a class via an (optionally custom) <code>ClassLoader</code>.</li>\n<li>The class allocates a large chunk of memory (e.g. <code>new byte[1000000]</code>), stores a strong reference to it in a static field, and then stores a reference to itself in a <code>ThreadLocal</code>.  Allocating the extra memory is optional (leaking the class instance is enough), but it will make the leak work that much faster.</li>\n<li>The application clears all references to the custom class or the <code>ClassLoader</code> it was loaded from.</li>\n<li>Repeat.</li>\n</ol>\n\n<p>Due to the way <code>ThreadLocal</code> is implemented in Oracle\'s JDK, this creates a memory leak:</p>\n\n<ul>\n<li>Each <code>Thread</code> has a private field <code>threadLocals</code>, which actually stores the thread-local values.</li>\n<li>Each <em>key</em> in this map is a weak reference to a <code>ThreadLocal</code> object, so after that <code>ThreadLocal</code> object is garbage-collected, its entry is removed from the map.</li>\n<li>But each <em>value</em> is a strong reference, so when a value (directly or indirectly) points to the <code>ThreadLocal</code> object that is its <em>key</em>, that object will neither be garbage-collected nor removed from the map as long as the thread lives.</li>\n</ul>\n\n<p>In this example, the chain of strong references looks like this:</p>\n\n<p><code>Thread</code> object → <code>threadLocals</code> map → instance of example class → example class → static <code>ThreadLocal</code> field → <code>ThreadLocal</code> object.</p>\n\n<p>(The <code>ClassLoader</code> doesn\'t really play a role in creating the leak, it just makes the leak worse because of this additional reference chain: example class → <code>ClassLoader</code> → all the classes it has loaded. It was even worse in many JVM implementations, especially prior to Java 7, because classes and <code>ClassLoader</code>s were allocated straight into permgen and were never garbage-collected at all.)</p>\n\n<p>A variation on this pattern is why application containers (like Tomcat) can leak memory like a sieve if you frequently redeploy applications which happen to use <code>ThreadLocal</code>s that in some way point back to themselves. This can happen for a number of subtle reasons and is often hard to debug and/or fix.</p>\n\n<p><strong>Update</strong>: Since lots of people keep asking for it, <a href=\"https://gist.github.com/dpryden/b2bb29ee2d146901b4ae\" rel=\"noreferrer\">here\'s some example code that shows this behavior in action</a>.</p>\n\n\n',1308938710,2316,6471947),('<pre><code>if not a:\n  print(\"List is empty\")\n</code></pre>\n\n<p>Using the <a href=\"https://docs.python.org/library/stdtypes.html#truth-value-testing\" rel=\"noreferrer\">implicit booleanness</a> of the empty <code>list</code> is quite pythonic.</p>\n',1221028085,5562,53522),('<pre><code>&gt;&gt;&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;].index(&quot;bar&quot;)\n1\n</code></pre>\n<p>Reference: <a href=\"https://docs.python.org/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\">Data Structures &gt; More on Lists</a></p>\n<h1>Caveats follow</h1>\n<p>Note that while this is perhaps the cleanest way to answer the question <em>as asked</em>, <code>index</code> is a rather weak component of the <code>list</code> API, and I can\'t remember the last time I used it in anger. It\'s been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about <code>list.index</code> follow. It is probably worth initially taking a look at the documentation for it:</p>\n<blockquote>\n<pre><code>list.index(x[, start[, end]])\n</code></pre>\n<p>Return zero-based index in the list of the first item whose value is equal to <em>x</em>. Raises a <a href=\"https://docs.python.org/library/exceptions.html#ValueError\" rel=\"noreferrer\"><code>ValueError</code></a> if there is no such item.</p>\n<p>The optional arguments <em>start</em> and <em>end</em> are interpreted as in the <a href=\"https://docs.python.org/tutorial/introduction.html#lists\" rel=\"noreferrer\">slice notation</a> and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.</p>\n</blockquote>\n<h2>Linear time-complexity in list length</h2>\n<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If your list is long, and you don\'t know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give <code>index</code> a hint. For instance, in this snippet, <code>l.index(999_999, 999_990, 1_000_000)</code> is roughly five orders of magnitude faster than straight <code>l.index(999_999)</code>, because the former only has to search 10 entries, while the latter searches a million:</p>\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.timeit(\'l.index(999_999)\', setup=\'l = list(range(0, 1_000_000))\', number=1000)\n9.356267921015387\n&gt;&gt;&gt; timeit.timeit(\'l.index(999_999, 999_990, 1_000_000)\', setup=\'l = list(range(0, 1_000_000))\', number=1000)\n0.0004404920036904514\n \n</code></pre>\n<h2>Only returns the index of the <em>first match</em> to its argument</h2>\n<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If you expect to need indices of more matches, you should use a list comprehension, or generator expression.</p>\n<pre><code>&gt;&gt;&gt; [1, 1].index(1)\n0\n&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]\n[0, 2]\n&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)\n&gt;&gt;&gt; next(g)\n0\n&gt;&gt;&gt; next(g)\n2\n</code></pre>\n<p>Most places where I once would have used <code>index</code>, I now use a list comprehension or generator expression because they\'re more generalizable. So if you\'re considering reaching for <code>index</code>, take a look at these excellent Python features.</p>\n<h2>Throws if element not present in list</h2>\n<p>A call to <code>index</code> results in a <a href=\"https://docs.python.org/library/exceptions.html#ValueError\" rel=\"noreferrer\"><code>ValueError</code></a> if the item\'s not present.</p>\n<pre><code>&gt;&gt;&gt; [1, 1].index(2)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nValueError: 2 is not in list\n</code></pre>\n<p>If the item might not be present in the list, you should either</p>\n<ol>\n<li>Check for it first with <code>item in my_list</code> (clean, readable approach), or</li>\n<li>Wrap the <code>index</code> call in a <code>try/except</code> block which catches <code>ValueError</code> (probably faster, at least when the list to search is long, and the item is usually present.)</li>\n</ol>\n',1223343649,4534,176921),('<p>From a string:</p>\n\n<pre><code>YourEnum foo = (YourEnum) Enum.Parse(typeof(YourEnum), yourString);\n\n// The foo.ToString().Contains(\",\") check is necessary for enumerations marked with an [Flags] attribute\nif (!Enum.IsDefined(typeof(YourEnum), foo) &amp;&amp; !foo.ToString().Contains(\",\"))\n{\n    throw new InvalidOperationException($\"{yourString} is not an underlying value of the YourEnum enumeration.\")\n}\n</code></pre>\n\n<p>From an int:</p>\n\n<pre><code>YourEnum foo = (YourEnum)yourInt;\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>From number you can also</p>\n\n<pre><code>YourEnum foo = (YourEnum)Enum.ToObject(typeof(YourEnum) , yourInt);\n</code></pre>\n',1219809582,3816,29485),('<p>The easiest way would be to find the head commit of the branch as it was immediately before the rebase started in the <a href=\"https://git-scm.com/docs/git-reflog\" rel=\"noreferrer\">reflog</a>...</p>\n\n<pre><code>git reflog\n</code></pre>\n\n<p>and to reset the current branch to it (with the usual caveats about being absolutely sure before reseting with the <code>--hard</code> option).</p>\n\n<p>Suppose the old commit was <code>HEAD@{5}</code> in the ref log:</p>\n\n<pre><code>git reset --hard HEAD@{5}\n</code></pre>\n\n<p><em>In Windows, you may need to quote the reference:</em></p>\n\n<pre><code>git reset --hard \"HEAD@{5}\"\n</code></pre>\n\n<p>You can check the history of the candidate old head by just doing a <code>git log HEAD@{5}</code> (<em>Windows:</em> <code>git log \"HEAD@{5}\"</code>).</p>\n\n<p>If you\'ve not disabled per branch reflogs you should be able to simply do <code>git reflog branchname@{1}</code> as a rebase detaches the branch head before reattaching to the final head. I would double check this, though as I haven\'t verified this recently.</p>\n\n<p>Per default, all reflogs are activated for non-bare repositories:</p>\n\n<pre><code>[core]\n    logAllRefUpdates = true\n</code></pre>\n',1222372588,4368,135614),('<p>There is currently no way to select the parent of an element in CSS.</p>\n\n<p>If there was a way to do it, it would be in either of the current CSS selectors specs:</p>\n\n<ul>\n<li><a href=\"https://www.w3.org/TR/css3-selectors/#selectors\" rel=\"noreferrer\">Selectors Level 3 Spec</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS2/selector.html#pattern-matching\" rel=\"noreferrer\">CSS 2.1 Selectors Spec</a></li>\n</ul>\n\n<p>That said, the <a href=\"https://dev.w3.org/csswg/selectors4/#relational\" rel=\"noreferrer\">Selectors Level 4 Working Draft</a> includes a <code>:has()</code> pseudo-class that will provide this capability. It will be similar to the <a href=\"https://api.jquery.com/has-selector/\" rel=\"noreferrer\">jQuery implementation</a>. </p>\n\n<pre class=\"lang-css prettyprint-override\"><code>li:has(&gt; a.active) { /* styles to apply to the li tag */ }\n</code></pre>\n\n<p>However, as of May 2020, <strong><a href=\"https://caniuse.com/#feat=css-has\" rel=\"noreferrer\">this is still not supported by any browser</a></strong>. </p>\n\n<p>In the meantime, you\'ll have to resort to JavaScript if you need to select a parent element.</p>\n',1245356210,2551,1014958),('<p><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\" rel=\"noreferrer\">The official tutorial</a> may be of some use to you.</p>\n\n<pre>\n______________________________________________________________\n|           │ Class │ Package │ Subclass │ Subclass │ World  |\n|           │       │         │(same pkg)│(diff pkg)│        |\n|───────────┼───────┼─────────┼──────────┼──────────┼────────|\n|public     │   +   │    +    │    +     │     +    │   +    | \n|───────────┼───────┼─────────┼──────────┼──────────┼────────|\n|protected  │   +   │    +    │    +     │     +    │        | \n|───────────┼───────┼─────────┼──────────┼──────────┼────────|\n|no modifier│   +   │    +    │    +     │          │        | \n|───────────┼───────┼─────────┼──────────┼──────────┼────────|\n|private    │   +   │         │          │          │        |\n|___________|_______|_________|__________|__________|________|\n + : accessible         blank : not accessible\n</pre>\n',1224359870,5658,215505),('<p><code>key</code> is just a variable name.  </p>\n\n<pre><code>for key in d:\n</code></pre>\n\n<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>\n\n<p>For Python 3.x:</p>\n\n<pre><code>for key, value in d.items():\n</code></pre>\n\n<p>For Python 2.x:</p>\n\n<pre><code>for key, value in d.iteritems():\n</code></pre>\n\n<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>\n\n<p>In Python 3.x, <code>iteritems()</code> was replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. \nThis is also available in 2.7 as <code>viewitems()</code>. </p>\n\n<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary\'s <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>\n',1279664973,5431,3294899),('<p>Use the following:</p>\n\n<pre><code>git checkout -b &lt;new-branch&gt;\n</code></pre>\n\n<p>This will leave your current branch as it is, create and checkout a new branch and keep all your changes. You can then stage changes in files to commit with:</p>\n\n<pre><code>git add &lt;files&gt;\n</code></pre>\n\n<p>and commit to your <em>new branch</em> with: </p>\n\n<pre><code>git commit -m \"&lt;Brief description of this commit&gt;\"\n</code></pre>\n\n<p>The changes in the working directory and changes staged in index <em>do not belong to any branch</em> yet. This changes the branch where those modifications would end in.</p>\n\n<p>You don\'t <em>reset</em> your original branch, it stays as it is. The last commit on <code>&lt;old-branch&gt;</code> will still be the same. Therefore you <code>checkout -b</code> and then commit.</p>\n\n<hr>\n\n<h3>Update 2020 / Git 2.23</h3>\n\n<p>Git 2.23 adds the new <code>switch</code> subcommand in an attempt to clear some of the confusion that comes from the overloaded usage of <code>checkout</code> (switching branches, restoring files, detaching HEAD, etc.)</p>\n\n<p>Starting with this version of Git, replace above\'s command with:</p>\n\n<pre><code>git switch -c &lt;new-branch&gt;\n</code></pre>\n\n<p>The behavior is identical and remains unchanged.</p>\n',1252425543,3662,1394804),('<h2>Simple Git 2.0+ solution:</h2>\n\n<p>As of <strong>Git 2.0 the behaviour has become simpler</strong>: </p>\n\n<p>You can configure git with <strong><code>push.default = current</code></strong> to make life easier:</p>\n\n<p>I added this so now I can just push a new branch upstream with</p>\n\n<pre><code>$ git push -u\n</code></pre>\n\n<p><code>-u</code> will track remote branch of same name. Now with this configuration you will auto-guess the remote reference to git push. From <a href=\"http://git-scm.com/docs/git-config\" rel=\"noreferrer\">git.config documentation</a>:</p>\n\n<blockquote>\n  <p><strong>push.default</strong> </p>\n  \n  <p>Defines the action git push should take if no refspec is explicitly given.</p>\n  \n  <p><strong><code>push.default = current</code></strong> - push the current branch to update a branch with the \n  same name on the receiving end. Works in both central and non-central workflows.</p>\n</blockquote>\n\n<p>For me, this is a good simplification of my day-to-day Git workflow. The configuration setting takes care of the \'usual\' use case where you add a branch locally and want to create it remotely. Also, I can just as easily create local branches from remotes by just doing <code>git co remote_branch_name</code> (as opposed to using <code>--set-upstream-to</code> flag). </p>\n\n<p>I know this question and the accepted answers are rather old, but the behaviour has changed so that now configuration options exists to make your workflow simpler. </p>\n\n<p>To add to your global Git configuration, run this on the command line:</p>\n\n<pre><code>$ git config --global push.default current\n</code></pre>\n',1417167961,331,27185855),('<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#Browser_compatibility\" rel=\"noreferrer\">ECMA 5+</a>:</p>\n\n<pre><code>// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 &amp;&amp; obj.constructor === Object\n</code></pre>\n\n<p>Note, though, that this creates an unnecessary array (the return value of <code>keys</code>).</p>\n\n<p>Pre-ECMA 5:</p>\n\n<pre><code>function isEmpty(obj) {\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n</code></pre>\n\n<p><a href=\"https://api.jquery.com/jQuery.isEmptyObject/\" rel=\"noreferrer\">jQuery</a>:</p>\n\n<pre><code>jQuery.isEmptyObject({}); // true\n</code></pre>\n\n<p><a href=\"https://lodash.com/docs#isEmpty\" rel=\"noreferrer\">lodash</a>:</p>\n\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n\n<p><a href=\"https://underscorejs.org/#isEmpty\" rel=\"noreferrer\">Underscore</a>:</p>\n\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n\n<p><a href=\"https://github.com/hapijs/hoek\" rel=\"noreferrer\">Hoek</a></p>\n\n<pre><code>Hoek.deepEqual({}, {}); // true\n</code></pre>\n\n<p><a href=\"https://docs.sencha.com/extjs/6.0.2/modern/Ext.Object.html#method-isEmpty\" rel=\"noreferrer\">ExtJS</a></p>\n\n<pre><code>Ext.Object.isEmpty({}); // true\n</code></pre>\n\n<p><a href=\"https://docs.angularjs.org/api/ng/function/angular.equals\" rel=\"noreferrer\">AngularJS (version 1)</a></p>\n\n<pre><code>angular.equals({}, {}); // true\n</code></pre>\n\n<p><a href=\"https://ramdajs.com/docs/#isEmpty\" rel=\"noreferrer\">Ramda</a></p>\n\n<pre><code>R.isEmpty({}); // true\n</code></pre>\n',1440034372,5485,32108184),('<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\n\n<pre><code>globvar = 0\n\ndef set_globvar_to_one():\n    global globvar    # Needed to modify global copy of globvar\n    globvar = 1\n\ndef print_globvar():\n    print(globvar)     # No need for global declaration to read value of globvar\n\nset_globvar_to_one()\nprint_globvar()       # Prints 1\n</code></pre>\n\n<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that\'s what you\'re playing with by explicitly requiring the <code>global</code> keyword.</p>\n\n<p>See other answers if you want to share a global variable across modules.</p>\n',1231403984,4272,423596),('<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>. If you\'re not sure&nbsp;&mdash; just start with <code>ArrayList</code>.</p>\n\n<hr>\n\n<p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the List interface. <code>LinkedList</code> implements it with a doubly-linked list. <code>ArrayList</code> implements it with a dynamically re-sizing array.</p>\n\n<p>As with standard linked list and array operations, the various methods will have different algorithmic runtimes.</p>\n\n<p>For <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html\" rel=\"noreferrer\"><code>LinkedList&lt;E&gt;</code></a></p>\n\n<ul>\n<li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average), but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case, you can also use <code>getFirst()</code> and <code>getLast()</code>). <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>\n<li><code>add(int index, E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average), but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case, you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>). <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>\n<li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average), but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case, you can also use <code>removeFirst()</code> and <code>removeLast()</code>). <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>\n<li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>\n<li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li>\n</ul>\n\n<p><sup>Note: Many of the operations need <em>n/4</em> steps on average, <em>constant</em> number of steps in the best case (e.g. index = 0), and <em>n/2</em> steps in worst case (middle of list)</sup></p>\n\n<p>For <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html\" rel=\"noreferrer\"><code>ArrayList&lt;E&gt;</code></a></p>\n\n<ul>\n<li><code>get(int index)</code> is <em>O(1)</em>. <strong>Main benefit of</strong> <code>ArrayList&lt;E&gt;</code></li>\n<li><code>add(E element)</code> is <em>O(1)</em> amortized, but <em>O(n)</em> worst-case since the array must be resized and copied</li>\n<li><code>add(int index, E element)</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>\n<li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>\n<li><code>Iterator.remove()</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>\n<li><code>ListIterator.add(E element)</code> is <em>O(n)</em> (with <em>n/2</em> steps on average)</li>\n</ul>\n\n<p><sup>Note: Many of the operations need <em>n/2</em> steps on average, <em>constant</em> number of steps in the best case (end of list), <em>n</em> steps in the worst case (start of list)</sup></p>\n\n<p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>, but only sequential access of elements. In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list. Javadoc says <em>\"operations that index into the list will traverse the list from the beginning or the end, whichever is closer\"</em>, so those methods are <em>O(n)</em> (<em>n/4</em> steps) on average, though <em>O(1)</em> for <code>index = 0</code>.</p>\n\n<p><code>ArrayList&lt;E&gt;</code>, on the other hand, allow fast random read access, so you can grab any element in constant time. But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap. Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an <code>ArrayList</code> is <em>O(n)</em> in the worst case but constant on average.</p>\n\n<p>So depending on the operations you intend to do, you should choose the implementations accordingly. Iterating over either kind of List is practically equally cheap. (Iterating over an <code>ArrayList</code> is technically faster, but unless you\'re doing something really performance-sensitive, you shouldn\'t worry about this -- they\'re both constants.)</p>\n\n<p>The main benefits of using a <code>LinkedList</code> arise when you re-use existing iterators to insert and remove elements. These operations can then be done in <em>O(1)</em> by changing the list locally only. In an array list, the remainder of the array needs to be <em>moved</em> (i.e. copied). On the other side, seeking in a <code>LinkedList</code> means following the links in <em>O(n)</em> (<em>n/2</em> steps) for worst case, whereas in an <code>ArrayList</code> the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p>\n\n<p>Another benefit of using a <code>LinkedList</code> arise when you add or remove from the head of the list, since those operations are <em>O(1)</em>, while they are <em>O(n)</em> for <code>ArrayList</code>. Note that <code>ArrayDeque</code> may be a good alternative to <code>LinkedList</code> for adding and removing from the head, but it is not a <code>List</code>.</p>\n\n<p>Also, if you have large lists, keep in mind that memory usage is also different. Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored. <code>ArrayLists</code> don\'t have this overhead. However, <code>ArrayLists</code> take up as much memory as is allocated for the capacity, regardless of whether elements have actually been added.</p>\n\n<p>The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8). But since the underlying implementation is an array, the array must be resized if you add a lot of elements. To avoid the high cost of resizing when you know you\'re going to add a lot of elements, construct the <code>ArrayList</code> with a higher initial capacity.</p>\n',1227750582,3379,322742),('<p>Converts <code>Object</code> to <code>boolean</code>. If it was falsey (e.g. <code>0</code>, <code>null</code>, <code>undefined</code>, etc.), it will be <code>false</code>, otherwise, <code>true</code>.</p>\n\n<pre><code>!oObject  // inverted boolean\n!!oObject // non inverted boolean so true boolean representation\n</code></pre>\n\n<p>So <code>!!</code> is not an operator, it\'s just the <code>!</code> operator twice.</p>\n\n<p>Real World Example \"Test IE version\":  </p>\n\n<pre><code>const isIE8 = !! navigator.userAgent.match(/MSIE 8.0/);  \nconsole.log(isIE8); // returns true or false \n</code></pre>\n\n<p>If you ⇒</p>\n\n<pre><code>console.log(navigator.userAgent.match(/MSIE 8.0/));  \n// returns either an Array or null  \n</code></pre>\n\n<p>But if you ⇒</p>\n\n<pre><code>console.log(!!navigator.userAgent.match(/MSIE 8.0/));  \n// returns either true or false\n</code></pre>\n',1240561087,2772,784946),('<p><a href=\"https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types\" rel=\"noreferrer\"><code>append</code></a>: Appends object at the end.</p>\n\n<pre><code>x = [1, 2, 3]\nx.append([4, 5])\nprint (x)\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>\n\n<hr>\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types\" rel=\"noreferrer\"><code>extend</code></a>: Extends list by appending elements from the iterable.</p>\n\n<pre><code>x = [1, 2, 3]\nx.extend([4, 5])\nprint (x)\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>\n',1225432945,5272,252711),('<p>The difference is that <code>apply</code> lets you invoke the function with <code>arguments</code> as an array; <code>call</code> requires the parameters be listed explicitly. A useful mnemonic is <em>\"<strong>A</strong> for <strong>a</strong>rray and <strong>C</strong> for <strong>c</strong>omma.\"</em></p>\n\n<p>See MDN\'s documentation on <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"noreferrer\">apply</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\" rel=\"noreferrer\">call</a>.</p>\n\n<p>Pseudo syntax:</p>\n\n<p><code>theFunction.apply(valueForThis, arrayOfArgs)</code></p>\n\n<p><code>theFunction.call(valueForThis, arg1, arg2, ...)</code></p>\n\n<p>There is also, as of ES6, the possibility to <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\"><code>spread</code></a> the array for use with the <code>call</code> function, you can see the compatibilities <a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"noreferrer\">here</a>.</p>\n\n<p>Sample code:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function theFunction(name, profession) {\r\n    console.log(\"My name is \" + name + \" and I am a \" + profession +\".\");\r\n}\r\ntheFunction(\"John\", \"fireman\");\r\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\r\ntheFunction.call(undefined, \"Claude\", \"mathematician\");\r\ntheFunction.call(undefined, ...[\"Matthew\", \"physicist\"]); // used with the spread operator</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1262289642,3657,1986909),('<p>For this I\'d use:</p>\n\n<pre><code>gitk [filename]\n</code></pre>\n\n<p>or to follow filename past renames</p>\n\n<pre><code>gitk --follow [filename]\n</code></pre>\n',1251115551,2379,1321962),('<p>To do this for any object in JavaScript will not be simple or straightforward. You will run into the problem of erroneously picking up attributes from the object\'s prototype that should be left in the prototype and not copied to the new instance. If, for instance, you are adding a <code>clone</code> method to <code>Object.prototype</code>, as some answers depict, you will need to explicitly skip that attribute. But what if there are other additional methods added to <code>Object.prototype</code>, or other intermediate prototypes, that you don\'t know about? In that case, you will copy attributes you shouldn\'t, so you need to detect unforeseen, non-local attributes with the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty\" rel=\"noreferrer\" title=\"Mozilla JavaScript Reference: Object.hasOwnProperty\"><code>hasOwnProperty</code></a> method.</p>\n\n<p>In addition to non-enumerable attributes, you\'ll encounter a tougher problem when you try to copy objects that have hidden properties. For example, <code>prototype</code> is a hidden property of a function. Also, an object\'s prototype is referenced with the attribute <code>__proto__</code>, which is also hidden, and will not be copied by a for/in loop iterating over the source object\'s attributes. I think <code>__proto__</code> might be specific to Firefox\'s JavaScript interpreter and it may be something different in other browsers, but you get the picture. Not everything is enumerable. You can copy a hidden attribute if you know its name, but I don\'t know of any way to discover it automatically.</p>\n\n<p>Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object\'s prototype is <code>Object</code>, then simply creating a new general object with <code>{}</code> will work, but if the source\'s prototype is some descendant of <code>Object</code>, then you are going to be missing the additional members from that prototype which you skipped using the <code>hasOwnProperty</code> filter, or which were in the prototype, but weren\'t enumerable in the first place. One solution might be to call the source object\'s <code>constructor</code> property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date\" rel=\"noreferrer\" title=\"Mozilla JavaScript Reference: Date\"><code>Date</code></a> object stores its data as a hidden member:</p>\n\n<pre><code>function clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    var copy = obj.constructor();\n    for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nvar d1 = new Date();\n\n/* Executes function after 5 seconds. */\nsetTimeout(function(){\n    var d2 = clone(d1);\n    alert(\"d1 = \" + d1.toString() + \"\\nd2 = \" + d2.toString());\n}, 5000);\n</code></pre>\n\n<p>The date string for <code>d1</code> will be 5 seconds behind that of <code>d2</code>. A way to make one <code>Date</code> the same as another is by calling the <code>setTime</code> method, but that is specific to the <code>Date</code> class. I don\'t think there is a bullet-proof general solution to this problem, though I would be happy to be wrong!</p>\n\n<p>When I had to implement general deep copying I ended up compromising by assuming that I would only need to copy a plain <code>Object</code>, <code>Array</code>, <code>Date</code>, <code>String</code>, <code>Number</code>, or <code>Boolean</code>. The last 3 types are immutable, so I could perform a shallow copy and not worry about it changing. I further assumed that any elements contained in <code>Object</code> or <code>Array</code> would also be one of the 6 simple types in that list. This can be accomplished with code like the following:</p>\n\n<pre><code>function clone(obj) {\n    var copy;\n\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn\'t supported.\");\n}\n</code></pre>\n\n<p>The above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure. That is, there isn\'t more than one reference to the same data in the object. For example:</p>\n\n<pre><code>// This would be cloneable:\nvar tree = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"right\" : null,\n    \"data\"  : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ndirectedAcyclicGraph[\"right\"] = directedAcyclicGraph[\"left\"];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cyclicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ncyclicGraph[\"right\"] = cyclicGraph;\n</code></pre>\n\n<p>It will not be able to handle any JavaScript object, but it may be sufficient for many purposes as long as you don\'t assume that it will just work for anything you throw at it.</p>\n',1239170303,1566,728694),('<p><strong>Disclaimer</strong>: the following answer is for git before git 2.13. For git 2.13 and over, check out <a href=\"https://stackoverflow.com/a/3041055\">another answer further down</a>.</p>\n\n<hr>\n\n<p><strong>Warning</strong></p>\n\n<p>As noted in the comments, this puts everything into the stash, both staged and unstaged. The --keep-index just leaves the index alone after the stash is done. This can cause merge conflicts when you later pop the stash.</p>\n\n<hr>\n\n<p>This will stash everything that you haven\'t previously added. Just <code>git add</code> the things you want to keep, then run it.</p>\n\n<pre><code>git stash --keep-index\n</code></pre>\n\n<p>For example, if you want to split an old commit into more than one changeset, you can use this procedure:</p>\n\n<ol>\n<li><code>git rebase -i &lt;last good commit&gt;</code></li>\n<li>Mark some changes as <code>edit</code>.</li>\n<li><code>git reset HEAD^</code></li>\n<li><code>git add &lt;files you want to keep in this change&gt;</code></li>\n<li><code>git stash --keep-index</code></li>\n<li>Fix things up as necessary. Don\'t forget to <code>git add</code> any changes.</li>\n<li><code>git commit</code></li>\n<li><code>git stash pop</code></li>\n<li>Repeat, from #5, as necessary.</li>\n<li><code>git rebase --continue</code></li>\n</ol>\n',1322688496,1376,8333163),('<p><strong>Dependency Injection</strong> is passing dependency to other <strong>objects</strong> or <strong>framework</strong>( dependency injector).</p>\n\n<p>Dependency injection makes testing easier. The injection can be done through <strong>constructor</strong>. </p>\n\n<p><code>SomeClass()</code> has its constructor as following:</p>\n\n\n\n<pre class=\"lang-csh prettyprint-override\"><code>public SomeClass() {\n    myObject = Factory.getObject();\n}\n</code></pre>\n\n<p><strong>Problem</strong>:\nIf <code>myObject</code> involves complex tasks such as disk access or network access, it is <strong>hard</strong> to do unit test on <code>SomeClass()</code>. Programmers have to mock <code>myObject</code> and might <strong>intercept</strong> the factory call.</p>\n\n<p><strong>Alternative solution</strong>: </p>\n\n<ul>\n<li>Passing <code>myObject</code> in as an argument to the constructor</li>\n</ul>\n\n\n\n<pre class=\"lang-csh prettyprint-override\"><code>public SomeClass (MyClass myObject) {\n    this.myObject = myObject;\n}\n</code></pre>\n\n<p><code>myObject</code> can be passed directly which makes testing easier. </p>\n\n<ul>\n<li>One common alternative is defining a <strong>do-nothing constructor</strong>. Dependency injection can be done through setters. (h/t @MikeVella). </li>\n<li><a href=\"http://martinfowler.com/articles/injection.html#InterfaceInjection\" rel=\"noreferrer\">Martin Fowler</a> documents a third alternative (h/t @MarcDix), where <strong>classes explicitly implement an interface</strong> for the dependencies programmers wish injected.</li>\n</ul>\n\n<p>It is harder to isolate components in unit testing without dependency injection. </p>\n\n<p>In 2013, when I wrote this answer, this was a major theme on the <a href=\"http://googletesting.blogspot.com/\" rel=\"noreferrer\">Google Testing Blog</a>. It remains the biggest advantage to me, as programmers not always need the extra flexibility in their run-time design (for instance, for service locator or similar patterns). Programmers often need to isolate the classes during testing.</p>\n',1222303772,1935,130862),('<pre><code>git clone --single-branch --branch &lt;branchname&gt; &lt;remote-repo&gt;\n</code></pre>\n\n<p>The <code>--single-branch</code> option is valid from version <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/1.7.10.txt\" rel=\"noreferrer\">1.7.10</a> and later.</p>\n\n<p>Please see also the <a href=\"https://stackoverflow.com/a/4568323/134077\">other answer</a> which many people prefer.</p>\n\n<p>You may also want to make sure you understand the difference. And the difference is: by invoking <code>git clone --branch &lt;branchname&gt; url</code> you\'re fetching <em>all</em> the branches and checking out one. That may, for instance, mean that your repository has a 5kB documentation or wiki branch and 5GB data branch. And whenever you want to edit your frontpage, you may end up cloning 5GB of data.</p>\n\n<p>Again, that is not to say <code>git clone --branch</code> is not the way to accomplish that, it\'s just that it\'s not <em>always</em> what you want to accomplish, when you\'re asking about cloning a specific branch.</p>\n\n<p>At the time of writing the original answer below, git had no <code>--single-branch</code> option, but let\'s preserve it for full satisfaction of angry bees.</p>\n\n<p>The answer so badly disliked by copypasters was this:</p>\n\n<pre><code>git init\ngit remote add -t refspec remotename host:/dir.git\ngit fetch\n</code></pre>\n',1260918569,1470,1911126),('<p>From the <a href=\"https://git-scm.com/docs/git-rm\" rel=\"noreferrer\">man file</a>:</p>\n\n<blockquote>\n  <p>When <code>--cached</code> is given, the staged content has to match either the tip of the branch or the file on disk, allowing the file to be removed from just the index.</p>\n</blockquote>\n\n<p>So, for a single file:</p>\n\n<pre><code>git rm --cached mylogfile.log\n</code></pre>\n\n<p>and for a single directory:</p>\n\n<pre><code>git rm --cached -r mydirectory\n</code></pre>\n',1247842646,4374,1143800),('<pre><code>String myString = \"1234\";\nint foo = Integer.parseInt(myString);\n</code></pre>\n\n<p>If you look at the <a href=\"https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Integer.html#parseInt(java.lang.String)\" rel=\"noreferrer\">Java Documentation</a> you\'ll notice the \"catch\" is that this function can throw a <code>NumberFormatException</code>, which of course you have to handle:</p>\n\n<pre><code>int foo;\ntry {\n   foo = Integer.parseInt(myString);\n}\ncatch (NumberFormatException e)\n{\n   foo = 0;\n}\n</code></pre>\n\n<p>(This treatment defaults a malformed number to <code>0</code>, but you can do something else if you like.)</p>\n\n<p>Alternatively, you can use an <code>Ints</code> method from the Guava library, which in combination with Java 8\'s <code>Optional</code>, makes for a powerful and concise way to convert a string into an int:</p>\n\n<pre><code>import com.google.common.primitives.Ints;\n\nint foo = Optional.ofNullable(myString)\n .map(Ints::tryParse)\n .orElse(0)\n</code></pre>\n',1302200981,4107,5585800),('<p>Use:</p>\n\n<pre><code>window.location.href \n</code></pre>\n\n<p>As noted in the comments, the line below works, but it is bugged for Firefox.</p>\n\n<pre><code>document.URL;\n</code></pre>\n\n<p>See <strong><a href=\"https://web.archive.org/web/20170327080647/http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-46183437\" rel=\"noreferrer\">URL of type DOMString, readonly</a></strong>.</p>\n',1245785340,3700,1034642),('<p>The docs for <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\" rel=\"noreferrer\"><code>java.io.Serializable</code></a> are probably about as good an explanation as you\'ll get:</p>\n\n<blockquote>\n  <p>The serialization runtime associates with each serializable class a version number, called a <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different <code>serialVersionUID</code> than that of the corresponding sender\'s class, then deserialization will result in an \n  <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InvalidClassException.html\" rel=\"noreferrer\"><code>InvalidClassException</code></a>. A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type <code>long</code>:</p>\n\n<pre><code>ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;\n</code></pre>\n  \n  <p>If a serializable class does not explicitly declare a <code>serialVersionUID</code>, then the serialization runtime will calculate a default <code>serialVersionUID</code> value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is <em>strongly recommended</em> that all serializable classes explicitly declare <code>serialVersionUID</code> values, since the default <code>serialVersionUID</code> computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected <code>InvalidClassExceptions</code> during deserialization. Therefore, to guarantee a consistent <code>serialVersionUID</code> value across different java compiler implementations, a serializable class must declare an explicit <code>serialVersionUID</code> value. It is also strongly advised that explicit <code>serialVersionUID</code> declarations use the private modifier where possible, since such declarations apply only to the immediately declaring class <code>serialVersionUID</code> fields are not useful as inherited members.</p>\n</blockquote>\n',1226532615,2302,285809),('<p>Binary <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" rel=\"noreferrer\">floating point</a> math is like this. In most programming languages, it is based on the <a href=\"https://en.wikipedia.org/wiki/IEEE_754#Basic_formats\" rel=\"noreferrer\">IEEE 754 standard</a>. The crux of the problem is that numbers are represented in this format as a whole number times a power of two; rational numbers (such as <code>0.1</code>, which is <code>1/10</code>) whose denominator is not a power of two cannot be exactly represented.</p>\n\n<p>For <code>0.1</code> in the standard <code>binary64</code> format, the representation can be written exactly as</p>\n\n<ul>\n<li><code>0.1000000000000000055511151231257827021181583404541015625</code> in decimal, or</li>\n<li><code>0x1.999999999999ap-4</code> in <a href=\"http://www.exploringbinary.com/hexadecimal-floating-point-constants/\" rel=\"noreferrer\">C99 hexfloat notation</a>.</li>\n</ul>\n\n<p>In contrast, the rational number <code>0.1</code>, which is <code>1/10</code>, can be written exactly as</p>\n\n<ul>\n<li><code>0.1</code> in decimal, or</li>\n<li><code>0x1.99999999999999...p-4</code> in an analogue of C99 hexfloat notation, where the <code>...</code> represents an unending sequence of 9\'s.</li>\n</ul>\n\n<p>The constants <code>0.2</code> and <code>0.3</code> in your program will also be approximations to their true values.  It happens that the closest <code>double</code> to <code>0.2</code> is larger than the rational number <code>0.2</code> but that the closest <code>double</code> to <code>0.3</code> is smaller than the rational number <code>0.3</code>.  The sum of <code>0.1</code> and <code>0.2</code> winds up being larger than the rational number <code>0.3</code> and hence disagreeing with the constant in your code.</p>\n\n<p>A fairly comprehensive treatment of floating-point arithmetic issues is <a href=\"http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html\" rel=\"noreferrer\"><em>What Every Computer Scientist Should Know About Floating-Point Arithmetic</em></a>. For an easier-to-digest explanation, see <a href=\"http://floating-point-gui.de\" rel=\"noreferrer\">floating-point-gui.de</a>.</p>\n\n<p><strong>Side Note: All positional (base-N) number systems share this problem with precision</strong></p>\n\n<p>Plain old decimal (base 10) numbers have the same issues, which is why numbers like 1/3 end up as 0.333333333... </p>\n\n<p>You\'ve just stumbled on a number (3/10) that happens to be easy to represent with the decimal system, but doesn\'t fit the binary system. It goes both ways (to some small degree) as well: 1/16 is an ugly number in decimal (0.0625), but in binary it looks as neat as a 10,000th does in decimal (0.0001)** - if we were in the habit of using a base-2 number system in our daily lives, you\'d even look at that number and instinctively understand you could arrive there by halving something, halving it again, and again and again. </p>\n\n<p>** Of course, that\'s not exactly how floating-point numbers are stored in memory (they use a form of scientific notation). However, it does illustrate the point that binary floating-point precision errors tend to crop up because the \"real world\" numbers we are usually interested in working with are so often powers of ten - but only because we use a decimal number system day-to-day. This is also why we\'ll say things like 71% instead of \"5 out of every 7\" (71% is an approximation, since 5/7 can\'t be represented exactly with any decimal number).</p>\n\n<p>So no: binary floating point numbers are not broken, they just happen to be as imperfect as every other base-N number system :)</p>\n\n<p><strong>Side Side Note: Working with Floats in Programming</strong></p>\n\n<p>In practice, this problem of precision means you need to use rounding functions to round your floating point numbers off to however many decimal places you\'re interested in before you display them. </p>\n\n<p>You also need to replace equality tests with comparisons that allow some amount of tolerance, which means:</p>\n\n<p>Do <em>not</em> do <code>if (x == y) { ... }</code> </p>\n\n<p>Instead do <code>if (abs(x - y) &lt; myToleranceValue) { ... }</code>. </p>\n\n<p>where <code>abs</code> is the absolute value. <code>myToleranceValue</code> needs to be chosen for your particular application - and it will have a lot to do with how much \"wiggle room\" you are prepared to allow, and what the largest number you are going to be comparing may be (due to loss of precision issues). Beware of \"epsilon\" style constants in your language of choice. These are <em>not</em> to be used as tolerance values.</p>\n',1235598032,2272,588014),('<p>Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually <code>undefined</code>?</p>\n\n<pre><code>var obj = { key: undefined };\nobj[\"key\"] !== undefined // false, but the key exists!\n</code></pre>\n\n<p>You should instead use the <code>in</code> operator:</p>\n\n<pre><code>\"key\" in obj // true, regardless of the actual value\n</code></pre>\n\n<p>If you want to check if a key doesn\'t exist, remember to use parenthesis:</p>\n\n<pre><code>!(\"key\" in obj) // true if \"key\" doesn\'t exist in object\n!\"key\" in obj   // ERROR!  Equivalent to \"false in obj\"\n</code></pre>\n\n<p>Or, if you want to particularly test for properties of the object instance (and not inherited properties), use <code>hasOwnProperty</code>:</p>\n\n<pre><code>obj.hasOwnProperty(\"key\") // true\n</code></pre>\n\n<p>For performance comparison between the methods that are <code>in</code>, <code>hasOwnProperty</code> and key is <code>undefined</code>, see this <a href=\"http://jsben.ch/#/WqlIl\" rel=\"noreferrer\"><strong>benchmark</strong></a></p>\n',1247068270,4168,1098955),('<p>For what it\'s worth, here\'s another way to extract tokens from an input string, relying only on standard library facilities. It\'s an example of the power and elegance behind the design of the STL.</p>\n\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\n#include &lt;algorithm&gt;\n#include &lt;iterator&gt;\n\nint main() {\n    using namespace std;\n    string sentence = \"And I feel fine...\";\n    istringstream iss(sentence);\n    copy(istream_iterator&lt;string&gt;(iss),\n         istream_iterator&lt;string&gt;(),\n         ostream_iterator&lt;string&gt;(cout, \"\\n\"));\n}\n</code></pre>\n\n<p>Instead of copying the extracted tokens to an output stream, one could insert them into a container, using the same generic <a href=\"https://en.cppreference.com/w/cpp/algorithm/copy\" rel=\"noreferrer\"><code>copy</code></a> algorithm.</p>\n\n<pre><code>vector&lt;string&gt; tokens;\ncopy(istream_iterator&lt;string&gt;(iss),\n     istream_iterator&lt;string&gt;(),\n     back_inserter(tokens));\n</code></pre>\n\n<p>... or create the <code>vector</code> directly:</p>\n\n<pre><code>vector&lt;string&gt; tokens{istream_iterator&lt;string&gt;{iss},\n                      istream_iterator&lt;string&gt;{}};\n</code></pre>\n',1224981789,1374,237280),('<p>Several tips:</p>\n\n<ol>\n<li>Put inserts/updates in a transaction.</li>\n<li>For older versions of SQLite - Consider a less paranoid journal mode (<code>pragma journal_mode</code>). There is <code>NORMAL</code>, and then there is <code>OFF</code>, which can significantly increase insert speed if you\'re not too worried about the database possibly getting corrupted if the OS crashes. If your application crashes the data should be fine. Note that in newer versions, the <code>OFF/MEMORY</code> settings are not safe for application level crashes.</li>\n<li>Playing with page sizes makes a difference as well (<code>PRAGMA page_size</code>). Having larger page sizes can make reads and writes go a bit faster as larger pages are held in memory. Note that more memory will be used for your database.</li>\n<li>If you have indices, consider calling <code>CREATE INDEX</code> after doing all your inserts. This is significantly faster than creating the index and then doing your inserts.</li>\n<li>You have to be quite careful if you have concurrent access to SQLite, as the whole database is locked when writes are done, and although multiple readers are possible, writes will be locked out. This has been improved somewhat with the addition of a WAL in newer SQLite versions.</li>\n<li>Take advantage of saving space...smaller databases go faster. For instance, if you have key value pairs, try making the key an <code>INTEGER PRIMARY KEY</code> if possible, which will replace the implied unique row number column in the table.</li>\n<li>If you are using multiple threads, you can try using the <a href=\"http://sqlite.org/c3ref/enable_shared_cache.html\" rel=\"noreferrer\">shared page cache</a>, which will allow loaded pages to be shared between threads, which can avoid expensive I/O calls.</li>\n<li><a href=\"https://stackoverflow.com/q/5431941/6850771\">Don\'t use <code>!feof(file)</code>!</a></li>\n</ol>\n\n<p>I\'ve also asked similar questions <a href=\"https://stackoverflow.com/questions/784173/what-are-the-performance-characteristics-of-sqlite-with-very-large-database-files\">here</a> and <a href=\"https://stackoverflow.com/questions/768708/are-there-known-issues-with-using-sqlite-and-file-locking-on-different-platforms\">here</a>.</p>\n',1257911159,786,1712873),('<p><code>return false</code> from <em>within a jQuery event handler</em> is effectively the same as calling both  <code>e.preventDefault</code> and <code>e.stopPropagation</code> on the passed <a href=\"http://api.jquery.com/category/events/event-object/\" rel=\"noreferrer\">jQuery.Event object.</a></p>\n\n<p><code>e.preventDefault()</code> will prevent the default event from occuring, <code>e.stopPropagation()</code> will prevent the event from bubbling up and <code>return false</code> will do both. Note that this behaviour differs from <em>normal</em> (non-jQuery) event handlers, in which, notably, <code>return false</code> does <em>not</em> stop the event from bubbling up.</p>\n\n<p>Source: <a href=\"http://ejohn.org/\" rel=\"noreferrer\">John Resig</a></p>\n\n<p><a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\" rel=\"noreferrer\"><strong>Any benefit to using event.preventDefault() over \"return false\" to cancel out an href click?</strong></a></p>\n',1251720319,2823,1357151),('<p>What you want is the <strong><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a></strong> function on the native array object.</p>\n\n<p><code>arr.splice(index, 0, item);</code> will insert <code>item</code> into <code>arr</code> at the specified index (deleting <code>0</code> items first, that is, it\'s just an insert).</p>\n\n<p>In this example we will create an array and add an element to it into index 2:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [];\r\narr[0] = \"Jani\";\r\narr[1] = \"Hege\";\r\narr[2] = \"Stale\";\r\narr[3] = \"Kai Jim\";\r\narr[4] = \"Borge\";\r\n\r\nconsole.log(arr.join());\r\narr.splice(2, 0, \"Lene\");\r\nconsole.log(arr.join());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',1235572376,4799,586189),('<p>The compiler is allowed to make one implicit conversion to resolve the parameters to a function. What this means is that the compiler can use constructors callable with a <strong>single parameter</strong> to convert from one type to another in order to get the right type for a parameter. </p>\n\n<p>Here\'s an example class with a constructor that can be used for implicit conversions:</p>\n\n<pre><code>class Foo\n{\npublic:\n  // single parameter constructor, can be used as an implicit conversion\n  Foo (int foo) : m_foo (foo) \n  {\n  }\n\n  int GetFoo () { return m_foo; }\n\nprivate:\n  int m_foo;\n};\n</code></pre>\n\n<p>Here\'s a simple function that takes a <code>Foo</code> object:</p>\n\n<pre><code>void DoBar (Foo foo)\n{\n  int i = foo.GetFoo ();\n}\n</code></pre>\n\n<p>and here\'s where the <code>DoBar</code> function is called.</p>\n\n<pre><code>int main ()\n{\n  DoBar (42);\n}\n</code></pre>\n\n<p>The argument is not a <code>Foo</code> object, but an <code>int</code>. However, there exists a constructor for <code>Foo</code> that takes an <code>int</code> so this constructor can be used to convert the parameter to the correct type.</p>\n\n<p>The compiler is allowed to do this once for each parameter.</p>\n\n<p>Prefixing the <code>explicit</code> keyword to the constructor prevents the compiler from using that constructor for implicit conversions. Adding it to the above class will create a compiler error at the function call <code>DoBar (42)</code>.  It is now necessary to call for conversion explicitly with  <code>DoBar (Foo (42))</code></p>\n\n<p>The reason you might want to do this is to avoid accidental construction that can hide bugs.  Contrived example:</p>\n\n<ul>\n<li>You have a <code>MyString(int size)</code> class with a constructor that constructs a string of the given size.  You have a function <code>print(const MyString&amp;)</code>, and you call <code>print(3)</code> (when you <em>actually</em> intended to call <code>print(\"3\")</code>).  You expect it to print \"3\", but it prints an empty string of length 3 instead.</li>\n</ul>\n',1222178344,3350,121163),('<p><em>This answer only applies to <strong>Git version 1.x</strong>. For Git version 2.x, see other answers.</em></p>\n\n<hr>\n\n<p><strong>Summary:</strong></p>\n\n<ul>\n<li><p><code>git add -A</code> stages <strong>all changes</strong></p></li>\n<li><p><code>git add .</code> stages new files and modifications, <strong>without deletions</strong></p></li>\n<li><p><code>git add -u</code> stages modifications and deletions, <strong>without new files</strong></p></li>\n</ul>\n\n<hr>\n\n<p><strong>Detail:</strong></p>\n\n<p><code>git add -A</code> is equivalent to  <code>git add .; git add -u</code>.</p>\n\n<p>The important point about <code>git add .</code> is that it looks at the working tree and adds all those paths to the staged changes if they are either changed or are new and not ignored, it does not stage any \'rm\' actions.</p>\n\n<p><code>git add -u</code> looks at all the <em>already</em> tracked files and stages the changes to those files if they are different or if they have been removed. It does not add any new files, it only stages changes to already tracked files.</p>\n\n<p><code>git add -A</code> is a handy shortcut for doing both of those.</p>\n\n<p>You can test the differences out with something like this (note that for Git version 2.x your output for <code>git add .</code> <code>git status</code> <strong>will</strong> be different):</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git init\necho Change me &gt; change-me\necho Delete me &gt; delete-me\ngit add change-me delete-me\ngit commit -m initial\n\necho OK &gt;&gt; change-me\nrm delete-me\necho Add me &gt; add-me\n\ngit status\n# Changed but not updated:\n#   modified:   change-me\n#   deleted:    delete-me\n# Untracked files:\n#   add-me\n\ngit add .\ngit status\n\n# Changes to be committed:\n#   new file:   add-me\n#   modified:   change-me\n# Changed but not updated:\n#   deleted:    delete-me\n\ngit reset\n\ngit add -u\ngit status\n\n# Changes to be committed:\n#   modified:   change-me\n#   deleted:    delete-me\n# Untracked files:\n#   add-me\n\ngit reset\n\ngit add -A\ngit status\n\n# Changes to be committed:\n#   new file:   add-me\n#   modified:   change-me\n#   deleted:    delete-me\n</code></pre>\n',1235206804,4264,572660),('<p>Use:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.now()\ndatetime.datetime(2009, 1, 6, 15, 8, 24, 78915)\n\n&gt;&gt;&gt; print(datetime.datetime.now())\n2009-01-06 15:08:24.789150\n</code></pre>\n\n<p>And just the time:</p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime.now().time()\ndatetime.time(15, 8, 24, 78915)\n\n&gt;&gt;&gt; print(datetime.datetime.now().time())\n15:08:24.789150\n</code></pre>\n\n<p>See <a href=\"https://docs.python.org/3/library/datetime.html\" rel=\"noreferrer\"><strong>the documentation</strong></a> for more information.</p>\n\n<p>To save typing, you can import the <code>datetime</code> object from the <code>datetime</code> module:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime\n</code></pre>\n\n<p>Then remove the leading <code>datetime.</code> from all of the above.</p>\n',1231217825,3083,415519),('<p>To test if the string <code>paragraph</code> contains the string <code>word</code> (thanks @QuarterMeister)</p>\n\n<pre><code>culture.CompareInfo.IndexOf(paragraph, word, CompareOptions.IgnoreCase) &gt;= 0\n</code></pre>\n\n<p>Where <code>culture</code> is the instance of <a href=\"http://msdn.microsoft.com/en-gb/library/system.globalization.cultureinfo(v=vs.110).aspx\" rel=\"noreferrer\"><code>CultureInfo</code></a> describing the language that the text is written in.</p>\n\n<p>This solution is transparent about <strong>the definition of case-insensitivity, which is language dependent</strong>. For example, the English language uses the characters <code>I</code> and <code>i</code> for the upper and lower case versions of the ninth letter, whereas the Turkish language uses these characters for the <a href=\"http://en.wikipedia.org/wiki/Dotted_and_dotless_I\" rel=\"noreferrer\">eleventh and twelfth letters</a> of its 29 letter-long alphabet. The Turkish upper case version of \'i\' is the unfamiliar character \'İ\'.</p>\n\n<p>Thus the strings <code>tin</code> and <code>TIN</code> are the same word <em>in English</em>, but different words <em>in Turkish</em>. As I understand, one means \'spirit\' and the other is an onomatopoeia word. (Turks, please correct me if I\'m wrong, or suggest a better example)</p>\n\n<p>To summarise, you can only answer the question \'are these two strings the same but in different cases\' <em>if you know what language the text is in</em>. If you don\'t know, you\'ll have to take a punt. Given English\'s hegemony in software, you should probably resort to <a href=\"https://stackoverflow.com/questions/9760237/what-does-cultureinfo-invariantculture-mean\"><code>CultureInfo.InvariantCulture</code></a>, because it\'ll be wrong in familiar ways.</p>\n',1363544531,1409,15464440),('<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\"><code>for-in</code></a> loop as shown by others. However, you also have to make sure that the key you get is an actual property of an object, and doesn\'t come from the prototype.</p>\n\n<p><strong>Here is the snippet:</strong>\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\n\r\nfor (var key in p) {\r\n    if (p.hasOwnProperty(key)) {\r\n        console.log(key + \" -&gt; \" + p[key]);\r\n    }\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>For-of with Object.keys() alternative:</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var p = {\r\n    0: \"value1\",\r\n    \"b\": \"value2\",\r\n    key: \"value3\"\r\n};\r\n\r\nfor (var key of Object.keys(p)) {\r\n    console.log(key + \" -&gt; \" + p[key])\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Notice the use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"noreferrer\"><code>for-of</code></a> instead of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\"><code>for-in</code></a>, if not used it will return undefined on named properties, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"noreferrer\"><code>Object.keys()</code></a> ensures the use of only the object\'s own properties without the whole prototype-chain properties</p>\n\n<p><strong>Using the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"noreferrer\"><code>Object.entries()</code></a> method:</strong></p>\n\n<p><strong>Note:</strong> This method is not supported natively by Internet Explorer. You may consider using a Polyfill for older browsers.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const p = {\n    \"p1\": \"value1\",\n    \"p2\": \"value2\",\n    \"p3\": \"value3\"\n};\n\nfor (let [key, value] of Object.entries(p)) {\n  console.log(`${key}: ${value}`);\n}\n</code></pre>\n',1238047933,4386,684692),('<p>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noreferrer\"><code>Array.prototype.push</code></a> method to append values to an array:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// initialize array\r\nvar arr = [\r\n  \"Hi\",\r\n  \"Hello\",\r\n  \"Bonjour\"\r\n];\r\n\r\n// append new value to the array\r\narr.push(\"Hola\");\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>You can use the <code>push()</code> function to append more than one value to an array in a single call:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// initialize array\r\nvar arr = [\"Hi\", \"Hello\", \"Bonjour\", \"Hola\"];\r\n\r\n// append multiple values to the array\r\narr.push(\"Salut\", \"Hey\");\r\n\r\n// display all values\r\nfor (var i = 0; i &lt; arr.length; i++) {\r\n  console.log(arr[i]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p><strong>Update</strong></p>\n\n<p>If you want to add the items of one array to another array, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\"><code>firstArray.concat(secondArray)</code></a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [\r\n  \"apple\",\r\n  \"banana\",\r\n  \"cherry\"\r\n];\r\n\r\narr = arr.concat([\r\n  \"dragonfruit\",\r\n  \"elderberry\",\r\n  \"fig\"\r\n]);\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Update</strong></p>\n\n<p>Just an addition to this answer if you want to append any value to the start of an array that means to the first index then you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\" rel=\"noreferrer\"><code>Array.prototype.unshift</code></a> for this purpose.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [1, 2, 3];\r\narr.unshift(0);\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It also supports appending multiple values at once just like <code>push</code>.</p>\n',1228782268,4419,351421),('<p>Excellent answers from Luc and Mark however a good code sample is missing. Adding the tag <code>android:focusableInTouchMode=\"true\"</code> and <code>android:focusable=\"true\"</code> to parent layout (e.g. <code>LinearLayout</code> or <code>ConstraintLayout</code>) like the following example will fix the problem.</p>\n\n<pre><code>&lt;!-- Dummy item to prevent AutoCompleteTextView from receiving focus --&gt;\n&lt;LinearLayout\n    android:focusable=\"true\" \n    android:focusableInTouchMode=\"true\"\n    android:layout_width=\"0px\" \n    android:layout_height=\"0px\"/&gt;\n\n&lt;!-- :nextFocusUp and :nextFocusLeft have been set to the id of this component\nto prevent the dummy from receiving focus again --&gt;\n&lt;AutoCompleteTextView android:id=\"@+id/autotext\"\n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"wrap_content\"\n    android:nextFocusUp=\"@id/autotext\" \n    android:nextFocusLeft=\"@id/autotext\"/&gt;\n</code></pre>\n',1257176997,2603,1662088),('<p>If you just want to check whether there\'s any value, you can do </p>\n\n<pre><code>if (strValue) {\n    //do something\n}\n</code></pre>\n\n<p>If you need to check specifically for an empty string over null, I would think checking against <code>\"\"</code> is your best bet, using <a href=\"http://webreference.com/js/column26/stricteq.html\" rel=\"noreferrer\">the <code>===</code> operator</a> (so that you know that it is, in fact, a string you\'re comparing against).</p>\n\n<pre><code>if (strValue === \"\") {\n    //...\n}\n</code></pre>\n',1222795214,3611,154068),('<p>You need to set your content-type to application/json. But <a href=\"https://curl.haxx.se/docs/manpage.html#-d\" rel=\"noreferrer\"><code>-d</code></a> sends the Content-Type <code>application/x-www-form-urlencoded</code>, which is not accepted on Spring\'s side.</p>\n\n<p>Looking at the <a href=\"https://curl.haxx.se/docs/manpage.html\" rel=\"noreferrer\">curl man page</a>, I think you can use <a href=\"https://curl.haxx.se/docs/manpage.html#-H\" rel=\"noreferrer\"><code>-H</code></a>:</p>\n\n<pre><code>-H \"Content-Type: application/json\"\n</code></pre>\n\n<p>Full example:</p>\n\n<pre><code>curl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data \'{\"username\":\"xyz\",\"password\":\"xyz\"}\' \\\n  http://localhost:3000/api/login\n</code></pre>\n\n<p>(<code>-H</code> is short for <code>--header</code>, <code>-d</code> for <code>--data</code>)</p>\n\n<p>Note that <code>-request POST</code> is <em>optional</em> if you use <code>-d</code>, as the <code>-d</code> flag implies a POST request.</p>\n\n<hr>\n\n<p>On Windows, things are slightly different. See the comment thread.</p>\n',1314177149,4386,7173011),('<p>The usual way to check if the value of a property is the special value <code>undefined</code>, is:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(o.myProperty === undefined) {\n  alert(\"myProperty value is the special value `undefined`\");\n}\n</code></pre>\n\n<p>To check if an object does not actually have such a property, and will therefore return <code>undefined</code> by default when you try and access it:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(!o.hasOwnProperty(\'myProperty\')) {\n  alert(\"myProperty does not exist\");\n}\n</code></pre>\n\n<p>To check if the value associated with an identifier is the special value <code>undefined</code>, <em>or</em> if that identifier has not been declared. Note: this method is the only way of referring to an <strong>undeclared</strong> (note: different from having a value of <code>undefined</code>) identifier without an early error:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(typeof myVariable === \'undefined\') {\n  alert(\'myVariable is either the special value `undefined`, or it has not been declared\');\n}\n</code></pre>\n\n<p>In versions of JavaScript prior to ECMAScript 5, the property named \"undefined\" on the global object was writeable, and therefore a simple check <code>foo === undefined</code> might behave unexpectedly if it had accidentally been redefined. In modern JavaScript, the property is read-only.</p>\n\n<p>However, in modern JavaScript, \"undefined\" is not a keyword, and so variables inside functions can be named \"undefined\" and shadow the global property. </p>\n\n<p>If you are worried about this (unlikely) edge case, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\" rel=\"noreferrer\">the void operator</a> to get at the special <code>undefined</code> value itself:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(myVariable === void 0) {\n  alert(\"myVariable is the special value `undefined`\");\n}\n</code></pre>\n',1231244861,2686,416327);
/*!40000 ALTER TABLE `answersd` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `itemsd`
--

DROP TABLE IF EXISTS `itemsd`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `itemsd` (
  `body` longtext,
  `link` varchar(255) DEFAULT NULL,
  `score` int DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `qId` int NOT NULL,
  `answersD_aId` int DEFAULT NULL,
  PRIMARY KEY (`qId`),
  KEY `FK62aa8kvcgbxkssbfm02qu599a` (`answersD_aId`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `itemsd`
--

LOCK TABLES `itemsd` WRITE;
/*!40000 ALTER TABLE `itemsd` DISABLE KEYS */;
INSERT INTO `itemsd` VALUES ('<p>Here is a piece of C++ code that shows some very peculiar behavior. For some strange reason, sorting the data miraculously makes the code almost six times faster:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;algorithm&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Generate data\n    const unsigned arraySize = 32768;\n    int data[arraySize];\n\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n        data[c] = std::rand() % 256;\n\n    // !!! With this, the next loop runs faster.\n    std::sort(data, data + arraySize);\n\n    // Test\n    clock_t start = clock();\n    long long sum = 0;\n\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        // Primary loop\n        for (unsigned c = 0; c &lt; arraySize; ++c)\n        {\n            if (data[c] &gt;= 128)\n                sum += data[c];\n        }\n    }\n\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code></pre>\n\n<ul>\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>\n<li>With the sorted data, the code runs in 1.93 seconds.</li>\n</ul>\n\n<hr>\n\n<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Generate data\n        int arraySize = 32768;\n        int data[] = new int[arraySize];\n\n        Random rnd = new Random(0);\n        for (int c = 0; c &lt; arraySize; ++c)\n            data[c] = rnd.nextInt() % 256;\n\n        // !!! With this, the next loop runs faster\n        Arrays.sort(data);\n\n        // Test\n        long start = System.nanoTime();\n        long sum = 0;\n\n        for (int i = 0; i &lt; 100000; ++i)\n        {\n            // Primary loop\n            for (int c = 0; c &lt; arraySize; ++c)\n            {\n                if (data[c] &gt;= 128)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n</code></pre>\n\n<p>With a similar but less extreme result.</p>\n\n<hr>\n\n<p>My first thought was that sorting brings the data into the cache, but then I thought how silly that was because the array was just generated.</p>\n\n<ul>\n<li>What is going on?</li>\n<li>Why is processing a sorted array faster than processing an unsorted array?</li>\n</ul>\n\n<p>The code is summing up some independent terms, so the order should not matter.                       </p>\n','https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array',24533,'Why is processing a sorted array faster than processing an unsorted array?',11227809,11227902),('<p>I accidentally committed the wrong files to <a href=\"https://en.wikipedia.org/wiki/Git\" rel=\"noreferrer\">Git</a>, but I haven\'t pushed the commit to the server yet.</p>\n\n<p>How can I undo those commits from the local repository?</p>\n','https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git',21157,'How do I undo the most recent local commits in Git?',927358,927386),('<p>I want to delete a branch both locally and remotely.</p>\n\n<h2>Failed Attempts to Delete a Remote Branch</h2>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git branch -d remotes/origin/bugfix\nerror: branch \'remotes/origin/bugfix\' not found.\n\n$ git branch -d origin/bugfix\nerror: branch \'origin/bugfix\' not found.\n\n$ git branch -rd origin/bugfix\nDeleted remote branch origin/bugfix (was 2a14ef7).\n\n$ git push\nEverything up-to-date\n\n$ git pull\nFrom github.com:gituser/gitproject\n\n* [new branch] bugfix -&gt; origin/bugfix\nAlready up-to-date.\n</code></pre>\n\n<p>What should I do differently to successfully delete the <code>remotes/origin/bugfix</code> branch both locally and remotely?</p>\n','https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely',17036,'How do I delete a Git branch locally and remotely?',2003505,2003515),('<p>What are the differences between <code>git pull</code> and <code>git fetch</code>?</p>\n','https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch',11967,'What is the difference between &#39;git pull&#39; and &#39;git fetch&#39;?',292357,292359),('<p>I\'ve been messing around with <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">JSON</a> for some time, just pushing it out as text and it hasn\'t hurt anybody (that I know of), but I\'d like to start doing things properly.</p>\n\n<p>I have seen <em>so</em> many purported \"standards\" for the JSON content type:</p>\n\n<pre><code>application/json\napplication/x-javascript\ntext/javascript\ntext/x-javascript\ntext/x-json\n</code></pre>\n\n<p>But which one is correct, or best? I gather that there are security and browser support issues varying between them.</p>\n\n<p>I know there\'s a similar question, <em><a href=\"https://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\">What MIME type if JSON is being returned by a REST API?</a></em>, but I\'d like a slightly more targeted answer.</p>\n','https://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type',10283,'What is the correct JSON content type?',477816,477819),('<p>What is the use of the <code>yield</code> keyword in Python, and what does it do?</p>\n\n<p>For example, I\'m trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre><code>result, candidates = [], [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub></p>\n','https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do',10263,'What does the &quot;yield&quot; keyword do?',231767,231855),('<p>I mistakenly added files to Git using the command:</p>\n\n<pre><code>git add myfile.txt\n</code></pre>\n\n<p>I have not yet run <code>git commit</code>. Is there a way to undo this, so these files won\'t be included in the commit?</p>\n','https://stackoverflow.com/questions/348170/how-do-i-undo-git-add-before-commit',9024,'How do I undo &#39;git add&#39; before commit?',348170,348234),('<p>After reading <a href=\"http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20\" rel=\"noreferrer\">Hidden Features and Dark Corners of C++/STL</a> on <code>comp.lang.c++.moderated</code>, I was completely surprised that the following snippet compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>\n\n<p>Here\'s the code:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int x = 10;\n    while (x --&gt; 0) // x goes to 0\n    {\n        printf(\"%d \", x);\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>9 8 7 6 5 4 3 2 1 0\n</code></pre>\n\n<p>I\'d assume this is C, since it works in GCC as well. Where is this defined in the standard, and where has it come from?</p>\n','https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c',8960,'What is the &quot;--&gt;&quot; operator in C++?',1642028,1642035),('<p>I don\'t want to rename a remote branch, as described in <em><a href=\"https://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top\">Rename master branch for both local and remote Git repositories</a></em>.</p>\n\n<p>How can I rename a local branch which hasn\'t been pushed to a remote branch?</p>\n\n<p>In case you need to rename <strong>remote</strong> branch as well:<br>\n<em><a href=\"https://stackoverflow.com/questions/30590083/how-to-rename-a-remote-git-branch-name/30590238#30590238\">How do I rename both a Git local and remote branch name</a></em></p>\n','https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch',8631,'How do I rename a local Git branch?',6591213,6591218),('<p>I have an array of numbers and I\'m using the <code>.push()</code> method to add elements to it.</p>\n\n<p>Is there a simple way to remove a specific element from an array?</p>\n\n<p>I\'m looking for the equivalent of something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>array.remove(number);\n</code></pre>\n\n<p>I have to use <em>core</em> JavaScript. Frameworks are not allowed.</p>\n','https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array',8376,'How can I remove a specific item from an array?',5767325,5767357),('<p>Programming language books explain that value types are created on the <strong>stack</strong>, and reference types are created on the <strong>heap</strong>, without explaining what these two things are. I haven\'t read a clear explanation of this.  I understand what <em>a stack</em> is. But, </p>\n\n<ul>\n<li>Where and what are they (physically in a real computer\'s memory)?</li>\n<li>To what extent are they controlled by the OS or language run-time?</li>\n<li>What is their scope?</li>\n<li>What determines the size of each of them?</li>\n<li>What makes one faster? </li>\n</ul>\n','https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap',8132,'What and where are the stack and heap?',79923,80113),('<p>Is it possible to toggle the visibility of an element, using the functions <code>.hide()</code>, <code>.show()</code> or <code>.toggle()</code>?</p>\n\n<p>How would you test if an element is <code>visible</code> or <code>hidden</code>?</p>\n','https://stackoverflow.com/questions/178325/how-do-i-check-if-an-element-is-hidden-in-jquery',7765,'How do I check if an element is hidden in jQuery?',178325,178450),('<p>How can I redirect the user from one page to another using jQuery or pure JavaScript?</p>\n','https://stackoverflow.com/questions/503093/how-do-i-redirect-to-another-webpage',7722,'How do I redirect to another webpage?',503093,506004),('<p>I wrote the wrong thing in a commit message.</p>\n\n<p>How can I change the message? The commit has not been pushed yet.</p>\n','https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commit-messages',7663,'How to modify existing, unpushed commit messages?',179123,179147),('<p>Can I use comments inside a JSON file? If so, how?</p>\n','https://stackoverflow.com/questions/244777/can-comments-be-used-in-json',7647,'Can comments be used in JSON?',244777,244858),('<p>How would you explain JavaScript closures to someone with a knowledge of the concepts they consist of (for example functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\" rel=\"noreferrer\">the Scheme example</a> given on Wikipedia, but unfortunately it did not help.</p>\n','https://stackoverflow.com/questions/111102/how-do-javascript-closures-work',7635,'How do JavaScript closures work?',111102,111111),('<p>How do I revert from my current state to a snapshot made on a certain commit?</p>\n\n<p>If I do <code>git log</code>, then I get the following output:</p>\n\n<pre><code>$ git log\ncommit a867b4af366350be2e7c21b8de9cc6504678a61b`\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 18:59:41 2010 -0400\n\nblah blah blah...\n\ncommit 25eee4caef46ae64aa08e8ab3f988bc917ee1ce4\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 05:13:39 2010 -0400\n\nmore blah blah blah...\n\ncommit 0766c053c0ea2035e90f504928f8df3c9363b8bd\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 00:55:06 2010 -0400\n\nAnd yet more blah blah...\n\ncommit 0d1d7fc32e5a947fbd92ee598033d85bfc445a50\nAuthor: Me &lt;me@me.com&gt;\nDate:   Wed Nov 3 23:56:08 2010 -0400\n\nYep, more blah blah.\n</code></pre>\n\n<p>How do I revert to the commit from November 3, i.e. commit <code>0d1d7fc</code>?</p>\n','https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit',7628,'How do I revert a Git repository to a previous commit?',4114095,4114122),('<p>Recently, I ran some of my JavaScript code through Crockford\'s <a href=\"http://www.jslint.com/\" rel=\"noreferrer\">JSLint</a>, and it gave the following error:</p>\n\n<blockquote>\n  <p>Problem at line 1 character 1: Missing \"use strict\" statement.</p>\n</blockquote>\n\n<p>Doing some searching, I realized that some people add <code>\"use strict\";</code> into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</p>\n\n<p>So what is <code>\"use strict\";</code> all about, what does it imply, and is it still relevant?</p>\n\n<p>Do any of the current browsers respond to the <code>\"use strict\";</code> string or is it for future use?</p>\n','https://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it',7568,'What does &quot;use strict&quot; do in JavaScript, and what is the reasoning behind it?',1335851,1335881),('<p>How come certain random strings produce colors when entered as background colors in HTML? For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;body bgcolor=\"chucknorris\"&gt; test &lt;/body&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>...produces a document with a <strong>red background</strong> across all browsers and platforms.</p>\n\n<p>Interestingly, while <code>chucknorri</code> produces a red background as well, <code>chucknorr</code> produces a yellow background.</p>\n\n<p>What\'s going on here?</p>\n','https://stackoverflow.com/questions/8318911/why-does-html-think-chucknorris-is-a-color',7502,'Why does HTML think “chucknorris” is a color?',8318911,8333464),('<p>Usually I would expect a <code>String.contains()</code> method, but there doesn\'t seem to be one. </p>\n\n<p>What is a reasonable way to check for this?</p>\n','https://stackoverflow.com/questions/1789945/how-to-check-whether-a-string-contains-a-substring-in-javascript',7426,'How to check whether a string contains a substring in JavaScript?',1789945,1789952),('<p>How do I force an overwrite of local files on a <code>git pull</code>?</p>\n\n<p><strong>The scenario is the following:</strong></p>\n\n<ul>\n<li>A team member is modifying the templates for a website we are working on</li>\n<li>They are adding some images to the images directory (but forgets to add them under source control)</li>\n<li>They are sending the images by mail, later, to me</li>\n<li>I\'m adding the images under the source control and pushing them to GitHub together with other changes</li>\n<li>They cannot pull updates from GitHub because Git doesn\'t want to overwrite their files.</li>\n</ul>\n\n<p><strong>This is the error I\'m getting:</strong></p>\n\n<blockquote>\n  <p>error: Untracked working tree file \'public/images/icon.gif\' would be overwritten by merge</p>\n</blockquote>\n\n<p>How do I force Git to overwrite them? The person is a designer - usually, I resolve all the conflicts by hand, so the server has the most recent version that they just need to update on their computer.</p>\n','https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files',7239,'How do I force &quot;git pull&quot; to overwrite local files?',1125968,8888015),('<p>I\'ve recently started maintaining someone else\'s JavaScript code. I\'m fixing bugs, adding features and also trying to tidy up the code and make it more consistent.</p>\n\n<p>The previous developer used two ways of declaring functions and I can\'t work out if there is a reason behind it or not.</p>\n\n<p>The two ways are:</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<p>What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can\'t be done with the other?</p>\n','https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname',6892,'var functionName = function() {} vs function functionName() {}',336859,336868),('<p>How do you delete untracked local files from your current working tree?</p>\n','https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree',6874,'How to remove local (untracked) files from the current Git working tree',61212,64966),('<p>If I run the following program, which parses two date strings referencing times 1 second apart and compares them:</p>\n\n<pre><code>public static void main(String[] args) throws ParseException {\n    SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");  \n    String str3 = \"1927-12-31 23:54:07\";  \n    String str4 = \"1927-12-31 23:54:08\";  \n    Date sDt3 = sf.parse(str3);  \n    Date sDt4 = sf.parse(str4);  \n    long ld3 = sDt3.getTime() /1000;  \n    long ld4 = sDt4.getTime() /1000;\n    System.out.println(ld4-ld3);\n}\n</code></pre>\n\n<p><strong>The output is:</strong></p>\n\n<blockquote>\n  <p>353</p>\n</blockquote>\n\n<p>Why is <code>ld4-ld3</code> not <code>1</code> (as I would expect from the one-second difference in the times), but <code>353</code>?</p>\n\n<p>If I change the dates to times 1 second later:</p>\n\n<pre><code>String str3 = \"1927-12-31 23:54:08\";  \nString str4 = \"1927-12-31 23:54:09\";  \n</code></pre>\n\n<p>Then <code>ld4-ld3</code> will be <code>1</code>.</p>\n\n<hr>\n\n<p><strong>Java version:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>java version \"1.6.0_22\"\nJava(TM) SE Runtime Environment (build 1.6.0_22-b04)\nDynamic Code Evolution Client VM (build 0.2-b02-internal, 19.0-b04-internal, mixed mode)\n</code></pre>\n\n<pre class=\"lang-java prettyprint-override\"><code>Timezone(`TimeZone.getDefault()`):\n\nsun.util.calendar.ZoneInfo[id=\"Asia/Shanghai\",\noffset=28800000,dstSavings=0,\nuseDaylight=false,\ntransitions=19,\nlastRule=null]\n\nLocale(Locale.getDefault()): zh_CN\n</code></pre>\n','https://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result',6844,'Why is subtracting these two times (in 1927) giving a strange result?',6841333,6841479),('<p>Somebody pushed a branch called <code>test</code> with <code>git push origin test</code> to a shared repository. I can see the branch with <code>git branch -r</code>.</p>\n\n<p>Now I\'m trying to check out the remote <code>test</code> branch.</p>\n\n<p>I\'ve tried:</p>\n\n<ul>\n<li><p><code>git checkout test</code> which does nothing</p></li>\n<li><p><code>git checkout origin/test</code> gives <code>* (no branch)</code>. Which is confusing. How can I be on \"no branch\"?</p></li>\n</ul>\n\n<p>How do I check out a remote Git branch?</p>\n','https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch',6752,'How do I check out a remote Git branch?',1783405,1783426),('<p>Example (<em>note the case</em>):</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>string s = \"Hello world!\";\nString s = \"Hello world!\";\n</code></pre>\n\n<p>What are the guidelines for the use of each? And what are the differences?</p>\n','https://stackoverflow.com/questions/7074/what-is-the-difference-between-string-and-string-in-c',6536,'What is the difference between String and string in C#?',7074,7077),('<p>Say I create an object as follows:</p>\n\n<pre><code>let myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\n</code></pre>\n\n<p>What is the best way to remove the property <code>regex</code> to end up with new <code>myObject</code> as follows?</p>\n\n<pre><code>let myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\"\n};\n</code></pre>\n','https://stackoverflow.com/questions/208105/how-do-i-remove-a-property-from-a-javascript-object',6165,'How do I remove a property from a JavaScript object?',208105,208106),('<p>Given the following code, what does the <code>if __name__ == \"__main__\":</code> do?</p>\n\n<pre><code># Threading example\nimport time, thread\n\ndef myfunction(string, sleeptime, lock, *args):\n    while True:\n        lock.acquire()\n        time.sleep(sleeptime)\n        lock.release()\n        time.sleep(sleeptime)\n\nif __name__ == \"__main__\":\n    lock = thread.allocate_lock()\n    thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock))\n    thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock))\n</code></pre>\n','https://stackoverflow.com/questions/419163/what-does-if-name-main-do',6108,'What does if __name__ == &quot;__main__&quot;: do?',419163,419185),('<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>\n','https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator',6085,'Does Python have a ternary conditional operator?',394809,394814),('<p>What is the difference between Android units of measure?</p>\n\n<ul>\n<li>px</li>\n<li>dip</li>\n<li>dp</li>\n<li>sp</li>\n</ul>\n','https://stackoverflow.com/questions/2025282/what-is-the-difference-between-px-dip-dp-and-sp',5830,'What is the difference between &quot;px&quot;, &quot;dip&quot;, &quot;dp&quot; and &quot;sp&quot;?',2025282,2025541),('<p>In Python, what are metaclasses and what do we use them for?</p>\n','https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python',5743,'What are metaclasses in Python?',100003,100146),('<p>I\'m using <a href=\"http://en.wikipedia.org/wiki/JSLint\" rel=\"noreferrer\">JSLint</a> to go through JavaScript, and it\'s returning many suggestions to replace <code>==</code> (two equals signs) with <code>===</code> (three equals signs) when doing things like comparing <code>idSele_UNVEHtype.value.length == 0</code> inside of an <code>if</code> statement.</p>\n\n<p>Is there a performance benefit to replacing <code>==</code> with <code>===</code>? </p>\n\n<p>Any performance improvement would be welcomed as many comparison operators exist.</p>\n\n<p>If no type conversion takes place, would there be a performance gain over <code>==</code>?</p>\n','https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons',5664,'Which equals operator (== vs ===) should be used in JavaScript comparisons?',359494,359509),('<p>I have a function <code>foo</code> which makes an Ajax request. How can I return the response from <code>foo</code>? </p>\n\n<p>I tried returning the value from the <code>success</code> callback, as well as assigning the response to a local variable inside the function and returning that one, but none of those ways actually return the response.</p>\n\n<pre><code>function foo() {\n    var result;\n\n    $.ajax({\n        url: \'...\',\n        success: function(response) {\n            result = response;\n            // return response; // &lt;- I tried that one as well\n        }\n    });\n\n    return result;\n}\n\nvar result = foo(); // It always ends up being `undefined`.\n</code></pre>\n','https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call',5538,'How do I return the response from an asynchronous call?',14220321,14220323),('<p>There is a file that was being tracked by <code>git</code>, but now the file is on the <code>.gitignore</code> list.</p>\n\n<p>However, that file keeps showing up in <code>git status</code> after it\'s edited. How do you force <code>git</code> to completely forget about it?</p>\n','https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore',5454,'How to make Git &quot;forget&quot; about a file that was tracked but is now in .gitignore?',1274057,1274447),('<p>According to the HTTP/1.1 Spec: </p>\n\n<blockquote>\n  <p>The <strong><code>POST</code></strong> method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the <code>Request-URI</code> in the <code>Request-Line</code></p>\n</blockquote>\n\n<p>In other words, <code>POST</code> is used to <strong>create</strong>.</p>\n\n<blockquote>\n  <p>The <strong><code>PUT</code></strong> method requests that the enclosed entity be stored under the supplied <code>Request-URI</code>. If the <code>Request-URI</code> refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the <code>Request-URI</code> does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.\"</p>\n</blockquote>\n\n<p>That is, <code>PUT</code> is used to <strong>create or replace</strong>.</p>\n\n<p>So, which one should be used to create a resource? Or one needs to support both?</p>\n','https://stackoverflow.com/questions/630453/put-vs-post-in-rest',5399,'PUT vs. POST in REST',630453,630475),('<h2>Form-based authentication for websites</h2>\n\n<p>We believe that Stack&nbsp;Overflow should not just be a resource for very specific technical questions, but also for general guidelines on how to solve variations on common problems. \"Form based authentication for websites\" should be a fine topic for such an experiment.</p>\n\n<h3>It should include topics such as:</h3>\n\n<ul>\n<li>How to log in</li>\n<li>How to log out</li>\n<li>How to remain logged in</li>\n<li>Managing cookies (including recommended settings)</li>\n<li>SSL/HTTPS encryption</li>\n<li>How to store passwords</li>\n<li>Using secret questions</li>\n<li>Forgotten username/password functionality</li>\n<li>Use of <a href=\"https://en.wikipedia.org/wiki/Cryptographic_nonce\" rel=\"noreferrer\">nonces</a> to prevent <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" rel=\"noreferrer\">cross-site request forgeries (CSRF)</a></li>\n<li><a href=\"http://openid.net/\" rel=\"noreferrer\">OpenID</a></li>\n<li>\"Remember me\" checkbox</li>\n<li>Browser autocompletion of usernames and passwords</li>\n<li>Secret URLs (public <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> protected by digest)</li>\n<li>Checking password strength</li>\n<li>E-mail validation</li>\n<li><em>and much more about</em> <a href=\"http://en.wikipedia.org/wiki/Form-based_authentication\" rel=\"noreferrer\">form based authentication</a>...</li>\n</ul>\n\n<h3>It should not include things like:</h3>\n\n<ul>\n<li>Roles and authorization</li>\n<li>HTTP basic authentication</li>\n</ul>\n\n<h3>Please help us by:</h3>\n\n<ol>\n<li>Suggesting subtopics</li>\n<li>Submitting good articles about this subject</li>\n<li>Editing the official answer</li>\n</ol>\n','https://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication',5379,'The definitive guide to form-based website authentication',549,477578),('<p>I\'m trying to find a way to scan my entire Linux system for all files containing a specific string of text. Just to clarify, I\'m looking for text within the file, not in the file name.</p>\n\n<p>When I was looking up how to do this, I came across this solution twice:</p>\n\n<pre><code>find / -type f -exec grep -H \'text-to-find-here\' {} \\;\n</code></pre>\n\n<p>However, it doesn\'t work. It seems to display every single file in the system.</p>\n\n<p>Is this close to the proper way to do it? If not, how should I? This ability to find text strings in files would be extraordinarily useful for some programming projects I\'m doing.</p>\n','https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux',5284,'How do I find all files containing specific text on Linux?',16956810,16957078),('<p>Is there something in JavaScript similar to <code>@import</code> in CSS that allows you to include a JavaScript file inside another JavaScript file?</p>\n','https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file',5230,'How do I include a JavaScript file in another JavaScript file?',950087,950146),('<p>What is the most efficient way to clone a JavaScript object? I\'ve seen <code>obj = eval(uneval(o));</code> being used, but <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\" rel=\"noreferrer\">that\'s non-standard and only supported by Firefox</a>.<br/><br/> I\'ve done things like <code>obj = JSON.parse(JSON.stringify(o));</code> but question the efficiency. <br/><br/> I\'ve also seen recursive copying functions with various flaws.\n<br />\nI\'m surprised no canonical solution exists.</p>\n','https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript',5179,'What is the most efficient way to deep clone an object in JavaScript?',122102,122704),('<p>I\'d like to move the last several commits I\'ve committed to master to a new branch and take master back to before those commits were made. Unfortunately, my Git-fu is not strong enough yet, any help?</p>\n\n<p>I.e. How can I go from this</p>\n\n<pre><code>master A - B - C - D - E\n</code></pre>\n\n<p>to this?</p>\n\n<pre><code>newbranch     C - D - E\n             /\nmaster A - B \n</code></pre>\n','https://stackoverflow.com/questions/1628563/move-the-most-recent-commits-to-a-new-branch-with-git',5027,'Move the most recent commit(s) to a new branch with Git',1628563,1628584),('<p>How do I get the path of the directory in which a <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\" rel=\"noreferrer\">Bash</a> script is located, <em>inside</em> that script?</p>\n\n<p>I want to use a Bash script as a launcher for another application. I want to change the working directory to the one where the Bash script is located, so I can operate on the files in that directory, like so: </p>\n\n<pre><code>$ ./application\n</code></pre>\n','https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself',4984,'How to get the source directory of a Bash script from within the script itself',59895,246128),('<p>I\'d prefer as little formal definition as possible and simple mathematics.</p>\n','https://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation',4945,'What is a plain English explanation of &quot;Big O&quot; notation?',487258,487278),('<p>How do you call an external command (as if I\'d typed it at the Unix shell or Windows command prompt) from within a Python script?</p>\n','https://stackoverflow.com/questions/89228/calling-an-external-command-from-python',4913,'Calling an external command from Python',89228,89243),('<p>What is the maximum length of a URL in different browsers? Does it differ among browsers? </p>\n\n<p>Does the HTTP protocol dictate it?</p>\n','https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers',4857,'What is the maximum length of a URL in different browsers?',417142,417184),('<p>How do I discard changes in my working copy that are not in the index?</p>\n','https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git',4847,'How do I discard unstaged changes in Git?',52704,52719),('<p>I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged.  The <code>update()</code> method would be what I need, if it returned its result instead of modifying a dictionary in-place.</p>\n\n<pre><code>&gt;&gt;&gt; x = {\'a\': 1, \'b\': 2}\n&gt;&gt;&gt; y = {\'b\': 10, \'c\': 11}\n&gt;&gt;&gt; z = x.update(y)\n&gt;&gt;&gt; print(z)\nNone\n&gt;&gt;&gt; x\n{\'a\': 1, \'b\': 10, \'c\': 11}\n</code></pre>\n\n<p>How can I get that final merged dictionary in <code>z</code>, not <code>x</code>?</p>\n\n<p>(To be extra-clear, the last-one-wins conflict-handling of <code>dict.update()</code> is what I\'m looking for as well.)</p>\n','https://stackoverflow.com/questions/38987/how-do-i-merge-two-dictionaries-in-a-single-expression-in-python',4846,'How do I merge two dictionaries in a single expression in Python?',38987,26853961),('<p>How do I resolve merge conflicts in Git?</p>\n','https://stackoverflow.com/questions/161813/how-to-resolve-merge-conflicts-in-git',4784,'How to resolve merge conflicts in Git',161813,163659),('<p>How can I loop through all the entries in an array using JavaScript?</p>\n\n<p>I thought it was something like this:</p>\n\n<pre><code>forEach(instance in theArray)\n</code></pre>\n\n<p>Where <code>theArray</code> is my array, but this seems to be incorrect.</p>\n','https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript',4704,'For-each over an array in JavaScript',9329446,9329476),('<p>Also how do <code>LEFT JOIN</code>, <code>RIGHT JOIN</code> and <code>FULL JOIN</code> fit in?</p>\n','https://stackoverflow.com/questions/38549/what-is-the-difference-between-inner-join-and-outer-join',4688,'What is the difference between &quot;INNER JOIN&quot; and &quot;OUTER JOIN&quot;?',38549,38578),('<p>We have an employee whose surname is Null. Our employee lookup application is killed when that last name is used as the search term (which happens to be quite often now). The error received (thanks Fiddler!) is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;soapenv:Fault&gt;\n   &lt;faultcode&gt;soapenv:Server.userException&lt;/faultcode&gt;\n   &lt;faultstring&gt;coldfusion.xml.rpc.CFCInvocationException: [coldfusion.runtime.MissingArgumentException : The SEARCHSTRING parameter to the getFacultyNames function is required but was not passed in.]&lt;/faultstring&gt;\n</code></pre>\n\n<p>Cute, huh?</p>\n\n<p>The parameter type is <code>string</code>.</p>\n\n<p>I am using:</p>\n\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Web_Services_Description_Language\" rel=\"noreferrer\">WSDL</a> (<a href=\"http://en.wikipedia.org/wiki/SOAP\" rel=\"noreferrer\">SOAP</a>)</li>\n<li>Flex 3.5</li>\n<li>ActionScript 3</li>\n<li>ColdFusion 8</li>\n</ul>\n\n<p>Note that the error <strong>does not</strong> occur when calling the webservice as an object from a ColdFusion page.</p>\n','https://stackoverflow.com/questions/4456438/how-to-pass-null-a-real-surname-to-a-soap-web-service-in-actionscript-3',4639,'How to pass &quot;Null&quot; (a real surname!) to a SOAP web service in ActionScript 3',4456438,18000768),('<p>ECMAScript 6 introduced <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"noreferrer\">the <code>let</code> statement</a>. </p>\n\n<p>I\'ve heard it that it\'s described as a \"local\" variable, but I\'m still not quite sure how it behaves differently than the <code>var</code> keyword.</p>\n\n<p>What are the differences? When should <code>let</code> be used over <code>var</code>?</p>\n','https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var',4571,'What&#39;s the difference between using &quot;let&quot; and &quot;var&quot;?',762011,11444416),('<p>I need to check the <code>checked</code> property of a checkbox and perform an action based on the checked property using jQuery.</p>\n\n<p>For example, if the age checkbox is checked, then I need to show a textbox to enter age, else hide the textbox.</p>\n\n<p>But the following code returns <code>false</code> by default:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if ($(\'#isAgeSelected\').attr(\'checked\'))\r\n{\r\n    $(\"#txtAge\").show();\r\n}\r\nelse\r\n{\r\n    $(\"#txtAge\").hide();\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;input type=\"checkbox\" id=\"isAgeSelected\"/&gt;\r\n\r\n&lt;div id=\"txtAge\" style=\"display:none\"&gt;\r\nAge is selected\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>How do I successfully query the <code>checked</code> property?</p>\n','https://stackoverflow.com/questions/901712/how-do-i-check-whether-a-checkbox-is-checked-in-jquery',4570,'How do I check whether a checkbox is checked in jQuery?',901712,903152),('<p>I have made some changes to a file which has been committed a few times as part of a group of files, but now want to reset/revert the changes on it back to a previous version. </p>\n\n<p>I have done a <code>git log</code> along with a <code>git diff</code> to find the revision I need, but just have no idea how to get the file back to its former state in the past.</p>\n','https://stackoverflow.com/questions/215718/how-can-i-reset-or-revert-a-file-to-a-specific-revision',4541,'How can I reset or revert a file to a specific revision?',215718,215731),('<p>Suppose I\'m familiar with developing client-side applications in <a href=\"http://jquery.com/\" rel=\"noreferrer\">jQuery</a>, but now I\'d like to start using <a href=\"http://angularjs.org/\" rel=\"noreferrer\">AngularJS</a>. Can you describe the paradigm shift that is necessary? Here are a few questions that might help you frame an answer:</p>\n\n<ul>\n<li>How do I architect and design client-side web applications differently? What is the biggest difference?</li>\n<li>What should I stop doing/using; What should I start doing/using instead?</li>\n<li>Are there any server-side considerations/restrictions?</li>\n</ul>\n\n<p>I\'m not looking for a detailed comparison between <code>jQuery</code> and <code>AngularJS</code>.</p>\n','https://stackoverflow.com/questions/14994391/thinking-in-angularjs-if-i-have-a-jquery-background',4514,'&quot;Thinking in AngularJS&quot; if I have a jQuery background?',14994391,15012542),('<h3>What is this?</h3>\n<p>This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list.</p>\n<h3>Why is this?</h3>\n<p>It used to be hard to find questions about operators and other syntax tokens.¹<br />\nThe main idea is to have links to existing questions on Stack Overflow, so it\'s easier for us to reference them, not to copy over content from the PHP Manual.</p>\n<p>Note: Since January 2013, Stack Overflow <a href=\"https://meta.stackexchange.com/questions/160100/a-new-search-engine-for-stack-exchange\">does support special characters</a>. Just surround the search terms by quotes, e.g. <a href=\"https://stackoverflow.com/search?q=%5Bphp%5D%20%22===%22%20vs%20%22==%22\"><code>[php] &quot;==&quot; vs &quot;===&quot;</code></a></p>\n<h3><strong>What should I do here?</strong></h3>\n<p>If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the <a href=\"http://php.net/manual/en/index.php\" rel=\"noreferrer\">PHP manual</a> along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute to the help others provided.</p>\n<h2>The List</h2>\n<p>If your particular token is not listed below, you might find it in the <a href=\"http://secure.php.net/manual/en/tokens.php\" rel=\"noreferrer\">List of Parser Tokens</a>.</p>\n<hr />\n<p><code>&amp;</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a> or <a href=\"http://secure.php.net/manual/en/language.references.php\" rel=\"noreferrer\">References</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1676897\">What does it mean to start a PHP function with an ampersand?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/600202\">Understanding PHP &amp; (ampersand, bitwise and) operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2209934/\">PHP &quot;&amp;&quot; operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2376348\">Difference between &amp; and &amp;&amp; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1006652\">What does &quot;&amp;&quot; mean here in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2297592\">What does &quot;&amp;&quot; mean in this case?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2422907\">What does the &quot;&amp;&quot; sign mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2478149\">What does this signature mean (&amp;) in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3957584\">How does the &quot;&amp;&quot; operator work in a PHP function?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4705262\">What does &amp; in &amp;2 mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4705838\">When should I use a bitwise operator?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/21058439\">Is there ever a need to use ampersand in front of an object?</a> (&amp;$)</li>\n</ul>\n<hr />\n<p><code>=&amp;</code> <a href=\"http://secure.php.net/manual/en/language.references.php\" rel=\"noreferrer\">References</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1768343\">Reference assignment operator in PHP, =&amp;</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1367454\">What do the &quot;=&amp;&quot; and &quot;&amp;=&quot; operators in PHP mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3177342\">What do the &#39;&amp;=&#39; and &#39;=&amp;&#39; operators do?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2081806\">What does =&amp; mean in PHP?</a></li>\n</ul>\n<hr />\n<p><code>&amp;=</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1367454\">What do the &quot;=&amp;&quot; and &quot;&amp;=&quot; operators in PHP mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3177342\">What do the &#39;&amp;=&#39; and &#39;=&amp;&#39; operators do?</a></li>\n</ul>\n<hr />\n<p><code>&amp;&amp;</code> <a href=\"http://secure.php.net/manual/en/language.operators.logical.php\" rel=\"noreferrer\">Logical Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2803321\">&#39;AND&#39; vs &#39;&amp;&amp;&#39; as operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2376348\">Difference between &amp; and &amp;&amp; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4746865\">Is there any difference between &quot;and&quot; and &quot;&amp;&amp;&quot; operators in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4502092\">PHP - and / or keywords</a></li>\n</ul>\n<hr />\n<p><code>%</code> <a href=\"http://secure.php.net/manual/en/language.operators.arithmetic.php\" rel=\"noreferrer\">Arithmetic Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1934173\">What does the percent sign mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3204919\">What is the PHP operator % and how do I use it in real-world examples?</a></li>\n</ul>\n<hr />\n<p><code>!!</code> <a href=\"http://secure.php.net/manual/en/language.operators.logical.php\" rel=\"noreferrer\">Logical Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2127260\">Double not (!!) operator in PHP</a></li>\n</ul>\n<hr />\n<p><code>@</code> <a href=\"http://secure.php.net/manual/en/language.operators.errorcontrol.php\" rel=\"noreferrer\">Error Control Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1032161\">What is the use of the @ symbol in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3551527\">&#39;At&#39; symbol before variable name in PHP: @$_POST</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3984864\">PHP functions and @functions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4872340\">Should I use @ in my PHP code?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3621215\">What does @ mean in PHP?</a></li>\n</ul>\n<hr />\n<p><code>?:</code> <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\" rel=\"noreferrer\">Ternary Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1080247\">What are the PHP operators &quot;?&quot; and &quot;:&quot; called and what do they do?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1993409\">?: operator (the &#39;Elvis operator&#39;) in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4055355\">Where can I read about conditionals done with &quot;?&quot; and &quot;:&quot; (colon)?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4210187\">Using PHP 5.3 ?: operator</a></li>\n</ul>\n<hr />\n<p><code>??</code> <a href=\"https://www.php.net/manual/en/migration70.new-features.php\" rel=\"noreferrer\">Null Coalesce Operator</a> (since PHP 7)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/7278835\">C#&#39;s null coalescing operator (??) in PHP</a></li>\n</ul>\n<hr />\n<p><code>?string</code>\n<code>?int</code>\n<code>?array</code>\n<code>?bool</code>\n<code>?float</code> <a href=\"https://www.php.net/manual/en/migration71.new-features.php\" rel=\"noreferrer\">Nullable return type declaration</a> (since PHP 7.1)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/54217328/250259\">Nullable return type declaration</a></li>\n</ul>\n<hr />\n<p><code>:</code> <a href=\"http://secure.php.net/manual/en/control-structures.alternative-syntax.php\" rel=\"noreferrer\">Alternative syntax for control structures</a>, <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\" rel=\"noreferrer\">Ternary Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2908095\">What is &quot;:&quot; in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4747761\">What does &quot;:&quot; mean in PHP?</a></li>\n</ul>\n<hr />\n<p><code>::</code> <a href=\"http://secure.php.net/manual/en/language.oop5.paamayim-nekudotayim.php\" rel=\"noreferrer\">Scope Resolution Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2903564\">What do two colons mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2588298\">What&#39;s the meaning of the PHP token name T_PAAMAYIM_NEKUDOTAYIM?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3173501\">What&#39;s the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1912902\">What exactly are late static bindings in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4120755\">static::staticFunctionName()</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8734823\">Unexpected T_PAAMAYIM_NEKUDOTAYIM, expecting T_NS_Separator</a></li>\n</ul>\n<hr />\n<p><code>\\</code> <a href=\"http://php.net/namespaces\" rel=\"noreferrer\">Namespaces</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10788400\">Backslash in PHP -- what does it mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4790020\">What does a \\ (backslash) do in PHP (5.3+)?</a></li>\n</ul>\n<hr />\n<p><code>-&gt;</code> <a href=\"http://secure.php.net/manual/en/language.oop5.php\" rel=\"noreferrer\">Classes And Objects</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2588149\">What is the &quot;-&gt;&quot; PHP operator called and how do you say it when reading code out loud?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3037526\">Where do we use the object operator &quot;-&gt;&quot; in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3173501\">What&#39;s the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2316370\">What does the PHP syntax $var1-&gt;$var2 mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4502587\">What does &quot;-&gt;&quot; mean/refer to in PHP?</a></li>\n</ul>\n<hr />\n<p><code>=&gt;</code> <a href=\"http://secure.php.net/manual/en/language.types.array.php\" rel=\"noreferrer\">Arrays</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1241819\">What does &quot;=&gt;&quot; mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1655336\">Use of =&gt; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4758791\">What does $k =&gt; $v in foreach($ex as $k=&gt;$v) mean?</a></li>\n</ul>\n<hr />\n<p><code>^</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2674920\">How does the bitwise operator XOR (&#39;^&#39;) work?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2724936\">What does ^ mean in PHP?</a></li>\n</ul>\n<hr />\n<p><code>&gt;&gt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2790329\">What does &gt;&gt; mean in PHP?</a></li>\n</ul>\n<hr />\n<p><code>&lt;&lt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9718689/strange-print-behaviour-in-php\">Strange print behaviour in PHP?</a></li>\n</ul>\n<hr />\n<p><code>&lt;&lt;&lt;</code> <a href=\"http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc\" rel=\"noreferrer\">Heredoc or Nowdoc</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/5539669\">What does &lt;&lt;&lt;END mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1048481\">PHP expression &lt;&lt;&lt;EOB</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3700042\">In PHP, what does &quot;&lt;&lt;&lt;&quot; represent?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2090081\">Using &lt;&lt;&lt;CON in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2333779\">What&#39;s this kind of syntax in PHP?</a></li>\n</ul>\n<hr />\n<p><code>=</code> <a href=\"http://secure.php.net/manual/en/language.operators.assignment.php\" rel=\"noreferrer\">Assignment Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n</ul>\n<hr />\n<p><code>==</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/80646\">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1663451\">PHP != and == operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n<hr />\n<p><code>===</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1117967\">What does &quot;===&quot; mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/80646\">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n<hr />\n<p><code>!==</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1298083\">What does !== comparison operator in PHP mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1139154\">Is there a difference between !== and != in PHP?</a></li>\n</ul>\n<hr />\n<p><code>!=</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1663451\">PHP != and == operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1139154\">Is there a difference between !== and != in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6356826\">comparing, !== versus !=</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9671785/what-is-the-difference-between-and\">What is the difference between &lt;&gt; and !=</a></li>\n</ul>\n<hr />\n<p><code>&lt;&gt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/249312\">PHP operator &lt;&gt;</a></li>\n<li><a href=\"https://stackoverflow.com/questions/589391\">PHP&#39;s &lt;&gt; operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9671785\">What is the difference between &lt;&gt; and !=</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n<hr />\n<p><code>&lt;=&gt;</code> <a href=\"http://secure.php.net/manual/en/language.operators.comparison.php\" rel=\"noreferrer\">Comparison Operators</a> (since PHP 7.0)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/31298778\">Spaceship (three way comparison) operator</a></li>\n</ul>\n<hr />\n<p><code>|</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2233835\">What is the difference between the | and || operators?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13811922\">What Does Using A Single Pipe &#39;|&#39; In A Function Argument Do?</a></li>\n</ul>\n<hr />\n<p><code>||</code> <a href=\"http://secure.php.net/manual/en/language.operators.logical.php\" rel=\"noreferrer\">Logical Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2233835\">What is the difference between the | and || operators?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4502092\">PHP - and / or keywords</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5666741\">What exactly does || mean?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12213283\">The behaviour of the or operator in PHP</a></li>\n</ul>\n<hr />\n<p><code>~</code> <a href=\"http://secure.php.net/manual/en/language.operators.bitwise.php\" rel=\"noreferrer\">Bitwise Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1967360\">What does this ~ operator mean here?</a></li>\n</ul>\n<hr />\n<p><code>+</code> <a href=\"http://secure.php.net/manual/en/language.operators.arithmetic.php\" rel=\"noreferrer\">Arithmetic Operators</a>, <a href=\"http://secure.php.net/manual/en/language.operators.array.php\" rel=\"noreferrer\">Array Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2140090\">+ operator for array in PHP?</a></li>\n</ul>\n<hr />\n<p><code>+=</code> and <code>-=</code> <a href=\"http://secure.php.net/manual/en/language.operators.assignment.php\" rel=\"noreferrer\">Assignment Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/542995\">What is += used for?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7140158\">What does `$page -= 1` in my PHP document mean?</a></li>\n</ul>\n<hr />\n<p><code>++</code> and <code>--</code> <a href=\"http://secure.php.net/manual/en/language.operators.increment.php\" rel=\"noreferrer\">Incrementing/Decrementing Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1968371\">Understanding Incrementing</a></li>\n<li><a href=\"https://stackoverflow.com/a/3737177\">Answer below</a></li>\n</ul>\n<hr />\n<p><code>.=</code> <a href=\"http://secure.php.net/manual/en/language.operators.assignment.php\" rel=\"noreferrer\">Assignment Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2202331\">What is the difference between .= and += in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1241432\">To understand a line of PHP</a></li>\n</ul>\n<hr />\n<p><code>.</code> <a href=\"http://secure.php.net/manual/en/language.operators.string.php\" rel=\"noreferrer\">String Operators</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1466408\">Difference between period and comma when concatenating with echo versus return?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6484968\">What does a . (dot) do in PHP?</a></li>\n</ul>\n<hr />\n<p><code>,</code> <a href=\"http://php.net/manual/en/functions.arguments.php\" rel=\"noreferrer\">Function Arguments</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1466408\">Difference between period and comma when concatenating with echo versus return?</a></li>\n</ul>\n<p><code>,</code> <a href=\"http://php.net/manual/en/language.variables.scope.php\" rel=\"noreferrer\">Variable Declarations</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41383218\">What do commas mean in a variable declaration?</a></li>\n</ul>\n<hr />\n<p><code>$$</code> <a href=\"http://php.net/manual/en/language.variables.variable.php\" rel=\"noreferrer\">Variable Variables</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2715654\">What does $$ (dollar dollar or double dollar) mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4169882\">what is &quot;$$&quot; in PHP</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4891872\">$function() and $$variable</a></li>\n</ul>\n<hr />\n<p><code>`</code> <a href=\"http://php.net/manual/en/language.operators.execution.php\" rel=\"noreferrer\">Execution Operator</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/6002296\">What are the backticks `` called?</a></li>\n</ul>\n<hr />\n<p><code>&lt;?=</code> <a href=\"http://php.net/manual/en/ini.core.php#ini.short-open-tag\" rel=\"noreferrer\">Short Open Tags</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1963901\">What does this symbol mean in PHP &lt;?=</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2020445\">What does &#39;&lt;?=&#39; mean in PHP?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1959256/what-does-mean\">What does &lt;?= mean?</a></li>\n</ul>\n<hr />\n<p><code>[]</code> <a href=\"http://secure.php.net/manual/en/language.types.array.php\" rel=\"noreferrer\">Arrays</a> (short syntax since PHP 5.4)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/20709055/2758197\">PHP arrays... What is/are the meaning(s) of an empty bracket?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6933345\">What is the meaning of []</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2431629\">Php array_push() vs myArray[]</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3908576\">What does [] mean when reading from a PHP array?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4271874\">Shorthand for arrays: literal <code>$var = []</code> empty array</a></li>\n</ul>\n<hr />\n<p><code>&lt;?</code> <a href=\"http://secure.php.net/manual/en/language.basic-syntax.php\" rel=\"noreferrer\">Opening and Closing tags</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/200640\">Are PHP short tags acceptable to use?</a></li>\n</ul>\n<hr />\n<p><code>...</code> <a href=\"http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list\" rel=\"noreferrer\">Argument unpacking</a> (since PHP 5.6)</p>\n<hr />\n<p><code>**</code> <a href=\"http://secure.php.net/manual/en/migration56.new-features.php#migration56.new-features.exponentiation\" rel=\"noreferrer\">Exponentiation</a> (since PHP 5.6)</p>\n<hr />\n<p><code>#</code> <a href=\"http://php.net/manual/en/language.basic-syntax.comments.php\" rel=\"noreferrer\">One-line shell-style comment</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9093609/can-i-use-hashes-for-comments-in-php\">Can I use hashes for comments in PHP?</a></li>\n</ul>\n<hr />\n<p><code>:?</code> <a href=\"https://www.php.net/manual/en/migration71.new-features.php\" rel=\"noreferrer\">Nullable return types</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/48881489/php-method-argument-type-hinting-with-question-mark-type\">php method argument type hinting with question mark (?type)</a></li>\n</ul>\n<hr />\n<p><code>?-&gt;</code> <a href=\"https://stackoverflow.com/a/62178856/250259\">NullSafe Operator Calls</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/62178354/what-does-this-symbol-mean-in-php-within-an-object-or-null-value\">What does this symbol mean &quot;?-&gt;&quot; in php, within an object or null value</a></li>\n</ul>\n<hr />\n','https://stackoverflow.com/questions/3737139/reference-what-does-this-symbol-mean-in-php',4492,'Reference — What does this symbol mean in PHP?',3737139,3737177),('<p>I have this string:</p>\n\n<pre><code>\"Test abc test test abc test test test abc test test abc\"\n</code></pre>\n\n<p>Doing:</p>\n\n<pre><code>str = str.replace(\'abc\', \'\');\n</code></pre>\n\n<p>seems to only remove the first occurrence of <code>abc</code> in the string above.</p>\n\n<p>How can I replace <strong>all</strong> occurrences of it?</p>\n','https://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string',4413,'How to replace all occurrences of a string?',1144783,1145525),('<p>Is there a regular expression to validate an email address in JavaScript?</p>\n','https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript',4408,'How to validate an email address in JavaScript',46155,46181),('<p>People talk about <strong>URL</strong>s, <strong>URI</strong>s, and <strong>URN</strong>s as if they\'re different things, but they look the same to the naked eye.</p>\n\n<p>What are the distinguishable differences between them?</p>\n','https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn',4383,'What is the difference between a URI, a URL and a URN?',176264,176274),('<p>I want to be able to do the following:</p>\n\n<ol>\n<li><p>Create a local branch based on some other (remote or local) branch (via <code>git branch</code> or <code>git checkout -b</code>)</p></li>\n<li><p>Push the local branch\nto the remote repository (publish), but make it\ntrackable so <code>git pull</code> and <code>git push</code> will work immediately.</p></li>\n</ol>\n\n<p>How do I do that?</p>\n\n<p>I know about <code>--set-upstream</code> in Git 1.7, but that is a post-creation action. I want to find a way to make a similar change when pushing the branch to the remote repository.</p>\n','https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too',4340,'How do I push a new local branch to a remote Git repository and track it too?',2765421,6232535),('<p>I know it\'s possible to match a word and then reverse the matches using other tools (e.g. <code>grep -v</code>). However, is it possible to match lines that do not contain a specific word, e.g. <code>hede</code>, using a regular expression? </p>\n\n<h3>Input:</h3>\n\n<pre><code>hoho\nhihi\nhaha\nhede\n</code></pre>\n\n<h3>Code:</h3>\n\n<pre><code>grep \"&lt;Regex for \'doesn\'t contain hede\'&gt;\" input\n</code></pre>\n\n<h3>Desired output:</h3>\n\n<pre><code>hoho\nhihi\nhaha\n</code></pre>\n','https://stackoverflow.com/questions/406230/regular-expression-to-match-a-line-that-doesnt-contain-a-word',4326,'Regular expression to match a line that doesn&#39;t contain a word',406230,406408),('<p>How can I horizontally center a <code>&lt;div&gt;</code> within another <code>&lt;div&gt;</code> using CSS?</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div id=\"outer\"&gt;\n  &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n','https://stackoverflow.com/questions/114543/how-to-horizontally-center-a-div',4310,'How to horizontally center a &lt;div&gt;',114543,114549),('<p>How can I add an empty directory (that contains no files) to a Git repository?</p>\n','https://stackoverflow.com/questions/115983/how-can-i-add-an-empty-directory-to-a-git-repository',4296,'How can I add an empty directory to a Git repository?',115983,932982),('<p>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</p>\n\n<pre><code>import os\n\nfile_path = \"/my/directory/filename.txt\"\ndirectory = os.path.dirname(file_path)\n\ntry:\n    os.stat(directory)\nexcept:\n    os.mkdir(directory)       \n\nf = file(filename)\n</code></pre>\n\n<p>Somehow, I missed <code>os.path.exists</code> (thanks kanja, Blair, and Douglas). This is what I have now:</p>\n\n<pre><code>def ensure_dir(file_path):\n    directory = os.path.dirname(file_path)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n</code></pre>\n\n<p>Is there a flag for \"open\", that makes this happen automatically?</p>\n','https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory',4282,'How can I safely create a nested directory?',273192,273227),('<p>I\'m trying to create globally-unique identifiers in JavaScript.  I\'m not sure what routines are available on all browsers, how \"random\" and seeded the built-in random number generator is, etc.</p>\n\n<p>The GUID / UUID should be at least 32 characters and should stay in the ASCII range to avoid trouble when passing them around.</p>\n','https://stackoverflow.com/questions/105034/how-to-create-guid-uuid',4212,'How to create GUID / UUID?',105034,105074),('<p>I have a <code>master</code> and a <code>development</code> branch, both pushed to <a href=\"http://en.wikipedia.org/wiki/GitHub\" rel=\"noreferrer\">GitHub</a>. I\'ve <code>clone</code>d, <code>pull</code>ed, and <code>fetch</code>ed, but I remain unable to get anything other than the <code>master</code> branch back.</p>\n\n<p>I\'m sure I\'m missing something obvious, but I have read the manual and I\'m getting no joy at all.</p>\n','https://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git',4146,'How to clone all remote branches in Git?',67699,72156),('<p>I\'d like to do something like this to tick a <code>checkbox</code> using <strong>jQuery</strong>:</p>\n\n<pre><code>$(\".myCheckBox\").checked(true);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\".myCheckBox\").selected(true);\n</code></pre>\n\n<p>Does such a thing exist?</p>\n','https://stackoverflow.com/questions/426258/setting-checked-for-a-checkbox-with-jquery',4142,'Setting &quot;checked&quot; for a checkbox with jQuery',426258,426276),('<p>I pulled a project from GitHub a few days ago. I\'ve since discovered that there are several forks on GitHub, and I neglected to note which one I took originally. How can I determine which of those forks I pulled?</p>\n','https://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repository-was-originally-cloned-fr',4121,'How can I determine the URL that a local Git repository was originally cloned from?',4089430,4089452),('<p>Why does Google prepend <code>while(1);</code> to their (private) JSON responses?</p>\n\n<p>For example, here\'s a response while turning a calendar on and off in <a href=\"https://calendar.google.com/calendar/about/\" rel=\"noreferrer\">Google Calendar</a>:</p>\n\n<pre><code>while (1);\n[\n  [\'u\', [\n    [\'smsSentFlag\', \'false\'],\n    [\'hideInvitations\', \'false\'],\n    [\'remindOnRespondedEventsOnly\', \'true\'],\n    [\'hideInvitations_remindOnRespondedEventsOnly\', \'false_true\'],\n    [\'Calendar ID stripped for privacy\', \'false\'],\n    [\'smsVerifiedFlag\', \'true\']\n  ]]\n]\n</code></pre>\n\n<p>I would assume this is to prevent people from doing an <code>eval()</code> on it, but all you\'d really have to do is replace the <code>while</code> and then you\'d be set. I would assume the eval prevention is to make sure people write safe JSON parsing code.</p>\n\n<p>I\'ve seen this used in a couple of other places, too, but a lot more so with Google (Mail, Calendar, Contacts, etc.) Strangely enough, <a href=\"https://www.google.com/docs/about/\" rel=\"noreferrer\">Google Docs</a> starts with <code>&amp;&amp;&amp;START&amp;&amp;&amp;</code> instead, and Google Contacts seems to start with <code>while(1); &amp;&amp;&amp;START&amp;&amp;&amp;</code>.</p>\n\n<p>What\'s going on here?</p>\n','https://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses',4088,'Why does Google prepend while(1); to their JSON responses?',2669690,2669766),('<p>If you have a <code>java.io.InputStream</code> object, how should you process that object and produce a <code>String</code>?</p>\n\n<hr>\n\n<p>Suppose I have an <code>InputStream</code> that contains text data, and I want to convert it to a <code>String</code>, so for example I can write that to a log file.</p>\n\n<p>What is the easiest way to take the <code>InputStream</code> and convert it to a <code>String</code>?</p>\n\n<pre><code>public String convertStreamToString(InputStream is) {\n    // ???\n}\n</code></pre>\n','https://stackoverflow.com/questions/309424/how-do-i-read-convert-an-inputstream-into-a-string-in-java',4084,'How do I read / convert an InputStream into a String in Java?',309424,309448),('<p>How can I get a timestamp in JavaScript?</p>\n\n<p>Something similar to <a href=\"https://en.wikipedia.org/wiki/Unix_time\" rel=\"noreferrer\">Unix timestamp</a>, that is, a single number that represents the current time and date. Either as a number or a string.</p>\n','https://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript',4033,'How do you get a timestamp in JavaScript?',221294,221297),('<p>I use <code>object != null</code> a lot to avoid <a href=\"https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html\" rel=\"noreferrer\"><code>NullPointerException</code></a>.</p>\n\n<p>Is there a good alternative to this? </p>\n\n<p>For example I often use:</p>\n\n<pre><code>if (someobject != null) {\n    someobject.doCalc();\n}\n</code></pre>\n\n<p>This checks for a <code>NullPointerException</code> for the <code>someobject</code> object in the above snippet.  </p>\n\n<p>Note that the accepted answer may be out of date, see <a href=\"https://stackoverflow.com/a/2386013/12943\">https://stackoverflow.com/a/2386013/12943</a> for a more recent approach.</p>\n','https://stackoverflow.com/questions/271526/avoiding-null-statements',4023,'Avoiding != null statements',271526,271874),('<p>What is the most concise and efficient way to find out if a JavaScript array contains a value?</p>\n\n<p>This is the only way I know to do it:</p>\n\n<pre><code>function contains(a, obj) {\n    for (var i = 0; i &lt; a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Is there a better and more concise way to accomplish this?</p>\n\n<p>This is very closely related to Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\">Best way to find an item in a JavaScript Array?</a></em> which addresses finding objects in an array using <code>indexOf</code>.</p>\n','https://stackoverflow.com/questions/237104/how-do-i-check-if-an-array-includes-a-value-in-javascript',4019,'How do I check if an array includes a value in JavaScript?',237104,1473742),('<p>Chrome supports the <a href=\"http://www.w3.org/html/wg/drafts/html/master/single-page.html#the-placeholder-attribute\" rel=\"noreferrer\" title=\"The placeholder attribute\">placeholder attribute</a> on <code>input[type=text]</code> elements (others probably do too).</p>\n\n<p>But the following <code>CSS</code> doesn\'t do anything to the placeholder\'s value:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[placeholder], [placeholder], *[placeholder] {\r\n    color: red !important;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"text\" placeholder=\"Value\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>Value</code> will still remain <code>grey</code> instead of <code>red</code>.</p>\n\n<p><strong>Is there a way to change the color of the placeholder text?</strong></p>\n','https://stackoverflow.com/questions/2610497/change-an-html5-inputs-placeholder-color-with-css',3987,'Change an HTML5 input&#39;s placeholder color with CSS',2610497,2610741),('<p>What exactly is RESTful programming?</p>\n\n\n','https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming',3985,'What exactly is RESTful programming?',671118,29648972),('<p>Within my master branch, I did a <code>git merge some-other-branch</code> locally, but never pushed the changes to origin master. I didn\'t mean to merge, so I\'d like to undo it. When doing a <code>git status</code> after my merge, I was getting this message:</p>\n\n<pre><code># On branch master\n# Your branch is ahead of \'origin/master\' by 4 commits.\n</code></pre>\n\n<p>Based upon some <a href=\"http://www.gitready.com/intermediate/2009/03/16/rolling-back-changes-with-revert.html\" rel=\"noreferrer\">instructions I found</a>, I tried running</p>\n\n<pre><code>git revert HEAD -m 1\n</code></pre>\n\n<p>but now I\'m getting this message with <code>git status</code>:</p>\n\n<pre><code># On branch master\n# Your branch is ahead of \'origin/master\' by 5 commits.\n</code></pre>\n\n<p>I don\'t want my branch to be ahead by any number of commits. How do I get back to that point?</p>\n','https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet',3974,'Undo a Git merge that hasn&#39;t been pushed yet',2389361,2389423),('<p>I have a repo (origin) on a USB key that I cloned on my hard drive (local). I moved \"origin\" to a NAS and successfully tested cloning it from here.</p>\n\n<p>I would like to know if I can change the URI of \"origin\" in the settings of \"local\" so it will now pull from the NAS, and not from the USB key.</p>\n\n<p>For now, I can see two solutions:</p>\n\n<ul>\n<li><p>push everything to the usb-orign, and copy it to the NAS again (implies a lot of work due to new commits to nas-origin);</p></li>\n<li><p>add a new remote to \"local\" and delete the old one (I fear I\'ll break my history).</p></li>\n</ul>\n','https://stackoverflow.com/questions/2432764/how-to-change-the-uri-url-for-a-remote-git-repository',3936,'How to change the URI (URL) for a remote Git repository?',2432764,2432799),('<p>Yesterday I was pairing the socks from the clean laundry and figured out the way I was doing it is not very efficient. I was doing a naive search&nbsp;— picking one sock and \"iterating\" the pile in order to find its pair. This requires iterating over n/2 * n/4 = n<sup>2</sup>/8 socks on average.</p>\n\n<p>As a computer scientist I was thinking what I could do? Sorting (according to size/color/...) of course came to mind to achieve an O(NlogN) solution.</p>\n\n<p>Hashing or other not-in-place solutions are not an option, because I am not able to duplicate my socks (though it could be nice if I could).</p>\n\n<p><strong>So, the question is basically:</strong></p>\n\n<p>Given a pile of <code>n</code> pairs of socks, containing <code>2n</code> elements (assume each sock has exactly one matching pair), what is the best way to pair them up efficiently with up to logarithmic extra space? (I believe I can remember that amount of info if needed.)</p>\n\n<p>I will appreciate an answer that addresses the following aspects:</p>\n\n<ul>\n<li>A general <em>theoretical</em> solution for a huge number of socks.</li>\n<li>The actual number of socks is not that large, I don\'t believe my spouse and I have more than 30 pairs. (And it is fairly easy to distinguish between my socks and hers; can this be used as well?)</li>\n<li>Is it equivalent to the <a href=\"http://en.wikipedia.org/wiki/Element_distinctness_problem\" rel=\"noreferrer\">element distinctness problem</a>?</li>\n</ul>\n','https://stackoverflow.com/questions/14415881/how-can-i-pair-socks-from-a-pile-efficiently',3916,'How can I pair socks from a pile efficiently?',14415881,14419556),('<p>How do I reset my local branch to be just like the branch on the remote repository?</p>\n\n<p>I did:</p>\n\n<pre><code>git reset --hard HEAD\n</code></pre>\n\n<p>But when I run a <code>git status</code>,</p>\n\n<pre><code>On branch master\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n      modified:   java/com/mycompany/TestContacts.java\n      modified:   java/com/mycompany/TestParser.java\n</code></pre>\n\n<p>Can you please tell me why I have these \'modified\'? I haven\'t touched these files? If I did, I want to remove those.</p>\n','https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head',3892,'Reset local repository branch to be just like remote repository HEAD',1628088,1628334),('<p>I have an <code>EditText</code> and a <code>Button</code> in my layout.</p>\n\n<p>After writing in the edit field and clicking on the <code>Button</code>, I want to hide the virtual keyboard. I assume that this is a simple piece of code, but where can I find an example of it?</p>\n\n<p>When touching outside the keyboard.</p>\n','https://stackoverflow.com/questions/1109022/close-hide-android-soft-keyboard',3832,'Close/hide android soft keyboard',1109022,17789187),('<p>I\'m stuck and cannot escape. It says:</p>\n\n<pre><code>\"type :quit&lt;Enter&gt; to quit VIM\"\n</code></pre>\n\n<p>But when I type that it simply appears in the object body.</p>\n','https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor',3811,'How do I exit the Vim editor?',11828270,11828573),('<p>How can you enumerate an <code>enum</code> in C#?</p>\n\n<p>E.g. the following code does not compile:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public enum Suit\n{\n    Spades,\n    Hearts,\n    Clubs,\n    Diamonds\n}\n\npublic void EnumerateAllSuitsDemoMethod()\n{\n    foreach (Suit suit in Suit)\n    {\n        DoSomething(suit);\n    }\n}\n</code></pre>\n\n<p>And it gives the following compile-time error:</p>\n\n<blockquote>\n  <p>\'Suit\' is a \'type\' but is used like a \'variable\'</p>\n</blockquote>\n\n<p>It fails on the <code>Suit</code> keyword, the second one.</p>\n','https://stackoverflow.com/questions/105372/how-to-enumerate-an-enum',3788,'How to enumerate an enum',105372,105402),('<p>What are the differences between a <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a> and a <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Hashtable.html\" rel=\"noreferrer\"><code>Hashtable</code></a> in Java?</p>\n\n<p>Which is more efficient for non-threaded applications?</p>\n','https://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable',3760,'Differences between HashMap and Hashtable?',40471,40878),('<p>What command can be used to check if a directory exists or not, within a Bash shell script?</p>\n','https://stackoverflow.com/questions/59838/how-can-i-check-if-a-directory-exists-in-a-bash-shell-script',3740,'How can I check if a directory exists in a Bash shell script?',59838,59839),('<p>In <strong>SQL Server</strong>, it is possible to <code>INSERT</code> into a table using a <code>SELECT</code> statement:</p>\n\n<pre><code>INSERT INTO Table (col1, col2, col3)\nSELECT col1, col2, col3 \nFROM other_table \nWHERE sql = \'cool\'\n</code></pre>\n\n<p>Is it also possible to <em>update</em> via a <code>SELECT</code>? I have a temporary table containing the values and would like to update another table using those values. Perhaps something like this:</p>\n\n<pre><code>UPDATE Table SET col1, col2\nSELECT col1, col2 \nFROM other_table \nWHERE sql = \'cool\'\nWHERE Table.id = other_table.id\n</code></pre>\n','https://stackoverflow.com/questions/2334712/how-do-i-update-from-a-select-in-sql-server',3712,'How do I UPDATE from a SELECT in SQL Server?',2334712,2334741),('<p>I keep rereading <a href=\"https://docs.docker.com/\" rel=\"noreferrer\">the Docker documentation</a> to try to understand the difference between Docker and a full VM. How does it manage to provide a full filesystem, isolated networking environment, etc. without being as heavy?</p>\n\n<p>Why is deploying software to a Docker image (if that\'s the right term) easier than simply deploying to a consistent production environment?</p>\n','https://stackoverflow.com/questions/16047306/how-is-docker-different-from-a-virtual-machine',3712,'How is Docker different from a virtual machine?',16047306,16048358),('<p>Until today, I thought that for example:</p>\n\n<pre><code>i += j;\n</code></pre>\n\n<p>Was just a shortcut for:</p>\n\n<pre><code>i = i + j;\n</code></pre>\n\n<p>But if we try this:</p>\n\n<pre><code>int i = 5;\nlong j = 8;\n</code></pre>\n\n<p>Then <code>i = i + j;</code> will not compile but <code>i += j;</code> will compile fine.</p>\n\n<p>Does it mean that in fact <code>i += j;</code> is a shortcut for something like this\n<code>i = (type of i) (i + j)</code>?</p>\n','https://stackoverflow.com/questions/8710619/why-dont-javas-compound-assignment-operators-require-casting',3646,'Why don&#39;t Java&#39;s +=, -=, *=, /= compound assignment operators require casting?',8710619,8710685),('<p>I was looking at the new APIs introduced in <a href=\"http://en.wikipedia.org/wiki/Android_version_history#Android_4.1.2F4.2_Jelly_Bean\" rel=\"noreferrer\">Android 4.2</a>.\nWhile looking at the <a href=\"http://developer.android.com/reference/android/os/UserManager.html\" rel=\"noreferrer\"><code>UserManager</code></a> class I came across the following method:</p>\n\n<blockquote>\n<pre><code>public boolean isUserAGoat()\n</code></pre>\n  \n  <p>Used to determine whether the user making this call is subject to teleportations.</p>\n  \n  <p>Returns whether the user making this call is a goat.</p>\n</blockquote>\n\n<p>How and when should this be used?</p>\n','https://stackoverflow.com/questions/13375357/proper-use-cases-for-android-usermanager-isuseragoat',3643,'Proper use cases for Android UserManager.isUserAGoat()?',13375357,13375461),('<p>I recently forked a project and applied several fixes. I then created a pull request which was then accepted.</p>\n\n<p>A few days later another change was made by another contributor. So my fork doesn\'t contain that change. </p>\n\n<p>How can I get that change into my fork? Do I need to delete and re-create my fork when I have further changes to contribute? Or is there an update button?</p>\n','https://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository',3639,'How do I update a GitHub forked repository?',7244321,7244456),('<p>How do I access the index in a <code>for</code> loop like the following?</p>\n\n<pre><code>ints = [8, 23, 45, 12, 78]\nfor i in ints:\n    print(\'item #{} = {}\'.format(???, i))\n</code></pre>\n\n<p>I want to get this output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>item #1 = 8\nitem #2 = 23\nitem #3 = 45\nitem #4 = 12\nitem #5 = 78\n</code></pre>\n\n<p>When I loop through it using a <code>for</code> loop, how do I access the loop index, from 1 to 5 in this case?</p>\n','https://stackoverflow.com/questions/522563/accessing-the-index-in-for-loops',3635,'Accessing the index in &#39;for&#39; loops?',522563,522578),('<p>How can I squash my last X commits together into one commit using Git?</p>\n','https://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git',3634,'Squash my last X commits together using Git',5189560,5189600),('<p>I have an array that is initialized like:</p>\n\n<pre><code>Element[] array = {new Element(1), new Element(2), new Element(3)};\n</code></pre>\n\n<p>I would like to convert this array into an object of the <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html\" rel=\"noreferrer\"><code>ArrayList</code></a> class.</p>\n\n<pre><code>ArrayList&lt;Element&gt; arraylist = ???;\n</code></pre>\n','https://stackoverflow.com/questions/157944/create-arraylist-from-array',3613,'Create ArrayList from array',157944,157950),('<p>What is the difference between a function decorated with <a href=\"http://docs.python.org/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>@staticmethod</code></a> and one decorated with <a href=\"http://docs.python.org/library/functions.html#classmethod\" rel=\"noreferrer\"><code>@classmethod</code></a>?</p>\n','https://stackoverflow.com/questions/136097/difference-between-staticmethod-and-classmethod',3611,'Difference between staticmethod and classmethod',136097,1669524),('<p>I\'m looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>\n\n<p>I want to do:</p>\n\n<pre><code>if not somestring.contains(\"blah\"):\n   continue\n</code></pre>\n','https://stackoverflow.com/questions/3437059/does-python-have-a-string-contains-substring-method',3599,'Does Python have a string &#39;contains&#39; substring method?',3437059,3437070),('<p>How do I remove a Git submodule?</p>\n\n<p>By the way, is there a reason I can\'t simply do \n<code>git submodule rm whatever</code> ?</p>\n','https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule',3556,'How do I remove a submodule?',1260748,16162000),('<p>I know how to make a new branch that tracks remote branches, but <strong>how do I make an existing branch track a remote branch?</strong></p>\n\n<p>I know I can just edit the <code>.git/config</code> file, but it seems there should be an easier way.</p>\n','https://stackoverflow.com/questions/520650/make-an-existing-git-branch-track-a-remote-branch',3546,'Make an existing Git branch track a remote branch?',520650,2286030),('<p>How do you delete a Git tag that has already been pushed?</p>\n','https://stackoverflow.com/questions/5480258/how-to-delete-a-remote-tag',3450,'How to delete a remote tag?',5480258,5480292),('<p>I would like to <code>grep</code> for a string, but also show the preceding five lines and the following five lines as well as the matched line. How would I be able to do this?</p>\n','https://stackoverflow.com/questions/9081/grep-a-file-but-show-several-surrounding-lines',3438,'grep a file, but show several surrounding lines?',9081,9083),('<p>In Swing, the password field has a <code>getPassword()</code> (returns <code>char[]</code>) method instead of the usual <code>getText()</code> (returns <code>String</code>) method. Similarly, I have come across a suggestion not to use <code>String</code> to handle passwords.</p>\n\n<p>Why does <code>String</code> pose a threat to security when it comes to passwords?\nIt feels inconvenient to use <code>char[]</code>.</p>\n','https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords',3435,'Why is char[] preferred over String for passwords?',8881291,8881376),('<p>After I upgraded to latest stable <code>node</code> and <code>npm</code>, I tried <code>npm install moment --save</code>. It saves the entry in the <code>package.json</code> with the caret <code>^</code> prefix. Previously, it was a tilde <code>~</code> prefix. </p>\n\n<ol>\n<li>Why are these changes made in <code>npm</code>? </li>\n<li>What is the difference between tilde <code>~</code> and caret <code>^</code>?</li>\n<li>What is the advantages over others?</li>\n</ol>\n','https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json',3429,'What&#39;s the difference between tilde(~) and caret(^) in package.json?',22343224,22345808),('<p>I wonder whether there is a shortcut to make a simple list out of list of lists in Python.</p>\n\n<p>I can do that in a <code>for</code> loop, but maybe there is some cool \"one-liner\"? I tried it with <code>reduce()</code>, but I get an error.</p>\n\n<p><strong>Code</strong></p>\n\n<pre><code>l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nreduce(lambda x, y: x.extend(y), l)\n</code></pre>\n\n<p><strong>Error message</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 1, in &lt;lambda&gt;\nAttributeError: \'NoneType\' object has no attribute \'extend\'\n</code></pre>\n','https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists',3424,'How to make a flat list out of list of lists?',952914,952952),('<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>\n\n<p>I can sort on the keys, but how can I sort based on the values?</p>\n\n<p>Note: I have read Stack Overflow question here <em><a href=\"https://stackoverflow.com/questions/72899\">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>\n','https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value',3422,'How do I sort a dictionary by value?',613183,613218),('<p>What\'s the best way to iterate over the items in a <a href=\"https://docs.oracle.com/javase/10/docs/api/java/util/HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a>?</p>\n','https://stackoverflow.com/questions/1066589/iterate-through-a-hashmap',3368,'Iterate through a HashMap',1066589,1066603),('<p>In an HTML table, the <code>cellpadding</code> and <code>cellspacing</code> can be set like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table cellspacing=\"1\" cellpadding=\"1\"&gt;\n</code></pre>\n\n<p>How can the same be accomplished using CSS?</p>\n','https://stackoverflow.com/questions/339923/set-cellpadding-and-cellspacing-in-css',3335,'Set cellpadding and cellspacing in CSS?',339923,3209434),('<p>Over the years I have slowly developed a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"noreferrer\">regular expression</a> that validates MOST email addresses correctly, assuming they don\'t use an IP address as the server part.</p>\n\n<p>I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn\'t allowing 4-character TLDs).</p>\n\n<p><em>What is the best regular expression you have or have seen for validating emails?</em></p>\n\n<p>I\'ve seen several solutions that use functions that use several shorter expressions, but I\'d rather have one long complex expression in a simple function instead of several short expression in a more complex function.</p>\n','https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression',3332,'How to validate an email address using a regular expression?',201323,201378),('<p>What are the differences between a <code>Service</code>, <code>Provider</code> and <code>Factory</code> in AngularJS?</p>\n','https://stackoverflow.com/questions/15666048/angularjs-service-vs-provider-vs-factory',3325,'AngularJS: Service vs provider vs factory',15666048,15666049),('<p>If I have an object implementing the <code>Map</code> interface in Java and I wish to iterate over every pair contained within it,  what is the most efficient way of going through the map?</p>\n\n<p>Will the ordering of elements depend on the specific map implementation that I have for the interface?</p>\n','https://stackoverflow.com/questions/46898/how-do-i-efficiently-iterate-over-each-entry-in-a-java-map',3320,'How do I efficiently iterate over each entry in a Java Map?',46898,46908),('<p>I need a good explanation (references are a plus) on Python\'s slice notation. </p>\n\n<p>To me, this notation needs a bit of picking up. </p>\n\n<p>It looks extremely powerful, but I haven\'t quite got my head around it.</p>\n','https://stackoverflow.com/questions/509211/understanding-slice-notation',3320,'Understanding slice notation',509211,509295),('<p>I\'ve used the following script to see if a file exists:</p>\n\n<pre><code>#!/bin/bash\n\nFILE=$1     \nif [ -f $FILE ]; then\n   echo \"File $FILE exists.\"\nelse\n   echo \"File $FILE does not exist.\"\nfi\n</code></pre>\n\n<p>What\'s the correct syntax to use if I only want to check if the file does <strong>not</strong> exist?</p>\n\n<pre><code>#!/bin/bash\n\nFILE=$1     \nif [ $FILE does not exist ]; then\n   echo \"File $FILE does not exist.\"\nfi\n</code></pre>\n','https://stackoverflow.com/questions/638975/how-do-i-tell-if-a-regular-file-does-not-exist-in-bash',3280,'How do I tell if a regular file does not exist in Bash?',638975,638980),('<p>I would like to know how to delete a commit.</p>\n\n<p>By <code>delete</code>, I mean it is as if I didn\'t make that commit, and when I do a push in the future, my changes will not push to the remote branch.</p>\n\n<p>I read git help, and I think the command I should use is <code>git reset --hard HEAD</code>.  Is this correct?</p>\n','https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git',3257,'Delete commits from a branch in Git',1338728,1338744),('<p>I just had an interview, and I was asked to create a <strong><em>memory leak</em></strong> with Java.<br>\nNeedless to say, I felt pretty dumb having no clue on how to even start creating one.</p>\n\n<p>What would an example be?</p>\n','https://stackoverflow.com/questions/6470651/how-to-create-a-memory-leak-in-java',3237,'How to create a memory leak in Java?',6470651,6471947),('<p>For example, if passed the following:</p>\n\n<pre><code>a = []\n</code></pre>\n\n<p>How do I check to see if <code>a</code> is empty?</p>\n','https://stackoverflow.com/questions/53513/how-do-i-check-if-a-list-is-empty',3234,'How do I check if a list is empty?',53513,53522),('<p>Given a list <code>[\"foo\", \"bar\", \"baz\"]</code> and an item in the list <code>\"bar\"</code>, how do I get its index (<code>1</code>) in Python?</p>\n','https://stackoverflow.com/questions/176918/finding-the-index-of-an-item-in-a-list',3227,'Finding the index of an item in a list',176918,176921),('<p>How can an <code>int</code> be cast to an <code>enum</code> in C#?</p>\n','https://stackoverflow.com/questions/29482/how-to-cast-int-to-enum',3217,'How to cast int to enum?',29482,29485),('<p>Does anybody know how to easily undo a git rebase?</p>\n\n<p>The only way that comes to mind is to go at it manually:</p>\n\n<ul>\n<li>git checkout the commit parent to both of the branches </li>\n<li>then create a temp branch from there</li>\n<li>cherry-pick all commits by hand</li>\n<li>replace the branch in which I rebased by the manually-created branch</li>\n</ul>\n\n<p>In my current situation this is gonna work because I can easily spot commits from both branches (one was my stuff, the other was my colleague\'s stuff).</p>\n\n<p>However my approach strikes me as suboptimal and error-prone (let\'s say I had just rebased with 2 of my own branches).</p>\n\n<p>Any ideas?</p>\n\n<p>Clarification: I\'m talking about a rebase during which a bunch of commits were replayed. Not only one.</p>\n','https://stackoverflow.com/questions/134882/undoing-a-git-rebase',3198,'Undoing a git rebase',134882,135614),('<p>How do I select the <code>&lt;li&gt;</code> element that is a direct parent of the anchor element?</p>\n\n<p>As an example, my CSS would be something like this:</p>\n\n<pre><code>li &lt; a.active {\n    property: value;\n}\n</code></pre>\n\n<p>Obviously there are ways of doing this with JavaScript, but I\'m hoping that there is some sort of workaround that exists native to CSS Level 2.</p>\n\n<p>The menu that I am trying to style is being spewed out by a CMS, so I can\'t move the active element to the <code>&lt;li&gt;</code> element... (unless I theme the menu creation module which I\'d rather not do).</p>\n\n<p>Any ideas?</p>\n','https://stackoverflow.com/questions/1014861/is-there-a-css-parent-selector',3197,'Is there a CSS parent selector?',1014861,1014958),('<p>In Java, are there clear rules on when to use each of access modifiers, namely the default (package private), <code>public</code>, <code>protected</code> and <code>private</code>, while making <code>class</code> and <code>interface</code> and dealing with inheritance?</p>\n','https://stackoverflow.com/questions/215497/what-is-the-difference-between-public-protected-package-private-and-private-in',3182,'What is the difference between public, protected, package-private and private in Java?',215497,215505),('<p>I am a bit puzzled by the following code:</p>\n\n<pre><code>d = {\'x\': 1, \'y\': 2, \'z\': 3} \nfor key in d:\n    print key, \'corresponds to\', d[key]\n</code></pre>\n\n<p>What I don\'t understand is the <code>key</code> portion. How does Python recognize that it needs only to read the key from the dictionary? Is <code>key</code> a special word in Python? Or is it simply a variable?</p>\n','https://stackoverflow.com/questions/3294889/iterating-over-dictionaries-using-for-loops',3169,'Iterating over dictionaries using &#39;for&#39; loops',3294889,3294899),('<p>I started some work on a new feature and after coding for a bit, I decided this feature should be on its own branch. </p>\n\n<p>How do I move the existing uncommitted changes to a new branch and reset my current one?</p>\n\n<p>I want to reset my current branch while preserving existing work on the new feature.</p>\n','https://stackoverflow.com/questions/1394797/move-existing-uncommitted-work-to-a-new-branch-in-git',3146,'Move existing, uncommitted work to a new branch in Git',1394797,1394804),('<p>I created a local branch which I want to \'push\' upstream. There is a similar question here on Stack Overflow on how to track a newly created remote branch. </p>\n\n<p>However, my workflow is slightly different. <strong>First</strong> I want to create a local branch, and I will only push it upstream when I\'m satisfied and want to share my branch.</p>\n\n<ul>\n<li>How would I do that? (my google searches did not seem to come up with anything).</li>\n<li>How would I tell my colleagues to pull it from the upstream repository?</li>\n</ul>\n\n<p><strong>UPDATE With Git 2.0 there is a simpler answer</strong> I have written below: <a href=\"https://stackoverflow.com/a/27185855/109305\">https://stackoverflow.com/a/27185855/109305</a></p>\n','https://stackoverflow.com/questions/1519006/how-do-you-create-a-remote-git-branch',3144,'How do you create a remote Git branch?',1519006,27185855),('<p>After an AJAX request, sometimes my application may return an empty object, like:</p>\n\n<pre><code>var a = {};\n</code></pre>\n\n<p>How can I check whether that\'s the case?</p>\n','https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object',3142,'How do I test for an empty JavaScript object?',679915,32108184),('<p>How can I create or use a global variable in a function?</p>\n\n<p>If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable in a local variable of the function which needs its access?</p>\n','https://stackoverflow.com/questions/423379/using-global-variables-in-a-function',3135,'Using global variables in a function',423379,423596),('<p>I\'ve always been one to simply use:</p>\n\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;&gt;();\n</code></pre>\n\n<p>I use the interface as the type name for <em>portability</em>, so that when I ask questions such as these I can rework my code.  </p>\n\n<p>When should <a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/LinkedList.html\" rel=\"noreferrer\"><code>LinkedList</code></a> be used over <a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/ArrayList.html\" rel=\"noreferrer\"><code>ArrayList</code></a> and vice-versa?</p>\n','https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist-in-java',3132,'When to use LinkedList over ArrayList in Java?',322715,322742),('<p>I saw some code that seems to use an operator I don\'t recognize, in the form of two exclamation points, like so: <code>!!</code>. Can someone please tell me what this operator does?</p>\n\n<p>The context in which I saw this was,</p>\n\n<pre><code>this.vertical = vertical !== undefined ? !!vertical : this.vertical;\n</code></pre>\n','https://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript',3130,'What is the !! (not not) operator in JavaScript?',784929,784946),('<p>What\'s the difference between the list methods <code>append()</code> and <code>extend()</code>?</p>\n','https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend',3116,'What is the difference between Python&#39;s list methods append and extend?',252703,252711),('<p>What is the difference between using <code>call</code> and <code>apply</code> to invoke a function?</p>\n\n<pre><code>var func = function() {\n  alert(\'hello!\');\n};\n</code></pre>\n\n<p><code>func.apply();</code> vs <code>func.call();</code></p>\n\n<p>Are there performance differences between the two aforementioned methods? When is it best to use <code>call</code> over <code>apply</code> and vice versa?</p>\n','https://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply',3112,'What is the difference between call and apply?',1986896,1986909),('<p>How can I view the change history of an individual file in Git, complete details with what has changed?</p>\n\n<p>I have got as far as: </p>\n\n<pre><code>git log -- [filename]\n</code></pre>\n\n<p>which shows me the commit history of the file, but how do I get at the content of each of the file changes?</p>\n\n<p>I\'m trying to make the transition from MS SourceSafe and that used to be a simple <code>right-click</code> → <code>show history</code>.</p>\n','https://stackoverflow.com/questions/278192/view-the-change-history-of-a-file-using-git-versioning',3105,'View the change history of a file using Git versioning',278192,1321962),('<p>I have an object <code>x</code>. I\'d like to copy it as object <code>y</code>, such that changes to <code>y</code> do not modify <code>x</code>. I realized that copying objects derived from built-in JavaScript objects will result in extra, unwanted properties. This isn\'t a problem, since I\'m copying one of my own literal-constructed objects.</p>\n\n<p>How do I correctly clone a JavaScript object?</p>\n','https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object',3094,'How do I correctly clone a JavaScript object?',728360,728694),('<p>How can I stash only one of multiple changed files on my branch?</p>\n','https://stackoverflow.com/questions/3040833/stash-only-one-file-out-of-multiple-files-that-have-changed-with-git',3084,'Stash only one file out of multiple files that have changed with Git?',3040833,8333163),('<p>There have been several questions already posted with specific questions about <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" rel=\"noreferrer\">dependency injection</a>, such as when to use it and what frameworks are there for it. However,</p>\n\n<p><strong>What is dependency injection and when/why should or shouldn\'t it be used?</strong></p>\n','https://stackoverflow.com/questions/130794/what-is-dependency-injection',3081,'What is dependency injection?',130794,130862),('<p>Git clone will behave copying remote current working branch into local. </p>\n\n<p>Is there any way to clone a specific branch by myself without switching branches on the remote repository?</p>\n','https://stackoverflow.com/questions/1911109/how-do-i-clone-a-specific-git-branch',3062,'How do I clone a specific Git branch?',1911109,1911126),('<p>My initial commit contained some log files. I\'ve added <code>*log</code> to my <code>.gitignore</code>, and now I want to remove the log files from my repository.</p>\n\n<pre><code>git rm mylogfile.log\n</code></pre>\n\n<p>will remove a file from the repository, but will also remove it from the local file system.</p>\n\n<p>How can I remove this file from the repo <strong>without</strong> deleting my local copy of the file?</p>\n','https://stackoverflow.com/questions/1143796/remove-a-file-from-a-git-repository-without-deleting-it-from-the-local-filesyste',3061,'Remove a file from a Git repository without deleting it from the local filesystem',1143796,1143800),('<p>How can I convert a <code>String</code> to an <code>int</code> in Java?</p>\n\n<p>My String contains only numbers, and I want to return the number it represents.</p>\n\n<p>For example, given the string <code>\"1234\"</code> the result should be the number <code>1234</code>.</p>\n','https://stackoverflow.com/questions/5585779/how-do-i-convert-a-string-to-an-int-in-java',3039,'How do I convert a String to an int in Java?',5585779,5585800),('<p>All I want is to get the website URL. Not the URL as taken from a link. On the page loading I need to be able to grab the full, current URL of the website and set it as a variable to do with as I please.</p>\n','https://stackoverflow.com/questions/1034621/get-the-current-url-with-javascript',3019,'Get the current URL with JavaScript?',1034621,1034642),('<p>Eclipse issues warnings when a <code>serialVersionUID</code> is missing.  </p>\n\n<blockquote>\n  <p>The serializable class Foo does not declare a static final\n  serialVersionUID field of type long</p>\n</blockquote>\n\n<p>What is <code>serialVersionUID</code> and why is it important?  Please show an example where missing <code>serialVersionUID</code> will cause a problem.</p>\n','https://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it',3013,'What is a serialVersionUID and why should I use it?',285793,285809),('<p>Consider the following code:\n</p>\n\n<pre><code>0.1 + 0.2 == 0.3  -&gt;  false\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>0.1 + 0.2         -&gt;  0.30000000000000004\n</code></pre>\n\n<p>Why do these inaccuracies happen?</p>\n','https://stackoverflow.com/questions/588004/is-floating-point-math-broken',3006,'Is floating point math broken?',588004,588014),('<p>How do I check if a particular key exists in a JavaScript object or array?</p>\n\n<p>If a key doesn\'t exist, and I try to access it, will it return false? Or throw an error?</p>\n','https://stackoverflow.com/questions/1098040/checking-if-a-key-exists-in-a-javascript-object',3002,'Checking if a key exists in a JavaScript object?',1098040,1098955),('<p>I\'m trying to iterate over the words of a string.</p>\n\n<p>The string can be assumed to be composed of words separated by whitespace.</p>\n\n<p>Note that I\'m not interested in C string functions or that kind of character manipulation/access. Also, please give precedence to elegance over efficiency in your answer.</p>\n\n<p>The best solution I have right now is:</p>\n\n<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n    string s = \"Somewhere down the road\";\n    istringstream iss(s);\n\n    do\n    {\n        string subs;\n        iss &gt;&gt; subs;\n        cout &lt;&lt; \"Substring: \" &lt;&lt; subs &lt;&lt; endl;\n    } while (iss);\n}\n</code></pre>\n\n<p>Is there a more elegant way to do this?</p>\n','https://stackoverflow.com/questions/236129/how-do-i-iterate-over-the-words-of-a-string',2996,'How do I iterate over the words of a string?',236129,237280),('<p>Optimizing SQLite is tricky. Bulk-insert performance of a C application can vary from 85 inserts per second to over 96,000 inserts per second!</p>\n\n<p><strong>Background:</strong> We are using SQLite as part of a desktop application. We have large amounts of configuration data stored in XML files that are parsed and loaded into an SQLite database for further processing when the application is initialized. SQLite is ideal for this situation because it\'s fast, it requires no specialized configuration, and the database is stored on disk as a single file.</p>\n\n<p><strong>Rationale:</strong> <em>Initially I was disappointed with the performance I was seeing.</em> It turns-out that the performance of SQLite can vary significantly (both for bulk-inserts and selects) depending on how the database is configured and how you\'re using the API. It was not a trivial matter to figure out what all of the options and techniques were, so I thought it prudent to create this community wiki entry to share the results with Stack&nbsp;Overflow readers in order to save others the trouble of the same investigations.</p>\n\n<p><strong>The Experiment:</strong> Rather than simply talking about performance tips in the general sense (i.e. <em>\"Use a transaction!\"</em>), I thought it best to write some C code and <em>actually measure</em> the impact of various options. We\'re going to start with some simple data:</p>\n\n<ul>\n<li>A 28 MB TAB-delimited text file (approximately 865,000 records) of the <a href=\"http://www.toronto.ca/open/datasets/ttc-routes\" rel=\"noreferrer\">complete transit schedule for the city of Toronto</a></li>\n<li>My test machine is a 3.60 GHz P4 running Windows XP.</li>\n<li>The code is compiled with <a href=\"http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions\" rel=\"noreferrer\">Visual C++</a> 2005 as \"Release\" with \"Full Optimization\" (/Ox) and Favor Fast Code (/Ot).</li>\n<li>I\'m using the SQLite \"Amalgamation\", compiled directly into my test application. The SQLite version I happen to have is a bit older (3.6.7), but I suspect these results will be comparable to the latest release (please leave a comment if you think otherwise).</li>\n</ul>\n\n<p><em>Let\'s write some code!</em></p>\n\n<p><strong>The Code:</strong> A simple C program that reads the text file line-by-line, splits the string into values and then inserts the data into an SQLite database. In this \"baseline\" version of the code, the database is created, but we won\'t actually insert data:</p>\n\n<pre><code>/*************************************************************\n    Baseline code to experiment with SQLite performance.\n\n    Input data is a 28 MB TAB-delimited text file of the\n    complete Toronto Transit System schedule/route info\n    from http://www.toronto.ca/open/datasets/ttc-routes/\n\n**************************************************************/\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n#include &lt;string.h&gt;\n#include \"sqlite3.h\"\n\n#define INPUTDATA \"C:\\\\TTC_schedule_scheduleitem_10-27-2009.txt\"\n#define DATABASE \"c:\\\\TTC_schedule_scheduleitem_10-27-2009.sqlite\"\n#define TABLE \"CREATE TABLE IF NOT EXISTS TTC (id INTEGER PRIMARY KEY, Route_ID TEXT, Branch_Code TEXT, Version INTEGER, Stop INTEGER, Vehicle_Index INTEGER, Day Integer, Time TEXT)\"\n#define BUFFER_SIZE 256\n\nint main(int argc, char **argv) {\n\n    sqlite3 * db;\n    sqlite3_stmt * stmt;\n    char * sErrMsg = 0;\n    char * tail = 0;\n    int nRetCode;\n    int n = 0;\n\n    clock_t cStartClock;\n\n    FILE * pFile;\n    char sInputBuf [BUFFER_SIZE] = \"\\0\";\n\n    char * sRT = 0;  /* Route */\n    char * sBR = 0;  /* Branch */\n    char * sVR = 0;  /* Version */\n    char * sST = 0;  /* Stop Number */\n    char * sVI = 0;  /* Vehicle */\n    char * sDT = 0;  /* Date */\n    char * sTM = 0;  /* Time */\n\n    char sSQL [BUFFER_SIZE] = \"\\0\";\n\n    /*********************************************/\n    /* Open the Database and create the Schema */\n    sqlite3_open(DATABASE, &amp;db);\n    sqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);\n\n    /*********************************************/\n    /* Open input file and import into Database*/\n    cStartClock = clock();\n\n    pFile = fopen (INPUTDATA,\"r\");\n    while (!feof(pFile)) {\n\n        fgets (sInputBuf, BUFFER_SIZE, pFile);\n\n        sRT = strtok (sInputBuf, \"\\t\");     /* Get Route */\n        sBR = strtok (NULL, \"\\t\");            /* Get Branch */\n        sVR = strtok (NULL, \"\\t\");            /* Get Version */\n        sST = strtok (NULL, \"\\t\");            /* Get Stop Number */\n        sVI = strtok (NULL, \"\\t\");            /* Get Vehicle */\n        sDT = strtok (NULL, \"\\t\");            /* Get Date */\n        sTM = strtok (NULL, \"\\t\");            /* Get Time */\n\n        /* ACTUAL INSERT WILL GO HERE */\n\n        n++;\n    }\n    fclose (pFile);\n\n    printf(\"Imported %d records in %4.2f seconds\\n\", n, (clock() - cStartClock) / (double)CLOCKS_PER_SEC);\n\n    sqlite3_close(db);\n    return 0;\n}\n</code></pre>\n\n<hr>\n\n<h2>The \"Control\"</h2>\n\n<p>Running the code as-is doesn\'t actually perform any database operations, but it will give us an idea of how fast the raw C file I/O and string processing operations are.</p>\n\n<blockquote>\n  <p>Imported 864913 records in 0.94\n  seconds</p>\n</blockquote>\n\n<p>Great! We can do 920,000 inserts per second, provided we don\'t actually do any inserts :-)</p>\n\n<hr>\n\n<h2>The \"Worst-Case-Scenario\"</h2>\n\n<p>We\'re going to generate the SQL string using the values read from the file and invoke that SQL operation using sqlite3_exec:</p>\n\n<pre><code>sprintf(sSQL, \"INSERT INTO TTC VALUES (NULL, \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\')\", sRT, sBR, sVR, sST, sVI, sDT, sTM);\nsqlite3_exec(db, sSQL, NULL, NULL, &amp;sErrMsg);\n</code></pre>\n\n<p>This is going to be slow because the SQL will be compiled into VDBE code for every insert and every insert will happen in its own transaction. <em>How slow?</em></p>\n\n<blockquote>\n  <p>Imported 864913 records in 9933.61\n  seconds</p>\n</blockquote>\n\n<p>Yikes! 2 hours and 45 minutes! That\'s only <strong>85 inserts per second.</strong></p>\n\n<h2>Using a Transaction</h2>\n\n<p>By default, SQLite will evaluate every INSERT / UPDATE statement within a unique transaction. If performing a large number of inserts, it\'s advisable to wrap your operation in a transaction:</p>\n\n<pre><code>sqlite3_exec(db, \"BEGIN TRANSACTION\", NULL, NULL, &amp;sErrMsg);\n\npFile = fopen (INPUTDATA,\"r\");\nwhile (!feof(pFile)) {\n\n    ...\n\n}\nfclose (pFile);\n\nsqlite3_exec(db, \"END TRANSACTION\", NULL, NULL, &amp;sErrMsg);\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 38.03\n  seconds</p>\n</blockquote>\n\n<p>That\'s better. Simply wrapping all of our inserts in a single transaction improved our performance to <strong>23,000 inserts per second.</strong></p>\n\n<h2>Using a Prepared Statement</h2>\n\n<p>Using a transaction was a huge improvement, but recompiling the SQL statement for every insert doesn\'t make sense if we using the same SQL over-and-over. Let\'s use <code>sqlite3_prepare_v2</code> to compile our SQL statement once and then bind our parameters to that statement using <code>sqlite3_bind_text</code>:</p>\n\n<pre><code>/* Open input file and import into the database */\ncStartClock = clock();\n\nsprintf(sSQL, \"INSERT INTO TTC VALUES (NULL, @RT, @BR, @VR, @ST, @VI, @DT, @TM)\");\nsqlite3_prepare_v2(db,  sSQL, BUFFER_SIZE, &amp;stmt, &amp;tail);\n\nsqlite3_exec(db, \"BEGIN TRANSACTION\", NULL, NULL, &amp;sErrMsg);\n\npFile = fopen (INPUTDATA,\"r\");\nwhile (!feof(pFile)) {\n\n    fgets (sInputBuf, BUFFER_SIZE, pFile);\n\n    sRT = strtok (sInputBuf, \"\\t\");   /* Get Route */\n    sBR = strtok (NULL, \"\\t\");        /* Get Branch */\n    sVR = strtok (NULL, \"\\t\");        /* Get Version */\n    sST = strtok (NULL, \"\\t\");        /* Get Stop Number */\n    sVI = strtok (NULL, \"\\t\");        /* Get Vehicle */\n    sDT = strtok (NULL, \"\\t\");        /* Get Date */\n    sTM = strtok (NULL, \"\\t\");        /* Get Time */\n\n    sqlite3_bind_text(stmt, 1, sRT, -1, SQLITE_TRANSIENT);\n    sqlite3_bind_text(stmt, 2, sBR, -1, SQLITE_TRANSIENT);\n    sqlite3_bind_text(stmt, 3, sVR, -1, SQLITE_TRANSIENT);\n    sqlite3_bind_text(stmt, 4, sST, -1, SQLITE_TRANSIENT);\n    sqlite3_bind_text(stmt, 5, sVI, -1, SQLITE_TRANSIENT);\n    sqlite3_bind_text(stmt, 6, sDT, -1, SQLITE_TRANSIENT);\n    sqlite3_bind_text(stmt, 7, sTM, -1, SQLITE_TRANSIENT);\n\n    sqlite3_step(stmt);\n\n    sqlite3_clear_bindings(stmt);\n    sqlite3_reset(stmt);\n\n    n++;\n}\nfclose (pFile);\n\nsqlite3_exec(db, \"END TRANSACTION\", NULL, NULL, &amp;sErrMsg);\n\nprintf(\"Imported %d records in %4.2f seconds\\n\", n, (clock() - cStartClock) / (double)CLOCKS_PER_SEC);\n\nsqlite3_finalize(stmt);\nsqlite3_close(db);\n\nreturn 0;\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 16.27\n  seconds</p>\n</blockquote>\n\n<p>Nice! There\'s a little bit more code (don\'t forget to call <code>sqlite3_clear_bindings</code> and <code>sqlite3_reset</code>), but we\'ve more than doubled our performance to <strong>53,000 inserts per second.</strong></p>\n\n<h2>PRAGMA synchronous = OFF</h2>\n\n<p>By default, SQLite will pause after issuing a OS-level write command. This guarantees that the data is written to the disk. By setting <code>synchronous = OFF</code>, we are instructing SQLite to simply hand-off the data to the OS for writing and then continue. There\'s a chance that the database file may become corrupted if the computer suffers a catastrophic crash (or power failure) before the data is written to the platter:</p>\n\n<pre><code>/* Open the database and create the schema */\nsqlite3_open(DATABASE, &amp;db);\nsqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);\nsqlite3_exec(db, \"PRAGMA synchronous = OFF\", NULL, NULL, &amp;sErrMsg);\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 12.41\n  seconds</p>\n</blockquote>\n\n<p>The improvements are now smaller, but we\'re up to <strong>69,600 inserts per second.</strong></p>\n\n<h2>PRAGMA journal_mode = MEMORY</h2>\n\n<p>Consider storing the rollback journal in memory by evaluating <code>PRAGMA journal_mode = MEMORY</code>. Your transaction will be faster, but if you lose power or your program crashes during a transaction you database could be left in a corrupt state with a partially-completed transaction:</p>\n\n<pre><code>/* Open the database and create the schema */\nsqlite3_open(DATABASE, &amp;db);\nsqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);\nsqlite3_exec(db, \"PRAGMA journal_mode = MEMORY\", NULL, NULL, &amp;sErrMsg);\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 13.50\n  seconds</p>\n</blockquote>\n\n<p>A little slower than the previous optimization at <strong>64,000 inserts per second.</strong></p>\n\n<h2>PRAGMA synchronous = OFF <em>and</em> PRAGMA journal_mode = MEMORY</h2>\n\n<p>Let\'s combine the previous two optimizations. It\'s a little more risky (in case of a crash), but we\'re just importing data (not running a bank):</p>\n\n<pre><code>/* Open the database and create the schema */\nsqlite3_open(DATABASE, &amp;db);\nsqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);\nsqlite3_exec(db, \"PRAGMA synchronous = OFF\", NULL, NULL, &amp;sErrMsg);\nsqlite3_exec(db, \"PRAGMA journal_mode = MEMORY\", NULL, NULL, &amp;sErrMsg);\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 12.00\n  seconds</p>\n</blockquote>\n\n<p>Fantastic! We\'re able to do <strong>72,000 inserts per second.</strong></p>\n\n<h2>Using an In-Memory Database</h2>\n\n<p>Just for kicks, let\'s build upon all of the previous optimizations and redefine the database filename so we\'re working entirely in RAM:</p>\n\n<pre><code>#define DATABASE \":memory:\"\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 10.94\n  seconds</p>\n</blockquote>\n\n<p>It\'s not super-practical to store our database in RAM, but it\'s impressive that we can perform <strong>79,000 inserts per second.</strong></p>\n\n<h2>Refactoring C Code</h2>\n\n<p>Although not specifically an SQLite improvement, I don\'t like the extra <code>char*</code> assignment operations in the <code>while</code> loop. Let\'s quickly refactor that code to pass the output of <code>strtok()</code> directly into <code>sqlite3_bind_text()</code>, and let the compiler try to speed things up for us:</p>\n\n<pre><code>pFile = fopen (INPUTDATA,\"r\");\nwhile (!feof(pFile)) {\n\n    fgets (sInputBuf, BUFFER_SIZE, pFile);\n\n    sqlite3_bind_text(stmt, 1, strtok (sInputBuf, \"\\t\"), -1, SQLITE_TRANSIENT); /* Get Route */\n    sqlite3_bind_text(stmt, 2, strtok (NULL, \"\\t\"), -1, SQLITE_TRANSIENT);    /* Get Branch */\n    sqlite3_bind_text(stmt, 3, strtok (NULL, \"\\t\"), -1, SQLITE_TRANSIENT);    /* Get Version */\n    sqlite3_bind_text(stmt, 4, strtok (NULL, \"\\t\"), -1, SQLITE_TRANSIENT);    /* Get Stop Number */\n    sqlite3_bind_text(stmt, 5, strtok (NULL, \"\\t\"), -1, SQLITE_TRANSIENT);    /* Get Vehicle */\n    sqlite3_bind_text(stmt, 6, strtok (NULL, \"\\t\"), -1, SQLITE_TRANSIENT);    /* Get Date */\n    sqlite3_bind_text(stmt, 7, strtok (NULL, \"\\t\"), -1, SQLITE_TRANSIENT);    /* Get Time */\n\n    sqlite3_step(stmt);        /* Execute the SQL Statement */\n    sqlite3_clear_bindings(stmt);    /* Clear bindings */\n    sqlite3_reset(stmt);        /* Reset VDBE */\n\n    n++;\n}\nfclose (pFile);\n</code></pre>\n\n<p><strong>Note: We are back to using a real database file. In-memory databases are fast, but not necessarily practical</strong></p>\n\n<blockquote>\n  <p>Imported 864913 records in 8.94\n  seconds</p>\n</blockquote>\n\n<p>A slight refactoring to the string processing code used in our parameter binding has allowed us to perform <strong>96,700 inserts per second.</strong> I think it\'s safe to say that this is <em>plenty fast</em>. As we start to tweak other variables (i.e. page size, index creation, etc.) this will be our benchmark.</p>\n\n<hr>\n\n<h2>Summary (so far)</h2>\n\n<p><em>I hope you\'re still with me!</em> The reason we started down this road is that bulk-insert performance varies so wildly with SQLite, and it\'s not always obvious what changes need to be made to speed-up our operation. Using the same compiler (and compiler options), the same version of SQLite and the same data we\'ve optimized our code and our usage of SQLite to go <strong>from a worst-case scenario of 85 inserts per second to over 96,000 inserts per second!</strong></p>\n\n<hr>\n\n<h2>CREATE INDEX then INSERT vs. INSERT then CREATE INDEX</h2>\n\n<p>Before we start measuring <code>SELECT</code> performance, we know that we\'ll be creating indices. It\'s been suggested in one of the answers below that when doing bulk inserts, it is faster to create the index after the data has been inserted (as opposed to creating the index first then inserting the data). Let\'s try:</p>\n\n<p><strong>Create Index then Insert Data</strong></p>\n\n<pre><code>sqlite3_exec(db, \"CREATE  INDEX \'TTC_Stop_Index\' ON \'TTC\' (\'Stop\')\", NULL, NULL, &amp;sErrMsg);\nsqlite3_exec(db, \"BEGIN TRANSACTION\", NULL, NULL, &amp;sErrMsg);\n...\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 18.13\n  seconds</p>\n</blockquote>\n\n<p><strong>Insert Data then Create Index</strong></p>\n\n<pre><code>...\nsqlite3_exec(db, \"END TRANSACTION\", NULL, NULL, &amp;sErrMsg);\nsqlite3_exec(db, \"CREATE  INDEX \'TTC_Stop_Index\' ON \'TTC\' (\'Stop\')\", NULL, NULL, &amp;sErrMsg);\n</code></pre>\n\n<blockquote>\n  <p>Imported 864913 records in 13.66\n  seconds</p>\n</blockquote>\n\n<p>As expected, bulk-inserts are slower if one column is indexed, but it does make a difference if the index is created after the data is inserted. Our no-index baseline is 96,000 inserts per second. <strong>Creating the index first then inserting data gives us 47,700 inserts per second, whereas inserting the data first then creating the index gives us 63,300 inserts per second.</strong></p>\n\n<hr>\n\n<p>I\'d gladly take suggestions for other scenarios to try... And will be compiling similar data for SELECT queries soon.</p>\n','https://stackoverflow.com/questions/1711631/improve-insert-per-second-performance-of-sqlite',2986,'Improve INSERT-per-second performance of SQLite',1711631,1712873),('<p>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I\'ll use jQuery in the examples, but this applies to plain-JS as well:</p>\n\n<h3>1. <code>event.preventDefault()</code></h3>\n\n<pre><code>$(\'a\').click(function (e) {\n    // custom handling here\n    e.preventDefault();\n});\n</code></pre>\n\n<h3>2. <code>return false</code></h3>\n\n<pre><code>$(\'a\').click(function () {\n    // custom handling here\n    return false;\n});\n</code></pre>\n\n<p>Is there any significant difference between those two methods of stopping event propagation?</p>\n\n<p>For me, <code>return false;</code> is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc. </p>\n\n<p>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use <code>preventDefault</code> instead? What\'s the better way?</p>\n','https://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false',2974,'event.preventDefault() vs. return false',1357118,1357151),('<p>I am looking for a JavaScript array insert method, in the style of:</p>\n\n<pre><code>arr.insert(index, item)\n</code></pre>\n\n<p>Preferably in jQuery, but any JavaScript implementation will do at this point.</p>\n','https://stackoverflow.com/questions/586182/how-to-insert-an-item-into-an-array-at-a-specific-index-javascript',2958,'How to insert an item into an array at a specific index (JavaScript)?',586182,586189),('<p>What does the <code>explicit</code> keyword mean in C++?</p>\n','https://stackoverflow.com/questions/121162/what-does-the-explicit-keyword-mean',2939,'What does the explicit keyword mean?',121162,121163),('<p>The command <code>git add [--all|-A]</code> appears to be identical to <code>git add .</code>. Is this correct? If not, how do they differ?</p>\n','https://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add',2928,'Difference between &quot;git add -A&quot; and &quot;git add .&quot;',572549,572660),('<p>What is the module/method used to get the current time?</p>\n','https://stackoverflow.com/questions/415511/how-to-get-the-current-time-in-python',2926,'How to get the current time in Python',415511,415519),('<p>Is there a way to make the following return true?</p>\n\n<pre><code>string title = \"ASTRINGTOTEST\";\ntitle.Contains(\"string\");\n</code></pre>\n\n<p>There doesn\'t seem to be an overload that allows me to set the case sensitivity.. Currently I UPPERCASE them both, but that\'s just silly (by which I am referring to the <a href=\"http://en.wikipedia.org/wiki/Internationalization_and_localization\" rel=\"noreferrer\">i18n</a> issues that come with up- and down casing).</p>\n\n<p><strong>UPDATE</strong><br>\nThis question is ancient and since then I have realized I asked for a simple answer for a really vast and difficult topic if you care to investigate it fully.<br>\nFor most cases, in mono-lingual, English code bases <a href=\"https://stackoverflow.com/a/444818/11333\">this</a> answer will suffice. I\'m suspecting because most people coming here fall in this category this is the most popular answer.<br>\n<a href=\"https://stackoverflow.com/a/15464440/11333\">This</a> answer however brings up the inherent problem that we can\'t compare text case insensitive until we know both texts are the same culture and we know  what that culture is. This is maybe a less popular answer, but I think it is more correct and that\'s why I marked it as such.</p>\n','https://stackoverflow.com/questions/444798/case-insensitive-containsstring',2926,'Case insensitive &#39;Contains(string)&#39;',444798,15464440),('<p>I have a JavaScript object like the following:</p>\n\n<pre><code>var p = {\n    \"p1\": \"value1\",\n    \"p2\": \"value2\",\n    \"p3\": \"value3\"\n};\n</code></pre>\n\n<p>Now I want to loop through all <code>p</code> elements (<code>p1</code>, <code>p2</code>, <code>p3</code>...) And get their keys and values. How can I do that?</p>\n\n<p>I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using <code>eval</code>.</p>\n','https://stackoverflow.com/questions/684672/how-do-i-loop-through-or-enumerate-a-javascript-object',2901,'How do I loop through or enumerate a JavaScript object?',684672,684692),('<p>How do I append an object (such as a string or number) to an array in JavaScript?          </p>\n','https://stackoverflow.com/questions/351409/how-to-append-something-to-an-array',2893,'How to append something to an array?',351409,351421),('<p>I have an <code>Activity</code> in Android, with two elements:</p>\n\n<ol>\n<li><code>EditText</code> </li>\n<li><code>ListView</code></li>\n</ol>\n\n<p>When my <code>Activity</code> starts, the <code>EditText</code> immediately has input focus (flashing cursor). I don\'t want any control to have input focus at startup. I tried:</p>\n\n<pre><code>EditText.setSelected(false);\nEditText.setFocusable(false);\n</code></pre>\n\n<p>No luck. How can I convince the <code>EditText</code> to not select itself when the <code>Activity</code> starts?</p>\n','https://stackoverflow.com/questions/1555109/how-to-stop-edittext-from-gaining-focus-at-activity-startup-in-android',2882,'How to stop EditText from gaining focus at Activity startup in Android',1555109,1662088),('<p>I saw <a href=\"https://stackoverflow.com/questions/10230/checking-for-string-contents-string-length-vs-empty-string\">this question</a>, but I didn\'t see a JavaScript specific example. Is there a simple <code>string.Empty</code> available in JavaScript, or is it just a case of checking for <code>\"\"</code>?</p>\n','https://stackoverflow.com/questions/154059/how-can-i-check-for-an-empty-undefined-null-string-in-javascript',2879,'How can I check for an empty/undefined/null string in JavaScript?',154059,154068),('<p>I use Ubuntu and installed <a href=\"https://en.wikipedia.org/wiki/CURL\" rel=\"noreferrer\">cURL</a> on it. I want to test my Spring REST application with cURL. I wrote my POST code at the Java side. However, I want to test it with cURL. I am trying to post a JSON data. Example data is like this:</p>\n\n<pre><code>{\"value\":\"30\",\"type\":\"Tip 3\",\"targetModule\":\"Target 3\",\"configurationGroup\":null,\"name\":\"Configuration Deneme 3\",\"description\":null,\"identity\":\"Configuration Deneme 3\",\"version\":0,\"systemId\":3,\"active\":true}\n</code></pre>\n\n<p>I use this command:</p>\n\n<pre><code>curl -i \\\n    -H \"Accept: application/json\" \\\n    -H \"X-HTTP-Method-Override: PUT\" \\\n    -X POST -d \"value\":\"30\",\"type\":\"Tip 3\",\"targetModule\":\"Target 3\",\"configurationGroup\":null,\"name\":\"Configuration Deneme 3\",\"description\":null,\"identity\":\"Configuration Deneme 3\",\"version\":0,\"systemId\":3,\"active\":true \\\n    http://localhost:8080/xx/xxx/xxxx\n</code></pre>\n\n<p>It returns this error:</p>\n\n<pre><code>HTTP/1.1 415 Unsupported Media Type\nServer: Apache-Coyote/1.1\nContent-Type: text/html;charset=utf-8\nContent-Length: 1051\nDate: Wed, 24 Aug 2011 08:50:17 GMT\n</code></pre>\n\n<p>The error description is this:</p>\n\n<blockquote>\n  <p><em>The server refused this request because the request entity is in a format not supported by the requested resource for the requested method ().</em></p>\n</blockquote>\n\n<p>Tomcat log:\n    \"POST /ui/webapp/conf/clear HTTP/1.1\" 415 1051</p>\n\n<p>What is the right format of the cURL command?</p>\n\n<p>This is my Java side <code>PUT</code> code (I have tested GET and DELETE and they work):</p>\n\n<pre><code>@RequestMapping(method = RequestMethod.PUT)\npublic Configuration updateConfiguration(HttpServletResponse response, @RequestBody Configuration configuration) { //consider @Valid tag\n    configuration.setName(\"PUT worked\");\n    //todo If error occurs response.sendError(HttpServletResponse.SC_NOT_FOUND);\n    return configuration;\n}\n</code></pre>\n','https://stackoverflow.com/questions/7172784/how-do-i-post-json-data-with-curl',2866,'How do I POST JSON data with cURL?',7172784,7173011),('<p>What\'s the best way of checking if an object property in JavaScript is <code>undefined</code>?</p>\n','https://stackoverflow.com/questions/27509/detecting-an-undefined-object-property',2848,'Detecting an undefined object property',27509,416327);
/*!40000 ALTER TABLE `itemsd` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `itemsd_tags`
--

DROP TABLE IF EXISTS `itemsd_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `itemsd_tags` (
  `ItemsD_qId` int NOT NULL,
  `tags` varchar(30) DEFAULT NULL,
  KEY `index_tags` (`tags`),
  KEY `FKjf90b5c301grgvxjysyymuutt` (`ItemsD_qId`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `itemsd_tags`
--

LOCK TABLES `itemsd_tags` WRITE;
/*!40000 ALTER TABLE `itemsd_tags` DISABLE KEYS */;
INSERT INTO `itemsd_tags` VALUES (11227809,'c++'),(11227809,'java'),(11227809,'performance'),(11227809,'optimization'),(11227809,'branch-prediction'),(927358,'undo'),(927358,'git'),(927358,'pre-commit'),(927358,'version-control'),(927358,'git-commit'),(2003505,'git-branch'),(2003505,'git'),(2003505,'git-remote'),(2003505,'version-control'),(2003505,'git-push'),(292357,'git-fetch'),(292357,'git'),(292357,'git-pull'),(292357,'version-control'),(477816,'http-headers'),(477816,'json'),(477816,'content-type'),(231767,'python'),(231767,'iterator'),(231767,'yield'),(231767,'coroutine'),(231767,'generator'),(348170,'git'),(348170,'git-stage'),(348170,'version-control'),(348170,'git-commit'),(1642028,'c++'),(1642028,'c'),(1642028,'operators'),(1642028,'standards-compliance'),(1642028,'code-formatting'),(6591213,'git-branch'),(6591213,'git'),(6591213,'version-control'),(5767325,'arrays'),(5767325,'javascript'),(79923,'stack'),(79923,'dynamic-memory-allocation'),(79923,'language-agnostic'),(79923,'heap'),(79923,'memory-management'),(178325,'dom'),(178325,'visibility'),(178325,'javascript'),(178325,'jquery'),(503093,'redirect'),(503093,'javascript'),(503093,'jquery'),(179123,'git'),(179123,'amend'),(179123,'git-rewrite-history'),(179123,'git-commit'),(244777,'comments'),(244777,'json'),(111102,'variables'),(111102,'closures'),(111102,'function'),(111102,'scope'),(111102,'javascript'),(4114095,'git-checkout'),(4114095,'git-revert'),(4114095,'git'),(4114095,'git-reset'),(1335851,'jslint'),(1335851,'syntax'),(1335851,'use-strict'),(1335851,'javascript'),(8318911,'background-color'),(8318911,'browser'),(8318911,'html'),(1789945,'string'),(1789945,'string-matching'),(1789945,'javascript'),(1789945,'substring'),(1125968,'git-fetch'),(1125968,'git'),(1125968,'git-pull'),(1125968,'version-control'),(1125968,'overwrite'),(336859,'function'),(336859,'idioms'),(336859,'syntax'),(336859,'javascript'),(61212,'git-branch'),(61212,'git'),(61212,'branch'),(6841333,'date'),(6841333,'java'),(6841333,'timezone'),(1783405,'git-checkout'),(1783405,'git'),(1783405,'remote-branch'),(7074,'c#'),(7074,'types'),(7074,'string'),(7074,'.net'),(7074,'alias'),(208105,'javascript-objects'),(208105,'javascript'),(419163,'python'),(419163,'idioms'),(419163,'main'),(419163,'namespaces'),(419163,'python-module'),(394809,'python'),(394809,'operators'),(394809,'conditional-operator'),(394809,'ternary-operator'),(2025282,'user-interface'),(2025282,'android'),(2025282,'units-of-measurement'),(2025282,'android-layout'),(2025282,'dimension'),(100003,'python-datamodel'),(100003,'oop'),(100003,'python'),(100003,'metaclass'),(359494,'equality-operator'),(359494,'operators'),(359494,'identity-operator'),(359494,'equality'),(359494,'javascript'),(14220321,'asynchronous'),(14220321,'ajax'),(14220321,'javascript'),(14220321,'jquery'),(1274057,'git'),(1274057,'gitignore'),(1274057,'git-rm'),(630453,'rest'),(630453,'post'),(630453,'http'),(630453,'put'),(549,'security'),(549,'language-agnostic'),(549,'http'),(549,'article'),(549,'authentication'),(16956810,'grep'),(16956810,'find'),(16956810,'linux'),(16956810,'text'),(16956810,'directory'),(950087,'include'),(950087,'file'),(950087,'import'),(950087,'javascript'),(122102,'clone'),(122102,'javascript'),(122102,'object'),(1628563,'git-branch'),(1628563,'git'),(1628563,'branching-and-merging'),(59895,'bash'),(59895,'directory'),(487258,'big-o'),(487258,'computer-science'),(487258,'time-complexity'),(487258,'complexity-theory'),(487258,'algorithm'),(89228,'python'),(89228,'shell'),(89228,'terminal'),(89228,'subprocess'),(89228,'command'),(417142,'browser'),(417142,'http'),(417142,'url'),(52704,'git'),(52704,'version-control'),(38987,'python'),(38987,'dictionary'),(38987,'merge'),(161813,'git'),(161813,'merge-conflict-resolution'),(161813,'git-merge-conflict'),(161813,'git-merge'),(9329446,'foreach'),(9329446,'loops'),(9329446,'iteration'),(9329446,'arrays'),(9329446,'javascript'),(38549,'database'),(38549,'inner-join'),(38549,'join'),(38549,'outer-join'),(38549,'sql'),(4456438,'wsdl'),(4456438,'coldfusion'),(4456438,'actionscript'),(4456438,'soap'),(4456438,'apache-flex'),(762011,'var'),(762011,'scope'),(762011,'ecmascript-6'),(762011,'let'),(762011,'javascript'),(901712,'checkbox'),(901712,'html'),(901712,'javascript'),(901712,'jquery'),(215718,'git-checkout'),(215718,'git'),(215718,'version-control'),(14994391,'angularjs'),(14994391,'javascript'),(14994391,'jquery'),(3737139,'operators'),(3737139,'php'),(3737139,'arguments'),(3737139,'symbols'),(1144783,'string'),(1144783,'replace'),(1144783,'javascript'),(46155,'regex'),(46155,'email-validation'),(46155,'javascript'),(46155,'validation'),(46155,'email'),(176264,'urn'),(176264,'http'),(176264,'rfc3986'),(176264,'uri'),(176264,'url'),(2765421,'git-branch'),(2765421,'git'),(2765421,'git-remote'),(2765421,'repository'),(2765421,'git-push'),(406230,'regex'),(406230,'regex-negation'),(114543,'css'),(114543,'html'),(114543,'alignment'),(114543,'centering'),(115983,'git-add'),(115983,'git'),(115983,'directory'),(273192,'exception'),(273192,'path'),(273192,'python'),(273192,'operating-system'),(273192,'directory'),(105034,'guid'),(105034,'uuid'),(105034,'javascript'),(67699,'git-branch'),(67699,'github'),(67699,'git'),(67699,'git-clone'),(67699,'remote-branch'),(426258,'checkbox'),(426258,'checked'),(426258,'javascript'),(426258,'jquery'),(426258,'selected'),(4089430,'github'),(4089430,'git'),(4089430,'git-remote'),(2669690,'security'),(2669690,'json'),(2669690,'ajax'),(2669690,'javascript'),(309424,'java'),(309424,'string'),(309424,'inputstream'),(309424,'stream'),(309424,'io'),(221294,'date'),(221294,'datetime'),(221294,'unix-timestamp'),(221294,'javascript'),(221294,'timestamp'),(271526,'java'),(271526,'null'),(271526,'nullpointerexception'),(271526,'object'),(237104,'javascript-objects'),(237104,'time-complexity'),(237104,'arrays'),(237104,'javascript'),(237104,'algorithm'),(2610497,'css'),(2610497,'html-input'),(2610497,'html'),(2610497,'placeholder'),(671118,'rest'),(671118,'http'),(671118,'definition'),(2389361,'undo'),(2389361,'git'),(2389361,'git-merge'),(2432764,'git'),(2432764,'git-remote'),(2432764,'url'),(14415881,'language-agnostic'),(14415881,'sorting'),(14415881,'algorithm'),(14415881,'matching'),(1628088,'undo'),(1628088,'git'),(1109022,'android-input-method'),(1109022,'android'),(1109022,'android-edittext'),(1109022,'android-softkeyboard'),(1109022,'soft-keyboard'),(11828270,'vi'),(11828270,'vim'),(105372,'c#'),(105372,'enums'),(105372,'.net'),(105372,'loops'),(105372,'enumeration'),(40471,'java'),(40471,'hashtable'),(40471,'collections'),(40471,'hashmap'),(59838,'shell'),(59838,'bash'),(59838,'posix'),(59838,'unix'),(2334712,'select'),(2334712,'tsql'),(2334712,'sql-server'),(2334712,'sql'),(16047306,'virtual-machine'),(16047306,'virtualization'),(16047306,'containers'),(16047306,'docker'),(8710619,'variable-assignment'),(8710619,'java'),(8710619,'operators'),(8710619,'assignment-operator'),(8710619,'casting'),(13375357,'usermanager'),(13375357,'java'),(13375357,'android'),(7244321,'github'),(7244321,'git'),(7244321,'pull-request'),(7244321,'git-fork'),(522563,'python'),(522563,'loops'),(522563,'list'),(5189560,'rebase'),(5189560,'git-squash'),(5189560,'git'),(5189560,'squash'),(157944,'java'),(157944,'arrays'),(157944,'arraylist'),(157944,'type-conversion'),(136097,'oop'),(136097,'python'),(136097,'methods'),(136097,'python-decorators'),(3437059,'python'),(3437059,'contains'),(3437059,'string'),(3437059,'substring'),(1260748,'git'),(1260748,'git-submodules'),(520650,'git-branch'),(520650,'git'),(520650,'branch'),(5480258,'git'),(5480258,'git-tag'),(9081,'search'),(9081,'grep'),(9081,'command-line-interface'),(9081,'logging'),(8881291,'security'),(8881291,'java'),(8881291,'string'),(8881291,'passwords'),(8881291,'char'),(22343224,'node.js'),(22343224,'semantic-versioning'),(22343224,'package.json'),(22343224,'npm'),(952914,'flatten'),(952914,'multidimensional-array'),(952914,'python'),(952914,'list'),(613183,'python'),(613183,'dictionary'),(613183,'sorting'),(1066589,'java'),(1066589,'loops'),(1066589,'iteration'),(1066589,'hashmap'),(339923,'css'),(339923,'html'),(339923,'alignment'),(339923,'html-table'),(201323,'regex'),(201323,'string-parsing'),(201323,'email-validation'),(201323,'validation'),(201323,'email'),(15666048,'dependency-injection'),(15666048,'angularjs-provider'),(15666048,'angularjs'),(15666048,'angularjs-factory'),(15666048,'angularjs-service'),(46898,'java'),(46898,'dictionary'),(46898,'collections'),(46898,'iteration'),(509211,'python'),(509211,'slice'),(509211,'iterable'),(509211,'list'),(638975,'scripting'),(638975,'bash'),(638975,'file-io'),(1338728,'git'),(1338728,'git-reset'),(1338728,'git-rebase'),(6470651,'java'),(6470651,'memory'),(6470651,'memory-leaks'),(53513,'python'),(53513,'list'),(176918,'python'),(176918,'indexing'),(176918,'list'),(29482,'c#'),(29482,'enums'),(29482,'casting'),(29482,'int'),(134882,'rebase'),(134882,'undo'),(134882,'git'),(134882,'git-rebase'),(1014861,'css'),(1014861,'css-selectors'),(215497,'private'),(215497,'java'),(215497,'public'),(215497,'protected'),(215497,'access-modifiers'),(3294889,'python'),(3294889,'dictionary'),(3294889,'python-2.7'),(1394797,'git-branch'),(1394797,'git-stash'),(1394797,'git'),(1394797,'git-reset'),(1519006,'git-branch'),(1519006,'git'),(1519006,'branch'),(679915,'javascript-objects'),(679915,'javascript'),(423379,'global-variables'),(423379,'python'),(423379,'scope'),(322715,'java'),(322715,'collections'),(322715,'linked-list'),(322715,'arraylist'),(784929,'operators'),(784929,'javascript'),(252703,'extend'),(252703,'python'),(252703,'data-structures'),(252703,'list'),(252703,'append'),(1986896,'performance'),(1986896,'function'),(1986896,'dynamic'),(1986896,'javascript'),(278192,'git'),(278192,'git-log'),(728360,'javascript-objects'),(728360,'clone'),(728360,'javascript'),(3040833,'git-stash'),(3040833,'git'),(130794,'language-agnostic'),(130794,'dependency-injection'),(130794,'terminology'),(130794,'design-patterns'),(1911109,'git-branch'),(1911109,'git'),(1911109,'git-clone'),(1143796,'remote-server'),(1143796,'git'),(1143796,'delete-file'),(1143796,'git-rm'),(1143796,'repository'),(5585779,'java'),(5585779,'string'),(5585779,'int'),(5585779,'type-conversion'),(1034621,'javascript'),(1034621,'url'),(285793,'serialization'),(285793,'serialversionuid'),(285793,'java'),(588004,'language-agnostic'),(588004,'floating-accuracy'),(588004,'math'),(588004,'floating-point'),(1098040,'arrays'),(1098040,'javascript'),(1098040,'object'),(236129,'c++'),(236129,'split'),(236129,'string'),(1711631,'c'),(1711631,'performance'),(1711631,'sqlite'),(1711631,'optimization'),(1357118,'event-handling'),(1357118,'dom-events'),(1357118,'javascript'),(1357118,'jquery'),(1357118,'event-propagation'),(586182,'arrays'),(586182,'javascript'),(586182,'jquery'),(121162,'explicit'),(121162,'c++-faq'),(121162,'c++'),(121162,'explicit-constructor'),(121162,'constructor'),(572549,'git-add'),(572549,'git'),(415511,'python'),(415511,'datetime'),(415511,'time'),(444798,'c#'),(444798,'contains'),(444798,'string'),(444798,'case-insensitive'),(684672,'for-loop'),(684672,'loops'),(684672,'javascript'),(684672,'each'),(351409,'arrays'),(351409,'javascript'),(351409,'append'),(1555109,'android'),(1555109,'listview'),(1555109,'focus'),(1555109,'android-edittext'),(154059,'null'),(154059,'javascript'),(154059,'is-empty'),(7172784,'rest'),(7172784,'http-headers'),(7172784,'curl'),(7172784,'spring-mvc'),(7172784,'json'),(27509,'javascript'),(27509,'object'),(27509,'undefined');
/*!40000 ALTER TABLE `itemsd_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ownerd`
--

DROP TABLE IF EXISTS `ownerd`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ownerd` (
  `assetId` int NOT NULL,
  `displayName` varchar(255) DEFAULT NULL,
  `ownerLink` varchar(255) DEFAULT NULL,
  `profileImage` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`assetId`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ownerd`
--

LOCK TABLES `ownerd` WRITE;
/*!40000 ALTER TABLE `ownerd` DISABLE KEYS */;
INSERT INTO `ownerd` VALUES (11227902,'Mysticial','https://stackoverflow.com/users/922184/mysticial','https://i.stack.imgur.com/h7WDB.jpg?s=128&g=1'),(11227809,'GManNickG','https://stackoverflow.com/users/87234/gmannickg','https://i.stack.imgur.com/FkjBe.png?s=128&g=1'),(927386,'Esko Luontola','https://stackoverflow.com/users/62130/esko-luontola','https://www.gravatar.com/avatar/520c9c078b8d25980de17b8d4fe0ceba?s=128&d=identicon&r=PG'),(927358,'Hamza Yerlikaya','https://stackoverflow.com/users/89904/hamza-yerlikaya','https://www.gravatar.com/avatar/4fef65cead13e5d519f6bce3c501a537?s=128&d=identicon&r=PG'),(2003515,'Matthew Rankin','https://stackoverflow.com/users/95592/matthew-rankin','https://i.stack.imgur.com/utY5u.jpg?s=128&g=1'),(2003505,'Matthew Rankin','https://stackoverflow.com/users/95592/matthew-rankin','https://i.stack.imgur.com/utY5u.jpg?s=128&g=1'),(292359,'Greg Hewgill','https://stackoverflow.com/users/893/greg-hewgill','https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG'),(292357,'pupeno','https://stackoverflow.com/users/6068/pupeno','https://www.gravatar.com/avatar/931970b8dc51b72e05e3a12b88612d61?s=128&d=identicon&r=PG'),(477819,'Gumbo','https://stackoverflow.com/users/53114/gumbo','https://www.gravatar.com/avatar/cd501083459cbc21fccae78e2d03bee2?s=128&d=identicon&r=PG'),(477816,'Oli','https://stackoverflow.com/users/12870/oli','https://www.gravatar.com/avatar/f0af40756420859b5b63cbceb6d30505?s=128&d=identicon&r=PG'),(231855,'e-satis','https://stackoverflow.com/users/9951/e-satis','https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1'),(231767,'Alex. S.','https://stackoverflow.com/users/18300/alex-s','https://i.stack.imgur.com/jcyI4.jpg?s=128&g=1'),(348234,'genehack','https://stackoverflow.com/users/39933/genehack','https://www.gravatar.com/avatar/c0f1e0ce679f144459b25087e5b25b56?s=128&d=identicon&r=PG&f=1'),(348170,'paxos1977','https://stackoverflow.com/users/14069/paxos1977','https://www.gravatar.com/avatar/0c29cc6ee1c170810ee1fd36fa7c2f95?s=128&d=identicon&r=PG'),(1642035,'Charles Salvia','https://stackoverflow.com/users/168288/charles-salvia','https://i.stack.imgur.com/2twwK.jpg?s=128&g=1'),(1642028,'GManNickG','https://stackoverflow.com/users/87234/gmannickg','https://i.stack.imgur.com/FkjBe.png?s=128&g=1'),(6591218,'siride','https://stackoverflow.com/users/394487/siride','https://www.gravatar.com/avatar/c1ea49f769f4a6fcc59d4594c55156b2?s=128&d=identicon&r=PG'),(6591213,'Forrest','https://stackoverflow.com/users/338204/forrest','https://www.gravatar.com/avatar/c145a12cd17d3b3ffff033681a694abe?s=128&d=identicon&r=PG'),(5767357,'Tom Wadley','https://stackoverflow.com/users/613430/tom-wadley','https://www.gravatar.com/avatar/5f366a9456858ee82f3044437ec7d735?s=128&d=identicon&r=PG'),(5767325,'Walker','https://stackoverflow.com/users/364969/walker','https://www.gravatar.com/avatar/79e7cefc9e7deb0e0bf422baa1a38a2c?s=128&d=identicon&r=PG'),(80113,'Jeff Hill','https://stackoverflow.com/users/14742/jeff-hill','https://www.gravatar.com/avatar/905142a144b44cf7d1bd84d8db9d39ad?s=128&d=identicon&r=PG'),(79923,'mattshane','https://stackoverflow.com/users/13161/mattshane','https://www.gravatar.com/avatar/e3dcbde38b1f70c77b1db642f31a223d?s=128&d=identicon&r=PG'),(178450,'Tsvetomir Tsonev','https://stackoverflow.com/users/25449/tsvetomir-tsonev','https://www.gravatar.com/avatar/aa86ccb4573a66e08b7f169fb00814b1?s=128&d=identicon&r=PG'),(178325,'Philip Morton','https://stackoverflow.com/users/21709/philip-morton','https://www.gravatar.com/avatar/3ea9c684a2db319df788cecc6c98f9cd?s=128&d=identicon&r=PG'),(506004,'Ryan McGeary','https://stackoverflow.com/users/8985/ryan-mcgeary','https://www.gravatar.com/avatar/0f5f0ea6a2dc7ed3cb5830377a4fe7e2?s=128&d=identicon&r=PG'),(503093,'venkatachalam','https://stackoverflow.com/users/44984/venkatachalam','https://i.stack.imgur.com/7rqob.jpg?s=128&g=1'),(179147,'EfForEffort','https://stackoverflow.com/users/14113/efforeffort','https://www.gravatar.com/avatar/0aa0013bf7a5451dfb36bbce25f75526?s=128&d=identicon&r=PG'),(179123,'Laurie Young','https://stackoverflow.com/users/7473/laurie-young','https://www.gravatar.com/avatar/9218dd1115bc620ec1ea79fd0368da8e?s=128&d=identicon&r=PG'),(244858,'Eli','https://stackoverflow.com/users/27580/eli','https://www.gravatar.com/avatar/f198305bbd04f5fd7c49051dd6e77782?s=128&d=identicon&r=PG'),(244777,'Michael Gundlach','https://stackoverflow.com/users/4105/michael-gundlach','https://www.gravatar.com/avatar/b478ef877842b1da9cdead7848572372?s=128&d=identicon&r=PG'),(111111,'Joel Anair','https://stackoverflow.com/users/7441/joel-anair','https://www.gravatar.com/avatar/612c8c9720ad50196fb95065adca33f0?s=128&d=identicon&r=PG'),(111102,'e-satis','https://stackoverflow.com/users/9951/e-satis','https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1'),(4114122,'Cascabel','https://stackoverflow.com/users/119963/cascabel','https://i.stack.imgur.com/tBCc0.jpg?s=128&g=1'),(4114095,'Crazy Serb','https://stackoverflow.com/users/111174/crazy-serb','https://www.gravatar.com/avatar/94f2f4d10581cebd4432a10f66fec19f?s=128&d=identicon&r=PG'),(1335881,'Pascal MARTIN','https://stackoverflow.com/users/138475/pascal-martin','https://www.gravatar.com/avatar/37458c7c44851cd6c402e02e5a9be94f?s=128&d=identicon&r=PG'),(1335851,'Mark Rogers','https://stackoverflow.com/users/25847/mark-rogers','https://www.gravatar.com/avatar/34d142b034e7b194fc1708f3b20d9568?s=128&d=identicon&r=PG'),(8333464,'dash','https://stackoverflow.com/users/1073107/dash','https://www.gravatar.com/avatar/e0a15c66b701655574fa134e666f3ee7?s=128&d=identicon&r=PG'),(8318911,'user456584','https://stackoverflow.com/users/456584/user456584','https://i.stack.imgur.com/uoYDJ.png?s=128&g=1'),(1789952,'Fabien M&#233;nager','https://stackoverflow.com/users/92315/fabien-m%c3%a9nager','https://www.gravatar.com/avatar/d2824c2017a878f6fe05db2797694608?s=128&d=identicon&r=PG'),(1789945,'gramm','https://stackoverflow.com/users/131679/gramm','https://www.gravatar.com/avatar/4cb7f78dca34d0e27931f743f3aa1f30?s=128&d=identicon&r=PG'),(8888015,'RNA','https://stackoverflow.com/users/489564/rna','https://www.gravatar.com/avatar/b802fc38893a1abf9e8f955ac78ceb99?s=128&d=identicon&r=PG'),(1125968,'Jakub Troszok','https://stackoverflow.com/users/98046/jakub-troszok','https://i.stack.imgur.com/i1oB2.jpg?s=128&g=1'),(336868,'Greg','https://stackoverflow.com/users/24181/greg','https://www.gravatar.com/avatar/8438e7bf53378150813b3dfec7f22232?s=128&d=identicon&r=PG'),(336859,'Richard Garside','https://stackoverflow.com/users/31569/richard-garside','https://www.gravatar.com/avatar/2d71a937d0e784ea99153ce46afb9fb1?s=128&d=identicon&r=PG'),(64966,'Andreas Ericsson',NULL,NULL),(61212,'Readonly','https://stackoverflow.com/users/4883/readonly','https://www.gravatar.com/avatar/a92525f049e20db8f4ce3d62f3f0bb2b?s=128&d=identicon&r=PG'),(6841479,'Jon Skeet','https://stackoverflow.com/users/22656/jon-skeet','https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG'),(6841333,'Freewind','https://stackoverflow.com/users/342235/freewind','https://www.gravatar.com/avatar/88e5a9eb011a73ab970ddc8cfb05ff85?s=128&d=identicon&r=PG'),(1783426,'hallski','https://stackoverflow.com/users/214090/hallski','https://i.stack.imgur.com/NxW6o.jpg?s=128&g=1'),(1783405,'Juri Glass','https://stackoverflow.com/users/179467/juri-glass','https://www.gravatar.com/avatar/e736f7016a80c3807e7cace569024ab8?s=128&d=identicon&r=PG'),(7077,'Derek Park','https://stackoverflow.com/users/872/derek-park','https://www.gravatar.com/avatar/9227ac7d54e73cbf01f28c4bd95b71dc?s=128&d=identicon&r=PG'),(7074,'Lance Fisher','https://stackoverflow.com/users/571/lance-fisher','https://www.gravatar.com/avatar/c1f0bb6c6d36ab5aba3fdacd1db03bf1?s=128&d=identicon&r=PG'),(208106,'nickf','https://stackoverflow.com/users/9021/nickf','https://www.gravatar.com/avatar/f092dfd45793e9483281d4205b674823?s=128&d=identicon&r=PG'),(208105,'johnstok','https://stackoverflow.com/users/27929/johnstok','https://www.gravatar.com/avatar/8b141abc20af8ebe4667df467a73cc15?s=128&d=identicon&r=PG'),(419185,'Mr Fooz','https://stackoverflow.com/users/25050/mr-fooz','https://www.gravatar.com/avatar/6ec78954391f88681b2a5b97ef958d08?s=128&d=identicon&r=PG'),(419163,'Devoted','https://stackoverflow.com/users/51518/devoted','https://www.gravatar.com/avatar/eb5a95cb1be342c4089183cd8232a7f2?s=128&d=identicon&r=PG'),(394814,'Vinko Vrsalovic','https://stackoverflow.com/users/5190/vinko-vrsalovic','https://i.stack.imgur.com/GKrxa.jpg?s=128&g=1'),(394809,'Devoted','https://stackoverflow.com/users/51518/devoted','https://www.gravatar.com/avatar/eb5a95cb1be342c4089183cd8232a7f2?s=128&d=identicon&r=PG'),(2025541,'Alex Volovoy','https://stackoverflow.com/users/176761/alex-volovoy','https://www.gravatar.com/avatar/27d3dc0518cc36409d91b9c3a1eb9231?s=128&d=identicon&r=PG'),(2025282,'capecrawler','https://stackoverflow.com/users/235885/capecrawler','https://www.gravatar.com/avatar/a246044d1113994fba38a67ce0205ed9?s=128&d=identicon&r=PG'),(100146,'Thomas Wouters','https://stackoverflow.com/users/17624/thomas-wouters','https://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG'),(100003,'e-satis','https://stackoverflow.com/users/9951/e-satis','https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1'),(359509,'Bill the Lizard','https://stackoverflow.com/users/1288/bill-the-lizard','https://www.gravatar.com/avatar/fc763c6ff6c160ddad05741e87e517b6?s=128&d=identicon&r=PG'),(359494,'bcasp','https://stackoverflow.com/users/44990/bcasp','https://www.gravatar.com/avatar/3a15a9709950fe8e7e5a2e1ef184f5d5?s=128&d=identicon&r=PG'),(14220323,'Felix Kling','https://stackoverflow.com/users/218196/felix-kling','https://i.stack.imgur.com/4P5DY.jpg?s=128&g=1'),(14220321,'Felix Kling','https://stackoverflow.com/users/218196/felix-kling','https://i.stack.imgur.com/4P5DY.jpg?s=128&g=1'),(1274447,'CB Bailey','https://stackoverflow.com/users/19563/cb-bailey','https://www.gravatar.com/avatar/a8db27c91db97757a829c7971fd62b84?s=128&d=identicon&r=PG'),(1274057,'Ivan','https://stackoverflow.com/users/16957/ivan','https://www.gravatar.com/avatar/c5380b957ff8ce5cb14cf2282ffeb720?s=128&d=identicon&r=PG'),(630475,'Brian R. Bondy','https://stackoverflow.com/users/3153/brian-r-bondy','https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG'),(630453,'alex','https://stackoverflow.com/users/19268/alex','https://www.gravatar.com/avatar/145778821ba747dd30334c0703ebd57f?s=128&d=identicon&r=PG'),(477578,'Jens Roland','https://stackoverflow.com/users/57068/jens-roland','https://www.gravatar.com/avatar/eafc9ff73a64e9d0d6f949c77d6135b7?s=128&d=identicon&r=PG'),(549,'Michiel de Mare','https://stackoverflow.com/users/136/michiel-de-mare','https://www.gravatar.com/avatar/901fdd0c1bd863f1c3b72cddc5a66039?s=128&d=identicon&r=PG'),(16957078,'rakib_','https://stackoverflow.com/users/2231815/rakib','https://www.gravatar.com/avatar/1597c347e309f696ff1738128444702b?s=128&d=identicon&r=PG'),(16956810,'Nathan','https://stackoverflow.com/users/954986/nathan','https://www.gravatar.com/avatar/9bc332a4fccaf3e527fdc258b6990f2d?s=128&d=identicon&r=PG'),(950146,'e-satis','https://stackoverflow.com/users/9951/e-satis','https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1'),(950087,'Alec Smart','https://stackoverflow.com/users/426996/alec-smart','https://www.gravatar.com/avatar/1e02330dd05ba70e697cf37d5876999d?s=128&d=identicon&r=PG&f=1'),(122704,'John Resig','https://stackoverflow.com/users/6524/john-resig','https://www.gravatar.com/avatar/b3e04a46e85ad3e165d66f5d927eb609?s=128&d=identicon&r=PG'),(122102,'jschrab','https://stackoverflow.com/users/12694/jschrab','https://www.gravatar.com/avatar/ecd1f4ee31abd67c6e665a10f5633e51?s=128&d=identicon&r=PG'),(1628584,'sykora','https://stackoverflow.com/users/53850/sykora','https://www.gravatar.com/avatar/26b8c45762e996c0de755eb3c7f421a8?s=128&d=identicon&r=PG'),(1628563,'Mark A. Nicolosi','https://stackoverflow.com/users/1103052/mark-a-nicolosi','https://www.gravatar.com/avatar/393d9d6acd3ba4ed8ea921dd997d9144?s=128&d=identicon&r=PG'),(246128,'dogbane','https://stackoverflow.com/users/7412/dogbane','https://i.stack.imgur.com/doLQL.jpg?s=128&g=1'),(59895,'Jiaaro','https://stackoverflow.com/users/2908/jiaaro','https://www.gravatar.com/avatar/30e3f436d5fb8e941126a0c2c2868f84?s=128&d=identicon&r=PG'),(487278,'cletus','https://stackoverflow.com/users/18393/cletus','https://www.gravatar.com/avatar/2f364c2e36b52bc80296cbf23da8b231?s=128&d=identicon&r=PG'),(487258,'Arec Barrwin','https://stackoverflow.com/users/59711/arec-barrwin','https://www.gravatar.com/avatar/3426d42440fa06f06eea521f6a4f5804?s=128&d=identicon&r=PG'),(89243,'David Cournapeau','https://stackoverflow.com/users/11465/david-cournapeau','https://www.gravatar.com/avatar/9820b5956634e5bbad7f4ed91a232822?s=128&d=identicon&r=PG'),(89228,'freshWoWer','https://stackoverflow.com/users/17085/freshwower','https://www.gravatar.com/avatar/d386a6f2f3dda7bcf7f1e11c2171946b?s=128&d=identicon&r=PG'),(417184,'Paul Dixon','https://stackoverflow.com/users/6521/paul-dixon','https://www.gravatar.com/avatar/6af19633ae0228e3b5bb4de168b5d19d?s=128&d=identicon&r=PG'),(417142,'Sander Versluys','https://stackoverflow.com/users/2172/sander-versluys','https://www.gravatar.com/avatar/d45a34439ae17a079045a23df5131b91?s=128&d=identicon&r=PG'),(52719,'Greg Hewgill','https://stackoverflow.com/users/893/greg-hewgill','https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG'),(52704,'Readonly','https://stackoverflow.com/users/4883/readonly','https://www.gravatar.com/avatar/a92525f049e20db8f4ce3d62f3f0bb2b?s=128&d=identicon&r=PG'),(26853961,'Aaron Hall','https://stackoverflow.com/users/541136/aaron-hall','https://i.stack.imgur.com/wftMn.jpg?s=128&g=1'),(38987,'Carl Meyer','https://stackoverflow.com/users/3207/carl-meyer','https://www.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=128&d=identicon&r=PG'),(163659,'Peter Burns','https://stackoverflow.com/users/101/peter-burns','https://www.gravatar.com/avatar/cfd2734f1de31db479ec2a8a4ecbd649?s=128&d=identicon&r=PG'),(161813,'Spoike','https://stackoverflow.com/users/3713/spoike','https://www.gravatar.com/avatar/dc374f99f92956f128ef79df36d819e9?s=128&d=identicon&r=PG'),(9329476,'T.J. Crowder','https://stackoverflow.com/users/157247/t-j-crowder','https://i.stack.imgur.com/Wx4Ih.png?s=128&g=1'),(9329446,'Dante1986','https://stackoverflow.com/users/1140876/dante1986','https://www.gravatar.com/avatar/35c44645d7729e6828f494f5e20d5909?s=128&d=identicon&r=PG'),(38578,'Mark Harrison','https://stackoverflow.com/users/116/mark-harrison','https://i.stack.imgur.com/f6flX.jpg?s=128&g=1'),(38549,'Chris de Vries','https://stackoverflow.com/users/3836/chris-de-vries','https://www.gravatar.com/avatar/2bb1cf0d02755d1ef421ee1eff457609?s=128&d=identicon&r=PG'),(18000768,'Ben Burns','https://stackoverflow.com/users/203705/ben-burns','https://www.gravatar.com/avatar/ef847bdde7b4a6e07b874da7c59f287b?s=128&d=identicon&r=PG'),(4456438,'bill','https://stackoverflow.com/users/296561/bill','https://www.gravatar.com/avatar/2d386fc37ba69eaef907597eb9c6f2f8?s=128&d=identicon&r=PG'),(11444416,'ThinkingStiff','https://stackoverflow.com/users/918414/thinkingstiff','https://www.gravatar.com/avatar/f9341836ce1cf04cd7e128e4c8b1db99?s=128&d=identicon&r=PG'),(762011,'TM.','https://stackoverflow.com/users/12983/tm','https://www.gravatar.com/avatar/b33e8a75c925b361be8ff9568e35b26c?s=128&d=identicon&r=PG'),(903152,'Prasad','https://stackoverflow.com/users/111435/prasad','https://www.gravatar.com/avatar/3d7de11fb1c0a98dc2aee865c558f7cc?s=128&d=identicon&r=PG'),(901712,'Prasad','https://stackoverflow.com/users/111435/prasad','https://www.gravatar.com/avatar/3d7de11fb1c0a98dc2aee865c558f7cc?s=128&d=identicon&r=PG'),(215731,'Greg Hewgill','https://stackoverflow.com/users/893/greg-hewgill','https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG'),(215718,'Hates_','https://stackoverflow.com/users/3410/hates','https://www.gravatar.com/avatar/6fac053358ac2a2be8d9d6c07bebe898?s=128&d=identicon&r=PG'),(15012542,'Josh David Miller','https://stackoverflow.com/users/259038/josh-david-miller','https://www.gravatar.com/avatar/5dfdb19c3d8ba8050ce64c4f2a7b7e12?s=128&d=identicon&r=PG'),(14994391,'Mark Rajcok','https://stackoverflow.com/users/215945/mark-rajcok','https://i.stack.imgur.com/203qt.png?s=128&g=1'),(3737177,'Peter Ajtai','https://stackoverflow.com/users/186636/peter-ajtai','https://www.gravatar.com/avatar/17097e51a8903e51b647c7ad843ea56d?s=128&d=identicon&r=PG'),(3737139,'Gordon','https://stackoverflow.com/users/208809/gordon','https://i.stack.imgur.com/LXDBV.png?s=128&g=1'),(1145525,'Matthew Crumley','https://stackoverflow.com/users/2214/matthew-crumley','https://www.gravatar.com/avatar/748e3f66b86e1f84dddfd4151e219be0?s=128&d=identicon&r=PG'),(1144783,'Click Upvote','https://stackoverflow.com/users/49153/click-upvote','https://www.gravatar.com/avatar/833df8cee775eea743cb1172dfcd3809?s=128&d=identicon&r=PG'),(46181,'sectrean','https://stackoverflow.com/users/3880/sectrean','https://www.gravatar.com/avatar/dc6ffd3fe45232b2c6bc180e13e83da6?s=128&d=identicon&r=PG'),(46155,'pix0r','https://stackoverflow.com/users/72/pix0r','https://www.gravatar.com/avatar/d53534df62555444fbae96b767b41b91?s=128&d=identicon&r=PG'),(176274,'Jon Skeet','https://stackoverflow.com/users/22656/jon-skeet','https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG'),(176264,'Sean McMains','https://stackoverflow.com/users/2041950/sean-mcmains','https://www.gravatar.com/avatar/096a09594a8de0ef479f0365864536fd?s=128&d=identicon&r=PG'),(6232535,'Daniel Ruoso','https://stackoverflow.com/users/188715/daniel-ruoso','https://www.gravatar.com/avatar/923d562209b7beb2522e2208cb8e3054?s=128&d=identicon&r=PG'),(2765421,'Roni Yaniv','https://stackoverflow.com/users/222187/roni-yaniv','https://www.gravatar.com/avatar/3aa8157fa52c32beb1fbb37baa64023f?s=128&d=identicon&r=PG'),(406408,'Bart Kiers','https://stackoverflow.com/users/50476/bart-kiers','https://www.gravatar.com/avatar/6326af218d1a113fd9a8fd9668b2d7c8?s=128&d=identicon&r=PG'),(406230,'knaser','https://stackoverflow.com/users/36830/knaser','https://www.gravatar.com/avatar/4a6941ffb5267c6cd1f8b39549bdbe67?s=128&d=identicon&r=PG'),(114549,'Justin Poliey','https://stackoverflow.com/users/6967/justin-poliey','https://www.gravatar.com/avatar/07b06bbb5ecda29c3744c1be35656247?s=128&d=identicon&r=PG'),(114543,'Lukas','https://stackoverflow.com/users/20403/lukas','https://www.gravatar.com/avatar/c7836fa67f3b48bba7f075cb8e12c7d7?s=128&d=identicon&r=PG'),(932982,'Jamie Flournoy','https://stackoverflow.com/users/115218/jamie-flournoy','https://www.gravatar.com/avatar/b7cbece0ce130a8f27f3dcab0bc910d4?s=128&d=identicon&r=PG'),(115983,'Laurie Young','https://stackoverflow.com/users/7473/laurie-young','https://www.gravatar.com/avatar/9218dd1115bc620ec1ea79fd0368da8e?s=128&d=identicon&r=PG'),(273227,'Blair Conrad','https://stackoverflow.com/users/1199/blair-conrad','https://www.gravatar.com/avatar/78cb7314ef6c9ff2954f8e0d6506fc06?s=128&d=identicon&r=PG'),(273192,'Parand','https://stackoverflow.com/users/13055/parand','https://www.gravatar.com/avatar/ab82fd8b5ffe4d09c2bb5f9c14d34b09?s=128&d=identicon&r=PG'),(105074,'John Millikin','https://stackoverflow.com/users/3560/john-millikin','https://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=128&d=identicon&r=PG'),(105034,'Jason Cohen','https://stackoverflow.com/users/4926/jason-cohen','https://www.gravatar.com/avatar/3f9f1c5628ed19b0e70fd4e8b8a1d0b9?s=128&d=identicon&r=PG'),(72156,'emk','https://stackoverflow.com/users/12089/emk','https://www.gravatar.com/avatar/c80aa0608c845cd64585e9fc9ca4cc67?s=128&d=identicon&r=PG'),(67699,'Peter Coulton','https://stackoverflow.com/users/117/peter-coulton','https://www.gravatar.com/avatar/2d152421281d373569a51d811c509e65?s=128&d=identicon&r=PG'),(426276,'Xian','https://stackoverflow.com/users/4642/xian','https://www.gravatar.com/avatar/46fb7a1cf08a5ba36aec6ab9bf24d0ff?s=128&d=identicon&r=PG'),(426258,'tpower','https://stackoverflow.com/users/18107/tpower','https://www.gravatar.com/avatar/8401ce7758b1b2040536bcb8e9575d58?s=128&d=identicon&r=PG'),(4089452,'JaredPar','https://stackoverflow.com/users/23283/jaredpar','https://www.gravatar.com/avatar/529ba429a58902bef56c2fcb672d5ccb?s=128&d=identicon&r=PG'),(4089430,'Tim','https://stackoverflow.com/users/18088/tim','https://www.gravatar.com/avatar/085e31f3e25755cd71456780023ade87?s=128&d=identicon&r=PG'),(2669766,'rjh','https://stackoverflow.com/users/74496/rjh','https://www.gravatar.com/avatar/633fe8d1b4783bb73748a75e0e768bba?s=128&d=identicon&r=PG'),(2669690,'Jess','https://stackoverflow.com/users/151495/jess','https://www.gravatar.com/avatar/fc3015cf70c3bebd186fc66af6f48759?s=128&d=identicon&r=PG'),(309448,'Harry Lime','https://stackoverflow.com/users/21590/harry-lime','https://www.gravatar.com/avatar/d21e4f986f5b05d89b0070b37e296a87?s=128&d=identicon&r=PG'),(309424,'Johnny Maelstrom','https://stackoverflow.com/users/16616/johnny-maelstrom','https://i.stack.imgur.com/PNeie.png?s=128&g=1'),(221297,'daveb','https://stackoverflow.com/users/11858/daveb','https://www.gravatar.com/avatar/1df10460d7960e1f5ac66c866fec280d?s=128&d=identicon&r=PG'),(221294,'pupeno','https://stackoverflow.com/users/6068/pupeno','https://www.gravatar.com/avatar/931970b8dc51b72e05e3a12b88612d61?s=128&d=identicon&r=PG'),(271874,'cletus','https://stackoverflow.com/users/18393/cletus','https://www.gravatar.com/avatar/2f364c2e36b52bc80296cbf23da8b231?s=128&d=identicon&r=PG'),(271526,'Goran Martinic','https://stackoverflow.com/users/34856/goran-martinic','https://www.gravatar.com/avatar/1e57ced4476e0c629c70e6058159c4f0?s=128&d=identicon&r=PG'),(1473742,'codeape','https://stackoverflow.com/users/3571/codeape','https://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=128&d=identicon&r=PG'),(237104,'brad','https://stackoverflow.com/users/208/brad','https://www.gravatar.com/avatar/0168f51cd822a820c606c259b80e253f?s=128&d=identicon&r=PG'),(2610741,'fuxia','https://stackoverflow.com/users/299509/fuxia','https://i.stack.imgur.com/TBdkD.png?s=128&g=1'),(2610497,'David Murdoch','https://stackoverflow.com/users/160173/david-murdoch','https://www.gravatar.com/avatar/bcf9850250d6a24e379401d22d530a09?s=128&d=identicon&r=PG'),(29648972,'Shirgill Farhan','https://stackoverflow.com/users/3927264/shirgill-farhan','https://i.stack.imgur.com/PtSm7.jpg?s=128&g=1'),(671118,'hasen','https://stackoverflow.com/users/35364/hasen','https://www.gravatar.com/avatar/f11512869fe2f8d87a2f2b687b76686c?s=128&d=identicon&r=PG'),(2389423,'Marcin Gil','https://stackoverflow.com/users/5731/marcin-gil','https://www.gravatar.com/avatar/b7526cd768633e746c80205b972bb7a9?s=128&d=identicon&r=PG'),(2389361,'Matt Huggins','https://stackoverflow.com/users/107277/matt-huggins','https://www.gravatar.com/avatar/781f66c42983ae7ee3123bbd620d8568?s=128&d=identicon&r=PG'),(2432799,'hobbs','https://stackoverflow.com/users/152948/hobbs','https://www.gravatar.com/avatar/194ef8f807c34a9d7aab0e11a8674768?s=128&d=identicon&r=PG'),(2432764,'e-satis','https://stackoverflow.com/users/9951/e-satis','https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1'),(14419556,'usr','https://stackoverflow.com/users/122718/usr','https://i.stack.imgur.com/213Kw.png?s=128&g=1'),(14415881,'amit','https://stackoverflow.com/users/572670/amit','https://www.gravatar.com/avatar/5011cf6d98e276b1bdc2cb321546e528?s=128&d=identicon&r=PG'),(1628334,'Dan Moulding','https://stackoverflow.com/users/95706/dan-moulding','https://www.gravatar.com/avatar/e07507b03c5cd87dd7d6679de6f11306?s=128&d=identicon&r=PG'),(1628088,'hap497','https://stackoverflow.com/users/128983/hap497','https://www.gravatar.com/avatar/da7a3c3efd21c067831e68c9c9c55636?s=128&d=identicon&r=PG'),(17789187,'rmirabelle','https://stackoverflow.com/users/680583/rmirabelle','https://www.gravatar.com/avatar/a00127568b70da5b09210c50b0504042?s=128&d=identicon&r=PG'),(1109022,'Vidar Vestnes','https://stackoverflow.com/users/133858/vidar-vestnes','https://i.stack.imgur.com/KObod.jpg?s=128&g=1'),(11828573,'dirvine','https://stackoverflow.com/users/1445334/dirvine','https://www.gravatar.com/avatar/185bc1a9b6a36d8f065bdb9a1de74f90?s=128&d=identicon&r=PG'),(11828270,'jclancy','https://stackoverflow.com/users/1268117/jclancy','https://www.gravatar.com/avatar/f67aeacce4be3f1502d887c0aa67ce5f?s=128&d=identicon&r=PG'),(105402,'jop','https://stackoverflow.com/users/11830/jop','https://www.gravatar.com/avatar/9799a7bd7b9b75112f8a21d70b58cb10?s=128&d=identicon&r=PG'),(105372,'Ian Boyd','https://stackoverflow.com/users/12597/ian-boyd','https://www.gravatar.com/avatar/4b534325156758d6592fb624d7b60e22?s=128&d=identicon&r=PG'),(40878,'Josh Brown','https://stackoverflow.com/users/2030/josh-brown','https://www.gravatar.com/avatar/73fad2d46ffaac8dd679d302a681147b?s=128&d=identicon&r=PG'),(40471,'dmanxiii','https://stackoverflow.com/users/4316/dmanxiii','https://www.gravatar.com/avatar/dc91d4e8c035283347ba673168770cea?s=128&d=identicon&r=PG'),(59839,'Grundlefleck','https://stackoverflow.com/users/4120/grundlefleck','https://www.gravatar.com/avatar/71f8f2fa409ea5ce2757c8d490ece924?s=128&d=identicon&r=PG'),(59838,'Grundlefleck','https://stackoverflow.com/users/4120/grundlefleck','https://www.gravatar.com/avatar/71f8f2fa409ea5ce2757c8d490ece924?s=128&d=identicon&r=PG'),(2334741,'Robin Day','https://stackoverflow.com/users/40655/robin-day','https://www.gravatar.com/avatar/df1b153342c6ff6cc0a670adfebe61db?s=128&d=identicon&r=PG'),(2334712,'jamesmhaley','https://stackoverflow.com/users/150939/jamesmhaley','https://www.gravatar.com/avatar/1c06ad3efe138b82f4768e4937e64832?s=128&d=identicon&r=PG'),(16048358,'Ken Cochrane','https://stackoverflow.com/users/356788/ken-cochrane','https://www.gravatar.com/avatar/5b5661a3a443a2a4bece8674006bd6ef?s=128&d=identicon&r=PG'),(16047306,'zslayton','https://stackoverflow.com/users/109549/zslayton','https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG'),(8710685,'Lukas Eder','https://stackoverflow.com/users/521799/lukas-eder','https://www.gravatar.com/avatar/eb96efa7a5664ba1c4ebf586abd4121f?s=128&d=identicon&r=PG'),(8710619,'Honza Brabec','https://stackoverflow.com/users/1127571/honza-brabec','https://www.gravatar.com/avatar/00735aa8e45c6a3f4a79efe9cf689e40?s=128&d=identicon&r=PG'),(13375461,'meh','https://stackoverflow.com/users/1597833/meh','https://www.gravatar.com/avatar/0953d434c345c978e47a9970eceabd36?s=128&d=identicon&r=PG'),(13375357,'Ovidiu Latcu','https://stackoverflow.com/users/542091/ovidiu-latcu','https://i.stack.imgur.com/rQ7vZ.jpg?s=128&g=1'),(7244456,'Mark Longair','https://stackoverflow.com/users/223092/mark-longair','https://www.gravatar.com/avatar/71c4accacd83e0e6d2193e0da83dd3aa?s=128&d=identicon&r=PG'),(7244321,'Lea Hayes','https://stackoverflow.com/users/656172/lea-hayes','https://www.gravatar.com/avatar/1145f411fbaf1bfbadb679b1f9fc8ba0?s=128&d=identicon&r=PG'),(522578,'Mike Hordecki','https://stackoverflow.com/users/19082/mike-hordecki','https://www.gravatar.com/avatar/27c58ba8661585b00b571efab36af60f?s=128&d=identicon&r=PG'),(522563,'Joan Venge','https://stackoverflow.com/users/51816/joan-venge','https://www.gravatar.com/avatar/0e54bb28182bcd9df39704751306df27?s=128&d=identicon&r=PG'),(5189600,'Anomie','https://stackoverflow.com/users/634419/anomie','https://www.gravatar.com/avatar/97d7d7b279092fdf4902bf47a481104d?s=128&d=identicon&r=PG'),(5189560,'markdorison','https://stackoverflow.com/users/97101/markdorison','https://www.gravatar.com/avatar/06d59b7a09c0085d85d0a42638e0db01?s=128&d=identicon&r=PG'),(157950,'Tom','https://stackoverflow.com/users/22850/tom','https://www.gravatar.com/avatar/955fd033a0583419b2e2b7d2515e2e92?s=128&d=identicon&r=PG'),(157944,'Ron Tuffin','https://stackoverflow.com/users/939/ron-tuffin','https://www.gravatar.com/avatar/ce6d3fed32e985093a107913c3762579?s=128&d=identicon&r=PG'),(1669524,'unutbu','https://stackoverflow.com/users/190597/unutbu','https://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1'),(136097,'Daryl Spitzer','https://stackoverflow.com/users/4766/daryl-spitzer','https://www.gravatar.com/avatar/56dbb3799dd6358c3bee3468d0328046?s=128&d=identicon&r=PG'),(3437070,'Michael Mrozek','https://stackoverflow.com/users/309308/michael-mrozek','https://www.gravatar.com/avatar/dd7e03fbbfcabd4675844173ec5390d2?s=128&d=identicon&r=PG'),(3437059,'Blankman','https://stackoverflow.com/users/39677/blankman','https://www.gravatar.com/avatar/77aa7bc1ace6e4b0b49a2102e4fa4059?s=128&d=identicon&r=PG'),(16162000,'VonC','https://stackoverflow.com/users/6309/vonc','https://www.gravatar.com/avatar/7aa22372b695ed2b26052c340f9097eb?s=128&d=identicon&r=PG'),(1260748,'R. Martinho Fernandes','https://stackoverflow.com/users/46642/r-martinho-fernandes','https://i.stack.imgur.com/wjb79.jpg?s=128&g=1'),(2286030,'Dan Moulding','https://stackoverflow.com/users/95706/dan-moulding','https://www.gravatar.com/avatar/e07507b03c5cd87dd7d6679de6f11306?s=128&d=identicon&r=PG'),(520650,'Pat Notz','https://stackoverflow.com/users/825/pat-notz','https://www.gravatar.com/avatar/8cff0e19c525c987e7fe10a3e3aef350?s=128&d=identicon&r=PG'),(5480292,'Adam Franco','https://stackoverflow.com/users/15872/adam-franco','https://www.gravatar.com/avatar/67709682ef4bf10b2dc4a9c915e292d1?s=128&d=identicon&r=PG'),(5480258,'markdorison','https://stackoverflow.com/users/97101/markdorison','https://www.gravatar.com/avatar/06d59b7a09c0085d85d0a42638e0db01?s=128&d=identicon&r=PG'),(9083,'Pat Notz','https://stackoverflow.com/users/825/pat-notz','https://www.gravatar.com/avatar/8cff0e19c525c987e7fe10a3e3aef350?s=128&d=identicon&r=PG'),(9081,'Mark Harrison','https://stackoverflow.com/users/116/mark-harrison','https://i.stack.imgur.com/f6flX.jpg?s=128&g=1'),(8881376,'Jon Skeet','https://stackoverflow.com/users/22656/jon-skeet','https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG'),(8881291,'Ahamed','https://stackoverflow.com/users/953140/ahamed','https://www.gravatar.com/avatar/daa7534f8797b6392e9e2a3496663196?s=128&d=identicon&r=PG'),(22345808,'jgillich','https://stackoverflow.com/users/941764/jgillich','https://www.gravatar.com/avatar/b874953e067d60b5f07bb98c74bf48c8?s=128&d=identicon&r=PG'),(22343224,'Fizer Khan','https://stackoverflow.com/users/1154350/fizer-khan','https://i.stack.imgur.com/baIRy.jpg?s=128&g=1'),(952952,'Alex Martelli','https://stackoverflow.com/users/95810/alex-martelli','https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG'),(952914,'Emma','https://stackoverflow.com/users/110527/emma','https://www.gravatar.com/avatar/1a3fec384503a3e0b33361f146006598?s=128&d=identicon&r=PG'),(613218,'Devin Jeanpierre','https://stackoverflow.com/users/18515/devin-jeanpierre','https://www.gravatar.com/avatar/f9375b447dd668a10c19891379b9db2a?s=128&d=identicon&r=PG'),(613183,'Gern Blanston','https://stackoverflow.com/users/2786/gern-blanston','https://www.gravatar.com/avatar/a82355039ccbe7d12a8ffee222dc225d?s=128&d=identicon&r=PG'),(1066603,'karim79','https://stackoverflow.com/users/70393/karim79','https://i.stack.imgur.com/tTRDl.jpg?s=128&g=1'),(1066589,'burntsugar','https://stackoverflow.com/users/84916/burntsugar','https://i.stack.imgur.com/IaDb2.jpg?s=128&g=1'),(3209434,'Eric Nguyen','https://stackoverflow.com/users/98068/eric-nguyen','https://i.stack.imgur.com/opsWd.jpg?s=128&g=1'),(339923,'kokos','https://stackoverflow.com/users/1065/kokos','https://www.gravatar.com/avatar/f46f31394a3dc3b841fdd0b1bb268701?s=128&d=identicon&r=PG'),(201378,'bortzmeyer','https://stackoverflow.com/users/15625/bortzmeyer','https://www.gravatar.com/avatar/2b9a6d8db89e80ea3028e179407b4990?s=128&d=identicon&r=PG'),(201323,'acrosman','https://stackoverflow.com/users/24215/acrosman','https://www.gravatar.com/avatar/21edf76205c5ea60cafcd6435a4fe0a8?s=128&d=identicon&r=PG'),(15666049,'Lior','https://stackoverflow.com/users/146636/lior','https://www.gravatar.com/avatar/95e8aba2803db0106c1e0a0f73b7e62e?s=128&d=identicon&r=PG'),(15666048,'Lior','https://stackoverflow.com/users/146636/lior','https://www.gravatar.com/avatar/95e8aba2803db0106c1e0a0f73b7e62e?s=128&d=identicon&r=PG'),(46908,'ScArcher2','https://stackoverflow.com/users/1310/scarcher2','https://www.gravatar.com/avatar/9cb44812fc259d55c656dd8038ea5af3?s=128&d=identicon&r=PG'),(46898,'iMack','https://stackoverflow.com/users/4807/imack','https://www.gravatar.com/avatar/7453d8a240de4b8d26869aa92743bb8e?s=128&d=identicon&r=PG'),(509295,'Greg Hewgill','https://stackoverflow.com/users/893/greg-hewgill','https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG'),(509211,'Simon','https://stackoverflow.com/users/24039/simon','https://www.gravatar.com/avatar/56e7993be670c363354b696cff311172?s=128&d=identicon&r=PG'),(638980,'John Feminella','https://stackoverflow.com/users/75170/john-feminella','https://www.gravatar.com/avatar/dee3c76d4bb3d44677c839ef281e52f9?s=128&d=identicon&r=PG'),(638975,'Bill the Lizard','https://stackoverflow.com/users/1288/bill-the-lizard','https://www.gravatar.com/avatar/fc763c6ff6c160ddad05741e87e517b6?s=128&d=identicon&r=PG'),(1338744,'gahooa','https://stackoverflow.com/users/64004/gahooa','https://www.gravatar.com/avatar/0ea88709c4b9bda3bc66c62237e12812?s=128&d=identicon&r=PG'),(1338728,'hap497','https://stackoverflow.com/users/128983/hap497','https://www.gravatar.com/avatar/da7a3c3efd21c067831e68c9c9c55636?s=128&d=identicon&r=PG'),(6471947,'Daniel Pryden','https://stackoverflow.com/users/128397/daniel-pryden','https://www.gravatar.com/avatar/22b05e50077230ba919b240af4bc13cd?s=128&d=identicon&r=PG'),(6470651,'Mat B.','https://stackoverflow.com/users/465179/mat-b','https://www.gravatar.com/avatar/a2fa6a84c0fa7de188a4777dd2bce022?s=128&d=identicon&r=PG&f=1'),(53522,'Patrick','https://stackoverflow.com/users/429/patrick','https://www.gravatar.com/avatar/05ce4158a6d636a028bd108bf52cd492?s=128&d=identicon&r=PG'),(53513,'Ray','https://stackoverflow.com/users/4872/ray','https://www.gravatar.com/avatar/2da21199d56ce93c5092f1c386d5a577?s=128&d=identicon&r=PG'),(176921,'Alex Coventry','https://stackoverflow.com/users/1941213/alex-coventry','https://www.gravatar.com/avatar/24dea531b0cb0ec8ccd9825f0bd0886a?s=128&d=identicon&r=PG'),(176918,'Eugene M','https://stackoverflow.com/users/25680/eugene-m','https://www.gravatar.com/avatar/69d55a08bdc1f4440ff16d8d13427207?s=128&d=identicon&r=PG'),(29485,'FlySwat','https://stackoverflow.com/users/1965/flyswat','https://www.gravatar.com/avatar/ad348387d020a15171daed0ab492a49b?s=128&d=identicon&r=PG'),(29482,'lomaxx','https://stackoverflow.com/users/493/lomaxx','https://www.gravatar.com/avatar/7129d811bfc70dae3fca6a46739472ec?s=128&d=identicon&r=PG'),(135614,'CB Bailey','https://stackoverflow.com/users/19563/cb-bailey','https://www.gravatar.com/avatar/a8db27c91db97757a829c7971fd62b84?s=128&d=identicon&r=PG'),(134882,'webmat','https://stackoverflow.com/users/6349/webmat','https://www.gravatar.com/avatar/a908bf6680c4fa7279dd85d5012f7ed8?s=128&d=identicon&r=PG'),(1014958,'Dan Herbert','https://stackoverflow.com/users/392/dan-herbert','https://www.gravatar.com/avatar/930406543d1f290ca749ad0bae3363c5?s=128&d=identicon&r=PG'),(1014861,'jcuenod','https://stackoverflow.com/users/123415/jcuenod','https://i.stack.imgur.com/dVXEK.jpg?s=128&g=1'),(215505,'David Segonds','https://stackoverflow.com/users/13673/david-segonds','https://www.gravatar.com/avatar/167099d07f9f55d6ed7e66d911eab025?s=128&d=identicon&r=PG'),(215497,'intrepion','https://stackoverflow.com/users/625/intrepion','https://www.gravatar.com/avatar/8f2a8ae3a27197376573647811f96901?s=128&d=identicon&r=PG'),(3294899,'sberry','https://stackoverflow.com/users/141555/sberry','https://i.stack.imgur.com/oOW8R.jpg?s=128&g=1'),(3294889,'TopChef','https://stackoverflow.com/users/1212392/topchef','https://www.gravatar.com/avatar/2d2462f1533adf1f46730674902713df?s=128&d=identicon&r=PG'),(1394804,'knittl','https://stackoverflow.com/users/112968/knittl','https://i.stack.imgur.com/zHTaT.png?s=128&g=1'),(1394797,'Dane O&#39;Connor','https://stackoverflow.com/users/1946/dane-oconnor','https://www.gravatar.com/avatar/ceb3004fcd7431660b8e16a91ca89b53?s=128&d=identicon&r=PG'),(27185855,'Jesper R&#248;nn-Jensen','https://stackoverflow.com/users/109305/jesper-r%c3%b8nn-jensen','https://www.gravatar.com/avatar/8b72389daf4540ff086ec79c0c42c632?s=128&d=identicon&r=PG'),(1519006,'Jesper R&#248;nn-Jensen','https://stackoverflow.com/users/109305/jesper-r%c3%b8nn-jensen','https://www.gravatar.com/avatar/8b72389daf4540ff086ec79c0c42c632?s=128&d=identicon&r=PG'),(32108184,'Adam Zerner','https://stackoverflow.com/users/1927876/adam-zerner','https://i.stack.imgur.com/tdHPA.jpg?s=128&g=1'),(679915,'falmp','https://stackoverflow.com/users/64784/falmp','https://www.gravatar.com/avatar/0a9c0ebf4b5e81484937665688cbe96d?s=128&d=identicon&r=PG'),(423596,'Paul Stephenson','https://stackoverflow.com/users/5536/paul-stephenson','https://i.stack.imgur.com/2RAZb.jpg?s=128&g=1'),(423379,'user46646','https://stackoverflow.com/users/46646/user46646','https://www.gravatar.com/avatar/a1e278de9bdbf3ecd96d0d786fa97392?s=128&d=identicon&r=PG'),(322742,'Jonathan Tran','https://stackoverflow.com/users/12887/jonathan-tran','https://www.gravatar.com/avatar/fc24fe007c2d362897829bf8302d29eb?s=128&d=identicon&r=PG'),(322715,'sdellysse','https://stackoverflow.com/users/41200/sdellysse','https://www.gravatar.com/avatar/625c890e8df6e3310dc357810eab83e8?s=128&d=identicon&r=PG'),(784946,'stevehipwell','https://stackoverflow.com/users/89075/stevehipwell','https://www.gravatar.com/avatar/00117035574b0fd0fbaf3b7ac5f5280e?s=128&d=identicon&r=PG'),(784929,'Hexagon Theory','https://stackoverflow.com/users/59107/hexagon-theory','https://www.gravatar.com/avatar/1c6ed1e4b15243c4e1a552fcdacff8ac?s=128&d=identicon&r=PG'),(252711,'kender','https://stackoverflow.com/users/4172/kender','https://www.gravatar.com/avatar/32cdc777a19a6f2b2129decd30061cd1?s=128&d=identicon&r=PG'),(252703,'Claudiu','https://stackoverflow.com/users/15055/claudiu','https://www.gravatar.com/avatar/7f71287b47b7189d11fe6d3fbc7ed2fe?s=128&d=identicon&r=PG'),(1986909,'flatline','https://stackoverflow.com/users/20846/flatline','https://www.gravatar.com/avatar/eab2ea9dca703228fddc36442c259da1?s=128&d=identicon&r=PG'),(1986896,'John Duff','https://stackoverflow.com/users/3041/john-duff','https://www.gravatar.com/avatar/cbfce1df8a098753f8b90ccac072a18e?s=128&d=identicon&r=PG'),(1321962,'Claudio Acciaresi','https://stackoverflow.com/users/48696/claudio-acciaresi','https://www.gravatar.com/avatar/4dbb1bdc0dbd895a640f3b6442df7a53?s=128&d=identicon&r=PG'),(278192,'Richard','https://stackoverflow.com/users/36214/richard','https://www.gravatar.com/avatar/a12eaf78c327cc815d6ad6088ee00c6e?s=128&d=identicon&r=PG'),(728694,'A. Levy','https://stackoverflow.com/users/35881/a-levy','https://www.gravatar.com/avatar/95ee2befbddbd112fbbd1c8b500fcfc9?s=128&d=identicon&r=PG'),(728360,'soundly_typed','https://stackoverflow.com/users/49695/soundly-typed','https://www.gravatar.com/avatar/007fcb22bed672220b54afb4c46ef8c3?s=128&d=identicon&r=PG'),(8333163,'bukzor','https://stackoverflow.com/users/146821/bukzor','https://www.gravatar.com/avatar/cfb031c34e0927a9ce5d68779379e6ad?s=128&d=identicon&r=PG'),(3040833,'Rachel','https://stackoverflow.com/users/164299/rachel','https://www.gravatar.com/avatar/a6a3433dcd7d7c96bb26d568a6206da0?s=128&d=identicon&r=PG'),(130862,'wds','https://stackoverflow.com/users/10098/wds','https://www.gravatar.com/avatar/01bb891a03442bf5494b7e35804c6dc1?s=128&d=identicon&r=PG'),(130794,'AR.','https://stackoverflow.com/users/1354/ar','https://i.stack.imgur.com/dqRaE.jpg?s=128&g=1'),(1911126,'Michael Krelin - hacker','https://stackoverflow.com/users/95382/michael-krelin-hacker','https://www.gravatar.com/avatar/96e6a2a376fd5c88e7453a5f17728cb2?s=128&d=identicon&r=PG'),(1911109,'Scud','https://stackoverflow.com/users/207419/scud','https://www.gravatar.com/avatar/46f116029c41cc1bf0cfc5be57079667?s=128&d=identicon&r=PG'),(1143800,'bdonlan','https://stackoverflow.com/users/36723/bdonlan','https://www.gravatar.com/avatar/d5a138149601087e78436b67718578cd?s=128&d=identicon&r=PG'),(1143796,'mveerman','https://stackoverflow.com/users/127056/mveerman','https://www.gravatar.com/avatar/b9edb60b80e96193c415655a08b3f022?s=128&d=identicon&r=PG'),(5585800,'Rob Hruska','https://stackoverflow.com/users/29995/rob-hruska','https://www.gravatar.com/avatar/ffffa52ae8108fdeb2559d804051556e?s=128&d=identicon&r=PG'),(5585779,'Unknown user','https://stackoverflow.com/users/537967/unknown-user','https://www.gravatar.com/avatar/fd0de9b7a6fdcd9368f37e71484440fb?s=128&d=identicon&r=PG'),(1034642,'VolkerK','https://stackoverflow.com/users/4833/volkerk','https://www.gravatar.com/avatar/c0d3bf653c44af90ef09711d538bee6a?s=128&d=identicon&r=PG'),(1034621,'dougoftheabaci',NULL,NULL),(285809,'Jon Skeet','https://stackoverflow.com/users/22656/jon-skeet','https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG'),(285793,'ashokgelal','https://stackoverflow.com/users/33203/ashokgelal','https://www.gravatar.com/avatar/07856b52198509b8bd0d2e5418d0bf37?s=128&d=identicon&r=PG'),(588014,'Brian R. Bondy','https://stackoverflow.com/users/3153/brian-r-bondy','https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG'),(588004,'Cato Johnston','https://stackoverflow.com/users/62118/cato-johnston','https://www.gravatar.com/avatar/fbc2de70a03c5b320aded81f6c0eb489?s=128&d=identicon&r=PG&f=1'),(1098955,'Ates Goral','https://stackoverflow.com/users/23501/ates-goral','https://www.gravatar.com/avatar/c7f65a2f291636c0bd19920b2b6d525b?s=128&d=identicon&r=PG'),(1098040,'Adam Ernst','https://stackoverflow.com/users/79/adam-ernst','https://www.gravatar.com/avatar/072abdb5a6787505e87044eda654a49b?s=128&d=identicon&r=PG'),(237280,'Zunino','https://stackoverflow.com/users/30767/zunino','https://i.stack.imgur.com/zEqpG.jpg?s=128&g=1'),(236129,'Ashwin Nanjappa','https://stackoverflow.com/users/1630/ashwin-nanjappa','https://i.stack.imgur.com/jNryb.jpg?s=128&g=1'),(1712873,'Snazzer','https://stackoverflow.com/users/92633/snazzer','https://www.gravatar.com/avatar/cea4d1ebea5b4c6bf6fe125879ad436b?s=128&d=identicon&r=PG'),(1711631,'Mike Willekes','https://stackoverflow.com/users/203690/mike-willekes','https://www.gravatar.com/avatar/bc7f81a3f1fe45bede6ebb302e60338a?s=128&d=identicon&r=PG'),(1357151,'karim79','https://stackoverflow.com/users/70393/karim79','https://i.stack.imgur.com/tTRDl.jpg?s=128&g=1'),(1357118,'RaYell','https://stackoverflow.com/users/137467/rayell','https://www.gravatar.com/avatar/ba549cc90adcc10d22c52c998c1a42c7?s=128&d=identicon&r=PG'),(586189,'tvanfosson','https://stackoverflow.com/users/12950/tvanfosson','https://www.gravatar.com/avatar/00aa1356e6f90fca08b36fb3c8d230c5?s=128&d=identicon&r=PG'),(586182,'tags2k','https://stackoverflow.com/users/192/tags2k','https://www.gravatar.com/avatar/4466fde5314c4361853e95c1f892e191?s=128&d=identicon&r=PG'),(121163,'Skizz','https://stackoverflow.com/users/1898/skizz','https://www.gravatar.com/avatar/e222c924e06cc579a6866f6d7588ca66?s=128&d=identicon&r=PG'),(121162,'Skizz','https://stackoverflow.com/users/1898/skizz','https://www.gravatar.com/avatar/e222c924e06cc579a6866f6d7588ca66?s=128&d=identicon&r=PG'),(572660,'CB Bailey','https://stackoverflow.com/users/19563/cb-bailey','https://www.gravatar.com/avatar/a8db27c91db97757a829c7971fd62b84?s=128&d=identicon&r=PG'),(572549,'cmcginty','https://stackoverflow.com/users/64313/cmcginty','https://i.stack.imgur.com/r5Apm.gif?s=128&g=1'),(415519,'Harley Holcombe','https://stackoverflow.com/users/1057/harley-holcombe','https://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=128&d=identicon&r=PG'),(415511,'user46646','https://stackoverflow.com/users/46646/user46646','https://www.gravatar.com/avatar/a1e278de9bdbf3ecd96d0d786fa97392?s=128&d=identicon&r=PG'),(15464440,'Colonel Panic','https://stackoverflow.com/users/284795/colonel-panic','https://www.gravatar.com/avatar/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=128&d=identicon&r=PG'),(444798,'Boris Callens','https://stackoverflow.com/users/11333/boris-callens','https://www.gravatar.com/avatar/90bcee050c16e0c5a7e9f955968d5f9c?s=128&d=identicon&r=PG'),(684692,'levik','https://stackoverflow.com/users/4465/levik','https://www.gravatar.com/avatar/7f4fd2cb2fec52981ae18c25257a1634?s=128&d=identicon&r=PG'),(684672,'Tanmoy','https://stackoverflow.com/users/1312208/tanmoy','https://www.gravatar.com/avatar/9196200f17e666c6ccd475bbf26e1309?s=128&d=identicon&r=PG'),(351421,'jdecuyper','https://stackoverflow.com/users/296/jdecuyper','https://www.gravatar.com/avatar/21ae3e5f2968bc957b7a6fa709bea2a0?s=128&d=identicon&r=PG'),(351409,'interstar','https://stackoverflow.com/users/8482/interstar','https://www.gravatar.com/avatar/248a3c4ba8f2972427222d46954f9c1c?s=128&d=identicon&r=PG'),(1662088,'Morgan Christiansson','https://stackoverflow.com/users/34516/morgan-christiansson','https://www.gravatar.com/avatar/8ec36c26bc1532d656dd3b70b7fb262f?s=128&d=identicon&r=PG'),(1555109,'Mark','https://stackoverflow.com/users/137193/mark','https://www.gravatar.com/avatar/44b2eec7843986a679541bc317a05483?s=128&d=identicon&r=PG'),(154068,'bdukes','https://stackoverflow.com/users/2688/bdukes','https://www.gravatar.com/avatar/f1df0c370bbfd32568f4914d9c771e9d?s=128&d=identicon&r=PG'),(154059,'casademora','https://stackoverflow.com/users/5619/casademora','https://www.gravatar.com/avatar/4c5bc935da066bf73113e426f396ba60?s=128&d=identicon&r=PG'),(7173011,'Sean Patrick Floyd','https://stackoverflow.com/users/342852/sean-patrick-floyd','https://i.stack.imgur.com/aLKQa.png?s=128&g=1'),(7172784,'kamaci','https://stackoverflow.com/users/453596/kamaci','https://i.stack.imgur.com/leAsu.jpg?s=128&g=1'),(416327,'Erwin',NULL,NULL),(27509,'Matt Sheppard','https://stackoverflow.com/users/797/matt-sheppard','https://www.gravatar.com/avatar/aef85130bf44caa9b4de0a3153e758f2?s=128&d=identicon&r=PG');
/*!40000 ALTER TABLE `ownerd` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userd`
--

DROP TABLE IF EXISTS `userd`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userd` (
  `id` varchar(64) NOT NULL,
  `accesstoken` varchar(255) DEFAULT NULL,
  `displayname` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `profileimage` varchar(255) DEFAULT NULL,
  `role` varchar(255) DEFAULT NULL,
  `stackid` int DEFAULT NULL,
  `tag1` varchar(255) DEFAULT NULL,
  `tag2` varchar(255) DEFAULT NULL,
  `tag3` varchar(255) DEFAULT NULL,
  `tag4` varchar(255) DEFAULT NULL,
  `tag5` varchar(255) DEFAULT NULL,
  `userlink` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_a2iyro2lpudma8b5db9gbwk69` (`stackid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `userd`
--

LOCK TABLES `userd` WRITE;
/*!40000 ALTER TABLE `userd` DISABLE KEYS */;
INSERT INTO `userd` VALUES ('abc','vUYWLAOVqy*rCsNkBS0*(Q))','fuzious','$2a$10$g8XwD5.KIIdxnbmt403JrupRIC3rFpodQqL5mvr7.zX0iVaea79iy','https://lh5.googleusercontent.com/-M_CiRPA16wk/AAAAAAAAAAI/AAAAAAAAAGE/bCMsny8ymA8/photo.jpg?sz=128','user',6118183,'java','android','arrays','spring','mysql','https://stackoverflow.com/users/6118183/fuzious');
/*!40000 ALTER TABLE `userd` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userd_seen`
--

DROP TABLE IF EXISTS `userd_seen`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userd_seen` (
  `pkey` int NOT NULL AUTO_INCREMENT,
  `id` varchar(64) DEFAULT NULL,
  `seen` int DEFAULT NULL,
  PRIMARY KEY (`pkey`),
  KEY `user_id_seen` (`id`,`seen`)
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `userd_seen`
--

LOCK TABLES `userd_seen` WRITE;
/*!40000 ALTER TABLE `userd_seen` DISABLE KEYS */;
INSERT INTO `userd_seen` VALUES (1,'abc',11227809),(2,'abc',927358),(3,'abc',2003505),(4,'abc',292357),(5,'abc',477816),(6,'abc',231767),(7,'abc',348170),(8,'abc',1642028),(9,'abc',6591213),(10,'abc',5767325);
/*!40000 ALTER TABLE `userd_seen` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-06-26 21:56:16
