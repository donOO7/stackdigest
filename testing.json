  [{"assetId":11227809,"profileImage":"https://i.stack.imgur.com/FkjBe.png?s=128&g=1","displayName":"GManNickG","ownerLink":"https://stackoverflow.com/users/87234/gmannickg","score":24432,"link":"https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array","body":"<p>Here is a piece of C++ code that shows some very peculiar behavior. For some strange reason, sorting the data miraculously makes the code almost six times faster:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;algorithm&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Generate data\n    const unsigned arraySize = 32768;\n    int data[arraySize];\n\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n        data[c] = std::rand() % 256;\n\n    // !!! With this, the next loop runs faster.\n    std::sort(data, data + arraySize);\n\n    // Test\n    clock_t start = clock();\n    long long sum = 0;\n\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        // Primary loop\n        for (unsigned c = 0; c &lt; arraySize; ++c)\n        {\n            if (data[c] &gt;= 128)\n                sum += data[c];\n        }\n    }\n\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code></pre>\n\n<ul>\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>\n<li>With the sorted data, the code runs in 1.93 seconds.</li>\n</ul>\n\n<hr>\n\n<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Generate data\n        int arraySize = 32768;\n        int data[] = new int[arraySize];\n\n        Random rnd = new Random(0);\n        for (int c = 0; c &lt; arraySize; ++c)\n            data[c] = rnd.nextInt() % 256;\n\n        // !!! With this, the next loop runs faster\n        Arrays.sort(data);\n\n        // Test\n        long start = System.nanoTime();\n        long sum = 0;\n\n        for (int i = 0; i &lt; 100000; ++i)\n        {\n            // Primary loop\n            for (int c = 0; c &lt; arraySize; ++c)\n            {\n                if (data[c] &gt;= 128)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n</code></pre>\n\n<p>With a similar but less extreme result.</p>\n\n<hr>\n\n<p>My first thought was that sorting brings the data into the cache, but then I thought how silly that was because the array was just generated.</p>\n\n<ul>\n<li>What is going on?</li>\n<li>Why is processing a sorted array faster than processing an unsorted array?</li>\n</ul>\n\n<p>The code is summing up some independent terms, so the order should not matter.                       </p>\n","title":"Why is processing a sorted array faster than processing an unsorted array?","tags":["c++","java","performance","optimization","branch-prediction"],"answersD":{"assetId":11227902,"profileImage":"https://i.stack.imgur.com/h7WDB.jpg?s=128&g=1","displayName":"Mysticial","ownerLink":"https://stackoverflow.com/users/922184/mysticial","score":31774,"creationDate":1340805402,"body":"<p><strong>You are a victim of <a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">branch prediction</a> fail.</strong></p>\n\n<hr>\n\n<h2>What is Branch Prediction?</h2>\n\n<p>Consider a railroad junction:</p>\n\n<p><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/muxnt.jpg\" alt=\"Image showing a railroad junction\"></a>\n<sub><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\" rel=\"noreferrer\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\"//creativecommons.org/licenses/by-sa/3.0/deed.en\" rel=\"noreferrer\">CC-By-SA 3.0</a> license.</sub></p>\n\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\n\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>\n\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\n\n<p>Is there a better way? You guess which direction the train will go!</p>\n\n<ul>\n<li>If you guessed right, it continues on.</li>\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the train will never have to stop. <br/>\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\n\n<hr>\n\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\n\n<p><img src=\"https://i.stack.imgur.com/pyfwC.png\" alt=\"Screenshot of compiled code containing an if statement\"></p>\n\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\n\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to \"warm up\" and \"slow down\".</em></p>\n\n<p>Is there a better way? You guess which direction the branch will go!</p>\n\n<ul>\n<li>If you guessed right, you continue executing.</li>\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the execution will never have to stop. <br/>\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\n\n<hr>\n\n<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>\n\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...</p>\n\n<p><strong><em>In other words, you try to identify a pattern and follow it.</em></strong> This is more or less how branch predictors work.</p>\n\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve >90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\n\n<p>Further reading: <a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">\"Branch predictor\" article on Wikipedia</a>.</p>\n\n<hr>\n\n<h2>As hinted from above, the culprit is this if-statement:</h2>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\n\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\n\n<p><strong>Quick visualization:</strong></p>\n\n<pre><code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code></pre>\n\n<p>However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).</p>\n\n<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n</code></pre>\n\n<hr>\n\n<p><strong>So what can be done?</strong></p>\n\n<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\n\n<p>Replace:</p>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>int t = (data[c] - 128) &gt;&gt; 31;\nsum += ~t &amp; data[c];\n</code></pre>\n\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\n\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>\n\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\n\n<p>C++ - Visual Studio 2010 - x64 Release</p>\n\n<pre><code>//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n</code></pre>\n\n<p>Java - NetBeans 7.1.1 JDK 7 - x64</p>\n\n<pre><code>//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n</code></pre>\n\n<p>Observations:</p>\n\n<ul>\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\n</ul>\n\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).</p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<ul>\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p>\n\n<p>(Or somewhat fast: for the already-sorted case, <code>cmov</code> can be slower especially if GCC puts it on the critical path instead of just <code>add</code>, especially on Intel before Broadwell where <code>cmov</code> has 2 cycle latency: <a href=\"https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2\">gcc optimization flag -O3 makes code slower than -O2</a>)</p></li>\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p></li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Intel_C%2B%2B_Compiler\" rel=\"noreferrer\">Intel C++ Compiler</a> (ICC) 11 does something miraculous. It <a href=\"https://en.wikipedia.org/wiki/Loop_interchange\" rel=\"noreferrer\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune to the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p></li>\n<li><p>If you give the Intel compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p></li>\n</ul>\n\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\n"}},{"assetId":927358,"profileImage":"https://www.gravatar.com/avatar/4fef65cead13e5d519f6bce3c501a537?s=128&d=identicon&r=PG","displayName":"Hamza Yerlikaya","ownerLink":"https://stackoverflow.com/users/89904/hamza-yerlikaya","score":21036,"link":"https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git","body":"<p>I accidentally committed the wrong files to <a href=\"https://en.wikipedia.org/wiki/Git\" rel=\"noreferrer\">Git</a>, but I haven't pushed the commit to the server yet.</p>\n\n<p>How can I undo those commits from the local repository?</p>\n","title":"How do I undo the most recent local commits in Git?","tags":["undo","git","pre-commit","version-control","git-commit"],"answersD":{"assetId":927386,"profileImage":"https://www.gravatar.com/avatar/520c9c078b8d25980de17b8d4fe0ceba?s=128&d=identicon&r=PG","displayName":"Esko Luontola","ownerLink":"https://stackoverflow.com/users/62130/esko-luontola","score":22838,"creationDate":1243620822,"body":"<h3>Undo a commit and redo</h3>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git commit -m \"Something terribly misguided\"             # (1)\n$ git reset HEAD~                                          # (2)\n&lt;&lt; edit files as necessary &gt;&gt;                              # (3)\n$ git add ...                                              # (4)\n$ git commit -c ORIG_HEAD                                  # (5)\n</code></pre>\n\n<ol>\n<li>This is what you want to undo.</li>\n<li>This does nothing to your working tree (the state of your files on disk), but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in <code>git status</code>, so you'll need to add them again before committing). If you <em>only</em> want to <em>add</em> more changes to the previous commit, or change the commit message<sup>1</sup>, you could use <code>git reset --soft HEAD~</code> instead, which is like <code>git reset HEAD~</code><sup>2</sup> but leaves your existing changes staged.</li>\n<li>Make corrections to working tree files.</li>\n<li><code>git add</code> anything that you want to include in your new commit.</li>\n<li>Commit the changes, reusing the old commit message. <code>reset</code> copied the old head to <code>.git/ORIG_HEAD</code>; <code>commit</code> with <code>-c ORIG_HEAD</code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the <code>-C</code> option.</li>\n</ol>\n\n<p>Beware, however, that if you have added any new changes to the index, using <code>commit --amend</code> will add them to your previous commit.</p>\n\n<p>If the code is already pushed to your server and you have permissions to overwrite history (rebase) then:</p>\n\n<pre><code>git push origin master --force\n</code></pre>\n\n<p>You can also look at this answer:  </p>\n\n<p><a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716\">How can I move HEAD back to a previous location? (Detached head) &amp; Undo commits</a></p>\n\n<p>The above answer will show you <code>git reflog,</code> which is used to find out what is the SHA-1, which you wish to revert. Once you found the point to which you want to undo to use the sequence of commands as explained above.</p>\n\n<hr>\n\n<p><sup>1</sup> Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your <em>commit message</em>. The easier option is to <code>git reset</code> (to unstage any changes you've made since) and then <a href=\"https://stackoverflow.com/q/179123/1146608\"><code>git commit --amend</code></a>, which will open your default commit message editor pre-populated with the last commit message. </p>\n\n<p><sup>2</sup> <code>HEAD~</code> is the same as <code>HEAD~1</code>. Also, see <a href=\"https://stackoverflow.com/a/46350644/5175709\">What is the HEAD in git?</a>. It's helpful if you want to uncommit multiple commits.</p>\n"}},{"assetId":2003505,"profileImage":"https://i.stack.imgur.com/utY5u.jpg?s=128&g=1","displayName":"Matthew Rankin","ownerLink":"https://stackoverflow.com/users/95592/matthew-rankin","score":16938,"link":"https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely","body":"<p>I want to delete a branch both locally and remotely.</p>\n\n<h2>Failed Attempts to Delete a Remote Branch</h2>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git branch -d remotes/origin/bugfix\nerror: branch 'remotes/origin/bugfix' not found.\n\n$ git branch -d origin/bugfix\nerror: branch 'origin/bugfix' not found.\n\n$ git branch -rd origin/bugfix\nDeleted remote branch origin/bugfix (was 2a14ef7).\n\n$ git push\nEverything up-to-date\n\n$ git pull\nFrom github.com:gituser/gitproject\n\n* [new branch] bugfix -&gt; origin/bugfix\nAlready up-to-date.\n</code></pre>\n\n<p>What should I do differently to successfully delete the <code>remotes/origin/bugfix</code> branch both locally and remotely?</p>\n","title":"How do I delete a Git branch locally and remotely?","tags":["git-branch","git","git-remote","version-control","git-push"],"answersD":{"assetId":2003515,"profileImage":"https://i.stack.imgur.com/utY5u.jpg?s=128&g=1","displayName":"Matthew Rankin","ownerLink":"https://stackoverflow.com/users/95592/matthew-rankin","score":21409,"creationDate":1262654035,"body":"<h1>Executive Summary</h1>\n\n<pre><code>$ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\n$ git branch -d &lt;branch_name&gt;\n</code></pre>\n\n<p>Note that in most cases the remote name is <code>origin</code>.\nIn such a case you'll have to use the command like so.</p>\n\n<pre><code>$ git push -d origin &lt;branch_name&gt;\n</code></pre>\n\n<h1>Delete Local Branch</h1>\n\n<p>To delete the <em>local</em> branch use one of the following:</p>\n\n<pre><code>$ git branch -d branch_name\n$ git branch -D branch_name\n</code></pre>\n\n<p><strong>Note:</strong> The <code>-d</code> option is an alias for <code>--delete</code>, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use <code>-D</code>, which is an alias for <code>--delete --force</code>, which deletes the branch \"irrespective of its merged status.\" [Source: <code>man git-branch</code>] </p>\n\n<h1>Delete Remote Branch [Updated on 8-Sep-2017]</h1>\n\n<p>As of <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\" rel=\"noreferrer\">Git v1.7.0</a>, you can delete a <strong><em>remote</em></strong> branch using</p>\n\n<pre><code>$ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\n</code></pre>\n\n<p>which might be easier to remember than</p>\n\n<pre><code>$ git push &lt;remote_name&gt; :&lt;branch_name&gt;\n</code></pre>\n\n<p>which was added in <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\" rel=\"noreferrer\">Git v1.5.0</a> \"to delete a remote branch or a tag.\"</p>\n\n<p>Starting on <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\" rel=\"noreferrer\">Git v2.8.0</a> you can also use <code>git push</code> with the <code>-d</code> option as an alias for <code>--delete</code>.</p>\n\n<p>Therefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.</p>\n\n<h2>Delete Remote Branch [Original Answer from 5-Jan-2010]</h2>\n\n<p>From Chapter 3 of <a href=\"http://git-scm.com/book/en/Git-Branching-Remote-Branches\" rel=\"noreferrer\"><em>Pro Git</em></a> by Scott Chacon:</p>\n\n<blockquote>\n  <h3>Deleting Remote Branches</h3>\n  \n  <p>Suppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or whatever branch your stable code-line is in). You can delete a remote branch using the rather obtuse syntax <code>git push [remotename] :[branch]</code>. If you want to delete your server-fix branch from the server, you run the following:</p>\n\n<pre><code>$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n</code></pre>\n  \n  <p>Boom. No more branches on your server. You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax. A way to remember this command is by recalling the <code>git push [remotename] [localbranch]:[remotebranch]</code> syntax that we went over a bit earlier. If you leave off the <code>[localbranch]</code> portion, then you’re basically saying, “Take nothing on my side and make it be <code>[remotebranch]</code>.”</p>\n</blockquote>\n\n<p>I issued <code>git push origin: bugfix</code> and it worked beautifully. Scott Chacon was right—I will want to <a href=\"http://en.wiktionary.org/wiki/dogear#Verb\" rel=\"noreferrer\">dog ear</a> that page (or virtually dog ear by answering this on Stack&nbsp;Overflow).</p>\n\n<p>Then you should execute this on other machines</p>\n\n<pre><code># Fetch changes from all remotes and locally delete \n# remote deleted branches/tags etc\n# --prune will do the job :-;\ngit fetch --all --prune\n</code></pre>\n\n<p>to propagate changes.</p>\n"}},{"assetId":292357,"profileImage":"https://www.gravatar.com/avatar/931970b8dc51b72e05e3a12b88612d61?s=128&d=identicon&r=PG","displayName":"pupeno","ownerLink":"https://stackoverflow.com/users/6068/pupeno","score":11905,"link":"https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch","body":"<p>What are the differences between <code>git pull</code> and <code>git fetch</code>?</p>\n","title":"What is the difference between &#39;git pull&#39; and &#39;git fetch&#39;?","tags":["git-fetch","git","git-pull","version-control"],"answersD":{"assetId":292359,"profileImage":"https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG","displayName":"Greg Hewgill","ownerLink":"https://stackoverflow.com/users/893/greg-hewgill","score":9909,"creationDate":1226742760,"body":"<p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.</p>\n\n<p>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>.</p>\n\n<p>This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running <code>git fetch</code> periodically in a cron job in the background (although I wouldn't recommend doing this).</p>\n\n<p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p>\n\n<p>Git documentation – <a href=\"http://git-scm.com/docs/git-pull\" rel=\"noreferrer\"><strong>git pull</strong></a>:</p>\n\n<blockquote>\n  <p>In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p>\n</blockquote>\n"}},{"assetId":477816,"profileImage":"https://www.gravatar.com/avatar/f0af40756420859b5b63cbceb6d30505?s=128&d=identicon&r=PG","displayName":"Oli","ownerLink":"https://stackoverflow.com/users/12870/oli","score":10246,"link":"https://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type","body":"<p>I've been messing around with <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">JSON</a> for some time, just pushing it out as text and it hasn't hurt anybody (that I know of), but I'd like to start doing things properly.</p>\n\n<p>I have seen <em>so</em> many purported \"standards\" for the JSON content type:</p>\n\n<pre><code>application/json\napplication/x-javascript\ntext/javascript\ntext/x-javascript\ntext/x-json\n</code></pre>\n\n<p>But which one is correct, or best? I gather that there are security and browser support issues varying between them.</p>\n\n<p>I know there's a similar question, <em><a href=\"https://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\">What MIME type if JSON is being returned by a REST API?</a></em>, but I'd like a slightly more targeted answer.</p>\n","title":"What is the correct JSON content type?","tags":["http-headers","json","content-type"],"answersD":{"assetId":477819,"profileImage":"https://www.gravatar.com/avatar/cd501083459cbc21fccae78e2d03bee2?s=128&d=identicon&r=PG","displayName":"Gumbo","ownerLink":"https://stackoverflow.com/users/53114/gumbo","score":10301,"creationDate":1232897249,"body":"<p>For JSON text:</p>\n\n<p><strong><code>application/json</code></strong></p>\n\n<blockquote>\n  <p>The MIME media type for JSON text is <strong><code>application/json</code></strong>. The default encoding is UTF-8. (Source: <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"noreferrer\">RFC 4627</a>).</p>\n</blockquote>\n\n<p>For <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSONP</a> (runnable javascript) with callback:</p>\n\n<blockquote>\n  <p><strong><code>application/javascript</code></strong></p>\n</blockquote>\n\n<p>Here are some blog posts that were mentioned in the comments that are relevant.</p>\n\n<ul>\n<li><a href=\"http://jibbering.com/blog/?p=514\" rel=\"noreferrer\">Why you shouldn't use <code>text/html</code> for JSON</a></li>\n<li><a href=\"https://web.archive.org/web/20180102070201/www.entwicklungsgedanken.de/2008/06/06/problems-with-internet-explorer-and-applicationjson/\" rel=\"noreferrer\">Internet&nbsp;Explorer sometimes has issues with <code>application/json</code></a></li>\n<li><a href=\"https://github.com/h5bp/server-configs-nginx/blob/master/mime.types\" rel=\"noreferrer\">A rather complete list of Mimetypes and what to use them for</a></li>\n<li><a href=\"http://www.iana.org/assignments/media-types/application/\" rel=\"noreferrer\">The official mime type list at IANA</a> from @gnrfan's answer below</li>\n</ul>\n"}},{"assetId":231767,"profileImage":"https://i.stack.imgur.com/jcyI4.jpg?s=128&g=1","displayName":"Alex. S.","ownerLink":"https://stackoverflow.com/users/18300/alex-s","score":10176,"link":"https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do","body":"<p>What is the use of the <code>yield</code> keyword in Python, and what does it do?</p>\n\n<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre><code>result, candidates = [], [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub></p>\n","title":"What does the &quot;yield&quot; keyword do?","tags":["python","iterator","yield","coroutine","generator"],"answersD":{"assetId":231855,"profileImage":"https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1","displayName":"e-satis","ownerLink":"https://stackoverflow.com/users/9951/e-satis","score":14630,"creationDate":1224802124,"body":"<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>\"if/else\"</code>.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p><em>Generator:</em></p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n    # Here is the code that will be called each time you use the generator object:\n\n    # If there is still a child of the node object on its left\n    # AND if the distance is ok, return the next child\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n\n    # If there is still a child of the node object on its right\n    # AND if the distance is ok, return the next child\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild\n\n    # If the function arrives here, the generator will be considered empty\n    # there is no more than two values: the left and the right children\n</code></pre>\n\n<p><em>Caller:</em></p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidate's list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list, but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhaust all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code, it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don't need to read the values twice.</li>\n<li>You may have a lot of children and you don't want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # Let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n['$100', '$100', '$100', '$100', '$100']\n&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>There is more about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\" rel=\"noreferrer\">how <code>for</code> loops work</a>.</p>\n"}},{"assetId":348170,"profileImage":"https://www.gravatar.com/avatar/0c29cc6ee1c170810ee1fd36fa7c2f95?s=128&d=identicon&r=PG","displayName":"paxos1977","ownerLink":"https://stackoverflow.com/users/14069/paxos1977","score":8949,"link":"https://stackoverflow.com/questions/348170/how-do-i-undo-git-add-before-commit","body":"<p>I mistakenly added files to Git using the command:</p>\n\n<pre><code>git add myfile.txt\n</code></pre>\n\n<p>I have not yet run <code>git commit</code>. Is there a way to undo this, so these files won't be included in the commit?</p>\n","title":"How do I undo &#39;git add&#39; before commit?","tags":["git","git-stage","version-control","git-commit"],"answersD":{"assetId":348234,"profileImage":"https://www.gravatar.com/avatar/c0f1e0ce679f144459b25087e5b25b56?s=128&d=identicon&r=PG&f=1","displayName":"genehack","ownerLink":"https://stackoverflow.com/users/39933/genehack","score":10348,"creationDate":1228689048,"body":"<p>You can undo <code>git add</code> before commit with</p>\n\n<pre><code>git reset &lt;file&gt;\n</code></pre>\n\n<p>which will remove it from the current index (the \"about to be committed\" list) without changing anything else.</p>\n\n<p>You can use</p>\n\n<pre><code>git reset\n</code></pre>\n\n<p>without any file name to unstage all due changes. This can come in handy when there are too many files to be listed one by one in a reasonable amount of time.</p>\n\n<p>In old versions of Git, the above commands are equivalent to <code>git reset HEAD &lt;file&gt;</code> and <code>git reset HEAD</code> respectively, and will fail if <code>HEAD</code> is undefined (because you haven't yet made any commits in your repository) or ambiguous (because you created a branch called <code>HEAD</code>, which is a stupid thing that you shouldn't do). This <a href=\"https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/1.8.2.txt#n179\" rel=\"noreferrer\">was changed in Git 1.8.2</a>, though, so in modern versions of Git you can use the commands above even prior to making your first commit:</p>\n\n<blockquote>\n  <p>\"git reset\" (without options or parameters) used to error out when\n     you do not have any commits in your history, but it now gives you\n     an empty index (to match non-existent commit you are not even on).</p>\n</blockquote>\n"}},{"assetId":1642028,"profileImage":"https://i.stack.imgur.com/FkjBe.png?s=128&g=1","displayName":"GManNickG","ownerLink":"https://stackoverflow.com/users/87234/gmannickg","score":8918,"link":"https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c","body":"<p>After reading <a href=\"http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20\" rel=\"noreferrer\">Hidden Features and Dark Corners of C++/STL</a> on <code>comp.lang.c++.moderated</code>, I was completely surprised that the following snippet compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>\n\n<p>Here's the code:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int x = 10;\n    while (x --&gt; 0) // x goes to 0\n    {\n        printf(\"%d \", x);\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>9 8 7 6 5 4 3 2 1 0\n</code></pre>\n\n<p>I'd assume this is C, since it works in GCC as well. Where is this defined in the standard, and where has it come from?</p>\n","title":"What is the &quot;--&gt;&quot; operator in C++?","tags":["c++","c","operators","standards-compliance","code-formatting"],"answersD":{"assetId":1642035,"profileImage":"https://i.stack.imgur.com/2twwK.jpg?s=128&g=1","displayName":"Charles Salvia","ownerLink":"https://stackoverflow.com/users/168288/charles-salvia","score":8592,"creationDate":1256799609,"body":"<p><code>--&gt;</code> is not an operator. It is in fact two separate operators, <code>--</code> and <code>&gt;</code>.</p>\n\n<p>The conditional's code decrements <code>x</code>, while returning <code>x</code>'s original (not decremented) value, and then compares the original value with <code>0</code> using the <code>&gt;</code> operator.</p>\n\n<p><strong>To better understand, the statement could be written as follows:</strong></p>\n\n<pre><code>while( (x--) &gt; 0 )\n</code></pre>\n"}},{"assetId":6591213,"profileImage":"https://www.gravatar.com/avatar/c145a12cd17d3b3ffff033681a694abe?s=128&d=identicon&r=PG","displayName":"Forrest","ownerLink":"https://stackoverflow.com/users/338204/forrest","score":8561,"link":"https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch","body":"<p>I don't want to rename a remote branch, as described in <em><a href=\"https://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top\">Rename master branch for both local and remote Git repositories</a></em>.</p>\n\n<p>How can I rename a local branch which hasn't been pushed to a remote branch?</p>\n\n<p>In case you need to rename <strong>remote</strong> branch as well:<br>\n<em><a href=\"https://stackoverflow.com/questions/30590083/how-to-rename-a-remote-git-branch-name/30590238#30590238\">How do I rename both a Git local and remote branch name</a></em></p>\n","title":"How do I rename a local Git branch?","tags":["git-branch","git","version-control"],"answersD":{"assetId":6591218,"profileImage":"https://www.gravatar.com/avatar/c1ea49f769f4a6fcc59d4594c55156b2?s=128&d=identicon&r=PG","displayName":"siride","ownerLink":"https://stackoverflow.com/users/394487/siride","score":13719,"creationDate":1309922502,"body":"<p>If you want to rename a branch while pointed to any branch, do:</p>\n\n<pre><code>git branch -m &lt;oldname&gt; &lt;newname&gt;\n</code></pre>\n\n<p>If you want to rename the current branch, you can do:</p>\n\n<pre><code>git branch -m &lt;newname&gt;\n</code></pre>\n\n<p>A way to remember this is <code>-m</code> is for \"move\" (or <code>mv</code>), which is how you rename files. Adding an alias could also help. To do so, run the following:</p>\n\n<pre><code>git config --global alias.rename 'branch -m'\n</code></pre>\n\n<p>If you are on Windows or another case-insensitive filesystem, and there are only capitalization changes in the name, you need to use <code>-M</code>, otherwise, git will throw <em><strong>branch already exists</strong></em> error:</p>\n\n<pre><code>git branch -M &lt;newname&gt;\n</code></pre>\n"}},{"assetId":5767325,"profileImage":"https://www.gravatar.com/avatar/79e7cefc9e7deb0e0bf422baa1a38a2c?s=128&d=identicon&r=PG","displayName":"Walker","ownerLink":"https://stackoverflow.com/users/364969/walker","score":8271,"link":"https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array","body":"<p>I have an array of numbers and I'm using the <code>.push()</code> method to add elements to it.</p>\n\n<p>Is there a simple way to remove a specific element from an array?</p>\n\n<p>I'm looking for the equivalent of something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>array.remove(number);\n</code></pre>\n\n<p>I have to use <em>core</em> JavaScript. Frameworks are not allowed.</p>\n","title":"How can I remove a specific item from an array?","tags":["arrays","javascript"],"answersD":{"assetId":5767357,"profileImage":"https://www.gravatar.com/avatar/5f366a9456858ee82f3044437ec7d735?s=128&d=identicon&r=PG","displayName":"Tom Wadley","ownerLink":"https://stackoverflow.com/users/613430/tom-wadley","score":11857,"creationDate":1303597430,"body":"<p>Find the <code>index</code> of the array element you want to remove using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"noreferrer\"><code>indexOf</code></a>, and then remove that index with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a>.</p>\n\n<blockquote>\n  <p>The splice() method changes the contents of an array by removing\n  existing elements and/or adding new elements.</p>\n</blockquote>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const array = [2, 5, 9];\r\n\r\nconsole.log(array);\r\n\r\nconst index = array.indexOf(5);\r\nif (index &gt; -1) {\r\n  array.splice(index, 1);\r\n}\r\n\r\n// array = [2, 9]\r\nconsole.log(array); </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n\n<hr>\n\n<p>For the reason of completeness, here are functions. First function removes only single occurrence (i.e. removing first match of <code>5</code> from <code>[2,5,9,1,5,8,5]</code>), while second function removes all occurrences:</p>\n\n<pre><code>function removeItemOnce(arr, value) { \n    var index = arr.indexOf(value);\n    if (index &gt; -1) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}\n\nfunction removeItemAll(arr, value) {\n    var i = 0;\n    while (i &lt; arr.length) {\n        if(arr[i] === value) {\n            arr.splice(i, 1);\n        } else {\n            ++i;\n        }\n    }\n    return arr;\n}\n</code></pre>\n"}}]


  {
    "id": "abc",
    "password": "null",
    "stackid": 6118183,
    "accesstoken": "null",
    "role": "user",
    "tag1": "java",
    "tag2": "android",
    "tag3": "arrays",
    "tag4": "spring",
    "tag5": "mysql",
    "displayname": "fuzious",
    "profileimage": "https://lh5.googleusercontent.com/-M_CiRPA16wk/AAAAAAAAAAI/AAAAAAAAAGE/bCMsny8ymA8/photo.jpg?sz=128",
    "userlink": "https://stackoverflow.com/users/6118183/fuzious"
  }
